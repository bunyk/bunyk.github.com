// Generated by CoffeeScript 1.6.1
(function() {
  var $;

  $ = jQuery;

  $(function() {
    window.Todo = Backbone.Model.extend({
      defaults: {
        done: false
      },
      toggle: function() {
        return this.save({
          done: !this.get('done')
        });
      }
    });
    window.TodoList = Backbone.Collection.extend({
      model: Todo,
      localStorage: new Store('todos'),
      done: function() {
        return this.filter(function(todo) {
          return todo.get('done');
        });
      },
      remaining: function() {
        return this.without.apply(this, this.done());
      }
    });
    window.Todos = new TodoList;
    window.TodoView = Backbone.View.extend({
      tagName: 'li',
      template: _.template('<div class="todo <% if(done) { print(\'done\')} %>">\n    <div class="display" title="Doubleclick for edit...">\n        <input class="check" type="checkbox"\n            <% if(done) {print(\'checked="checked"\')} %> />\n        <div class="todo-content"><%= content %></div>\n        <span class="icon-remove todo-destroy"></span>\n    </div>\n    <div class="edit">\n        <input class="todo-input" type="text" value="<%= content %>" />\n    </div>\n</div>'),
      events: {
        "change     .check": "toggleDone",
        "dblclick   .todo-content": "edit",
        "click      .todo-destroy": "destroy",
        "keypress   .todo-input": "updateOnEnter",
        "blur       .todo-input": "close"
      },
      initialize: function() {
        _.bindAll(this, 'render', 'close', 'remove');
        this.model.bind('change', this.render);
        return this.model.bind('destroy', this.remove);
      },
      render: function() {
        this.$el.html(this.template(this.model.toJSON()));
        this.$el.toggleClass('done', this.model.get('done'));
        this.input = this.$('.todo-input');
        return this;
      },
      toggleDone: function() {
        return this.model.toggle();
      },
      edit: function() {
        $(this.el).addClass('editing');
        return this.input.focus();
      },
      close: function() {
        console.log(this.input.val());
        this.model.save({
          content: this.input.val()
        });
        return $(this.el).removeClass('editing');
      },
      updateOnEnter: function(e) {
        if (e.keyCode === 13) {
          return e.target.blur();
        }
      },
      remove: function() {
        return $(this.el).remove();
      },
      destroy: function() {
        return this.model.destroy();
      }
    });
    window.AppView = Backbone.View.extend({
      el: $('#todoapp'),
      events: {
        'keypress #new-todo': 'createOnEnter',
        'click .todos-clear a': 'clearCompleted'
      },
      initialize: function() {
        _.bindAll(this, 'addOne', 'addAll', 'render');
        this.input = this.$('#new-todo');
        Todos.bind('add', this.addOne);
        Todos.bind('refresh', this.addAll);
        return Todos.fetch();
      },
      addOne: function(todo) {
        var view;
        view = new TodoView({
          model: todo
        });
        return this.$('#todo-list').append(view.render().el);
      },
      addAll: function() {
        return Todos.each(this.addOne);
      },
      createOnEnter: function(e) {
        var value;
        if (e.keyCode !== 13) {
          return;
        }
        value = this.input.val();
        if (!value) {
          return;
        }
        Todos.create({
          content: value
        });
        return this.input.val('');
      },
      clearCompleted: function() {
        _.each(Todos.done(), function(todo) {
          return todo.destroy();
        });
        return false;
      }
    });
    return window.App = new AppView;
  });

}).call(this);
