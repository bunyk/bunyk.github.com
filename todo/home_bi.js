// Generated by CoffeeScript 1.6.1
(function() {
  var $;

  $ = jQuery;

  $(function() {
    window.Product = Backbone.Model.extend();
    window.ProductList = Backbone.Collection.extend({
      model: Product,
      localStorage: new Store('products')
    });
    window.Products = new ProductList;
    window.ProductView = Backbone.View.extend({
      tagName: 'li',
      template: _.template('<span class="content"><%= name %></span>\n<span class="edit">✎</span>\n<span class="remove">✘</span>\n<input class="input" type="text" value="<%= name %>"/>'),
      events: {
        'click .edit': 'edit',
        'click .remove': 'remove',
        'keypress .input': 'updateOnEnter',
        'blur .input': 'close'
      },
      initialize: function() {
        _.bindAll(this, 'render', 'close', 'remove');
        this.model.bind('change', this.render);
        return this.model.bind('destroy', this.remove);
      },
      render: function() {
        this.$el.html(this.template(this.model.toJSON()));
        this.input = this.$('.input');
        return this;
      },
      edit: function() {
        $(this.el).addClass('editing');
        return this.input.focus();
      },
      close: function() {
        this.model.save({
          name: this.input.val()
        });
        return $(this.el).removeClass('editing');
      },
      updateOnEnter: function(e) {
        if (e.keyCode === 13) {
          return e.target.blur();
        }
      },
      remove: function() {
        return $(this.el).remove();
      },
      destroy: function() {
        return this.model.destroy();
      }
    });
    window.ProductListView = Backbone.View.extend({
      el: $('#products'),
      events: {
        'keypress #new-product': 'createOnEnter'
      },
      initialize: function() {
        _.bindAll(this, 'addOne', 'addAll', 'render');
        this.input = this.$('#new-product');
        Products.bind('add', this.addOne);
        Products.bind('refresh', this.addAll);
        return Products.fetch();
      },
      addOne: function(product) {
        var view;
        view = new ProductView({
          model: product
        });
        return this.$('#product-list').append(view.render().el);
      },
      addAll: function() {
        return Products.each(this.addOne);
      },
      createOnEnter: function(e) {
        var value;
        if (e.keyCode !== 13) {
          return;
        }
        value = this.input.val();
        if (!value) {
          return;
        }
        Products.create({
          name: value
        });
        return this.input.val('');
      }
    });
    return window.ProductListWidget = new ProductListView;
  });

}).call(this);
