{"pageProps":{"post":{"id":"sicp2.1.4","title":"SICP 2.1.4: Interval arithmetic","date":"2020-07-15","tags":["SICP"],"excerpt":"<p>Less mind-blowing ideas, more practice.</p>","content":"<p>Less mind-blowing ideas, more practice.</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">add-interval</span> x y)\n  (<span class=\"hljs-name\">make-interval</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> (<span class=\"hljs-name\">lower-bound</span> x) (<span class=\"hljs-name\">lower-bound</span> y))\n                 (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> (<span class=\"hljs-name\">upper-bound</span> x) (<span class=\"hljs-name\">upper-bound</span> y))))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">mul-interval</span> x y)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">let</span></span> ((<span class=\"hljs-name\">p1</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> (<span class=\"hljs-name\">lower-bound</span> x) (<span class=\"hljs-name\">lower-bound</span> y)))\n        (<span class=\"hljs-name\">p2</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> (<span class=\"hljs-name\">lower-bound</span> x) (<span class=\"hljs-name\">upper-bound</span> y)))\n        (<span class=\"hljs-name\">p3</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> (<span class=\"hljs-name\">upper-bound</span> x) (<span class=\"hljs-name\">lower-bound</span> y)))\n        (<span class=\"hljs-name\">p4</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> (<span class=\"hljs-name\">upper-bound</span> x) (<span class=\"hljs-name\">upper-bound</span> y))))\n    (<span class=\"hljs-name\">make-interval</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">min</span></span> p1 p2 p3 p4)\n                   (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">max</span></span> p1 p2 p3 p4))))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">div-interval</span> x y)\n  (<span class=\"hljs-name\">mul-interval</span> x \n                (<span class=\"hljs-name\">make-interval</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> <span class=\"hljs-number\">1.0</span> (<span class=\"hljs-name\">upper-bound</span> y))\n                               (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> <span class=\"hljs-number\">1.0</span> (<span class=\"hljs-name\">lower-bound</span> y)))))</code></pre>\n<h2>Exercise 2.7</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">make-interval</span> a b) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> a b))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">lower-bound</span> i)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">min</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> i) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> i)))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">upper-bound</span> i)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">max</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> i) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> i)))</code></pre>\n<h2>Exercise 2.8</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">sub-interval</span> x y)\n  (<span class=\"hljs-name\">make-interval</span> \n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> (<span class=\"hljs-name\">lower-bound</span> x) (<span class=\"hljs-name\">upper-bound</span> y))\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> (<span class=\"hljs-name\">upper-bound</span> x) (<span class=\"hljs-name\">lower-bound</span> y))))</code></pre>\n<h2>Exercise 2.9</h2>\n<p>Let's have interval (a1,b1) of width w1 = b1 - a1. And similar interval (a2,b2) of width w2 = b2 - a2.</p>\n<p>(a1,b1) + (a2,b2) = (a1 + a2, b1+b2)\nwidth of this interval is (b1+b2) - (a1+a2) = (b1 - a1) + (b2-a2) = w1+w2</p>\n<p>(a1,b1) - (a2,b2) = (a1 - b2, b1-a2)</p>\n<p>width of this interval is (b1-a2) - (a1-b2) = b1 - a2 - a1 + b2 = (b1 - a1) + (b2-a2) = w1+w2</p>\n<p>Multiplication counterexample:</p>\n<p>Let's multiply two intervals of width 1:\n(1,2) * (1,2) = (1, 3)\nGives interval of width 3.</p>\n<p>Let's multiply another two intervals of width 1:\n(1,2) * (2,3) = (2, 6)</p>\n<p>Gives interval of width 6. Width of multiplication could not be just function of width of arguments, because it's gives different results for the same inputs. It must be function of something else.</p>\n<h2>Exercise 2.10</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">spans-zero</span> i)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">and</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">&#x3C;=</span></span> (<span class=\"hljs-name\">lower-bound</span> i) <span class=\"hljs-number\">0</span>) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">>=</span></span> (<span class=\"hljs-name\">upper-bound</span> i) <span class=\"hljs-number\">0</span>))\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">div-interval</span> x y)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\">spans-zero</span> y)\n    (<span class=\"hljs-name\">error</span> <span class=\"hljs-string\">\"Could not divide by interval that spans zero\"</span>)\n    (<span class=\"hljs-name\">mul-interval</span> x \n                (<span class=\"hljs-name\">make-interval</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> <span class=\"hljs-number\">1.0</span> (<span class=\"hljs-name\">upper-bound</span> y))\n                               (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> <span class=\"hljs-number\">1.0</span> (<span class=\"hljs-name\">lower-bound</span> y))))\n  )\n)</code></pre>\n<h2>Exercise 2.11</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">random-interval</span>) \n  (<span class=\"hljs-name\">make-interval</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> (<span class=\"hljs-name\">random</span> <span class=\"hljs-number\">11</span>) <span class=\"hljs-number\">5</span>) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> (<span class=\"hljs-name\">random</span> <span class=\"hljs-number\">11</span>) <span class=\"hljs-number\">5</span>))\n)\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">eq-interval</span> a b)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">and</span></span>\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> (<span class=\"hljs-name\">lower-bound</span> a) (<span class=\"hljs-name\">lower-bound</span> b))\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> (<span class=\"hljs-name\">upper-bound</span> a) (<span class=\"hljs-name\">upper-bound</span> b))\n  )\n)\n\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">test-mul-interval</span>) \n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">bad-pair</span> i1 i2) \n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">display</span></span> <span class=\"hljs-string\">\"Mul-iterval result differs for \"</span>)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">display</span></span> i1)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">display</span></span> i2)\n    <span class=\"hljs-literal\">#f</span>\n  )\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">try</span> n)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> n <span class=\"hljs-number\">0</span>) <span class=\"hljs-literal\">#t</span>\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">let</span></span> (\n            (<span class=\"hljs-name\">i1</span> (<span class=\"hljs-name\">random-interval</span>))\n            (<span class=\"hljs-name\">i2</span> (<span class=\"hljs-name\">random-interval</span>))\n        )\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\">eq-interval</span> (<span class=\"hljs-name\">mul-interval2</span> i1 i2) (<span class=\"hljs-name\">mul-interval</span> i1 i2))\n          (<span class=\"hljs-name\">try</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> n <span class=\"hljs-number\">1</span>)) \n          (<span class=\"hljs-name\">bad-pair</span> i1 i2)\n        )\n      )\n    )\n  )\n  (<span class=\"hljs-name\">try</span> <span class=\"hljs-number\">100</span>)\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">mul-interval2</span> x y)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">let</span></span> (\n    (<span class=\"hljs-name\">lx</span> (<span class=\"hljs-name\">lower-bound</span> x))\n    (<span class=\"hljs-name\">ux</span> (<span class=\"hljs-name\">upper-bound</span> x))\n    (<span class=\"hljs-name\">ly</span> (<span class=\"hljs-name\">lower-bound</span> y))\n    (<span class=\"hljs-name\">uy</span> (<span class=\"hljs-name\">upper-bound</span> y))\n  )\n\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cond</span></span> \n    ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">and</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">&#x3C;</span></span> ux <span class=\"hljs-number\">0</span>) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">&#x3C;</span></span> uy <span class=\"hljs-number\">0</span>))\n     (<span class=\"hljs-name\">make-interval</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> ux uy) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> lx ly)))\n\n    ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">and</span></span> (<span class=\"hljs-name\">spans-zero</span> x) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">&#x3C;</span></span> uy <span class=\"hljs-number\">0</span>))\n     (<span class=\"hljs-name\">make-interval</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> ux ly) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> lx ly)))\n\n    ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">and</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">></span></span> lx <span class=\"hljs-number\">0</span>) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">&#x3C;</span></span> uy <span class=\"hljs-number\">0</span>))\n     (<span class=\"hljs-name\">make-interval</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> ux ly) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> lx uy)))\n\n    ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">and</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">&#x3C;</span></span> ux <span class=\"hljs-number\">0</span>) (<span class=\"hljs-name\">spans-zero</span> y))\n     (<span class=\"hljs-name\">make-interval</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> lx uy) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> lx ly)))\n\n    ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">and</span></span> (<span class=\"hljs-name\">spans-zero</span> x) (<span class=\"hljs-name\">spans-zero</span> y))\n     (<span class=\"hljs-name\">make-interval</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">min</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> ux ly) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> lx uy)) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">max</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> lx ly) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> ux uy))))\n\n    ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">and</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">></span></span> lx <span class=\"hljs-number\">0</span>) (<span class=\"hljs-name\">spans-zero</span> y))\n     (<span class=\"hljs-name\">make-interval</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> ux ly) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> ux uy)))\n\n    ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">and</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">&#x3C;</span></span> ux <span class=\"hljs-number\">0</span>) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">></span></span> ly <span class=\"hljs-number\">0</span>))\n     (<span class=\"hljs-name\">make-interval</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> lx uy) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> ux ly)))\n\n    ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">and</span></span> (<span class=\"hljs-name\">spans-zero</span> x) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">></span></span> ly <span class=\"hljs-number\">0</span>))\n     (<span class=\"hljs-name\">make-interval</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> lx uy) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> ux uy)))\n\n    ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">and</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">></span></span> lx <span class=\"hljs-number\">0</span>) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">></span></span> ly <span class=\"hljs-number\">0</span>))\n     (<span class=\"hljs-name\">make-interval</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> lx ly) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> ux uy)))\n\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">else</span></span> (<span class=\"hljs-name\">error</span> <span class=\"hljs-string\">\"impossible case\"</span>))\n  ))\n)</code></pre>\n<p>Wow this took a lot of effort. Good that they teached to use let, without it secod version of mul-interval would be huge.</p>\n<p>And this required lots of attention, but somehow my code passed the test from the first try.</p>\n<h2>Exercise 2.12</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">make-center-width</span> c w)\n  (<span class=\"hljs-name\">make-interval</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> c w) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> c w)))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">center</span> i)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> (<span class=\"hljs-name\">lower-bound</span> i) (<span class=\"hljs-name\">upper-bound</span> i)) <span class=\"hljs-number\">2</span>))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">width</span> i)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> (<span class=\"hljs-name\">upper-bound</span> i) (<span class=\"hljs-name\">lower-bound</span> i)) <span class=\"hljs-number\">2</span>))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">make-center-percent</span> c p)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">let</span></span> ((<span class=\"hljs-name\">w</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> p <span class=\"hljs-number\">0.01</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">abs</span></span> c))))\n  (<span class=\"hljs-name\">make-interval</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> c w) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> c w))))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">percent</span> i)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> <span class=\"hljs-number\">100</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> (<span class=\"hljs-name\">width</span> i) (<span class=\"hljs-name\">center</span> i)))\n)</code></pre>\n<h2>Exercise 2.13</h2>\n<p>It's approximately addition.</p>\n<h2>Exercise 2.14</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">par1</span> r1 r2)\n  (<span class=\"hljs-name\">div-interval</span> (<span class=\"hljs-name\">mul-interval</span> r1 r2)\n                (<span class=\"hljs-name\">add-interval</span> r1 r2)))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">par2</span> r1 r2)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">let</span></span> ((<span class=\"hljs-name\">one</span> (<span class=\"hljs-name\">make-interval</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">1</span>))) \n    (<span class=\"hljs-name\">div-interval</span> one\n                  (<span class=\"hljs-name\">add-interval</span> (<span class=\"hljs-name\">div-interval</span> one r1)\n                                (<span class=\"hljs-name\">div-interval</span> one r2)))))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> a (<span class=\"hljs-name\">make-center-percent</span> <span class=\"hljs-number\">100</span> <span class=\"hljs-number\">1</span>))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> b (<span class=\"hljs-name\">make-center-percent</span> <span class=\"hljs-number\">200</span> <span class=\"hljs-number\">1</span>))\n\n\n(<span class=\"hljs-name\">center</span> (<span class=\"hljs-name\">par1</span> a b))\n(<span class=\"hljs-name\">center</span> (<span class=\"hljs-name\">par2</span> a b))\n\n(<span class=\"hljs-name\">percent</span> (<span class=\"hljs-name\">par1</span> a b))\n(<span class=\"hljs-name\">percent</span> (<span class=\"hljs-name\">par2</span> a b))</code></pre>\n<h2>Exercise 2.15</h2>\n<p>Every operation on intervals with non zero width increases width of result.</p>\n<p>In par1 program does 3 operations in which both intervals have non zero widht, and par2 program does only addition, all the rest are operations with interval of zero widht.</p>\n<h2>Exercise 2.16</h2>\n<p>No I can not, because as they said, this problem is very difficult. I imagine it will require simplification of expression to some base form, before computing it.</p>"},"archives":[{"url":"/month/2018-08/page/1","id":"2018-08","count":1,"title":"2018-08"},{"url":"/month/2020-06/page/1","id":"2020-06","count":7,"title":"2020-06"},{"url":"/month/2020-07/page/1","id":"2020-07","count":10,"title":"2020-07"},{"url":"/month/2020-08/page/1","id":"2020-08","count":2,"title":"2020-08"},{"url":"/month/2020-09/page/1","id":"2020-09","count":2,"title":"2020-09"},{"url":"/month/2020-12/page/1","id":"2020-12","count":1,"title":"2020-12"},{"url":"/month/2021-01/page/1","id":"2021-01","count":4,"title":"2021-01"}],"topics":[{"url":"/tag/MOOC/page/1","id":"MOOC","title":"MOOC","count":2},{"url":"/tag/SICP/page/1","id":"SICP","title":"SICP","count":20},{"url":"/tag/ideas/page/1","id":"ideas","title":"ideas","count":1},{"url":"/tag/notes/page/1","id":"notes","title":"notes","count":5},{"url":"/tag/on writing/page/1","id":"on writing","title":"on writing","count":3}]},"__N_SSG":true}