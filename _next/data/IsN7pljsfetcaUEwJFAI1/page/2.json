{"pageProps":{"pageNumber":"2","posts":[{"id":"sicp2.3.2","title":"SICP 2.3.2 Symbolic differentiation","date":"2020-07-26","tags":["SICP"],"excerpt":"<p>I decided to skip picture language, because of technical reasons. Also, 2.3.1 I'll do in this post, because it was just to short. Here we get one step clother to build interpreter, not yet for programming language, but at least for mathematical expressions.</p>\n<p>And now we are in the <a href=\"https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book-Z-H-16.html#%25_sec_2.3\">middle of second chapter</a>.</p>","content":"<p>I decided to skip picture language, because of technical reasons. Also, 2.3.1 I'll do in this post, because it was just to short. Here we get one step clother to build interpreter, not yet for programming language, but at least for mathematical expressions.</p>\n<p>And now we are in the <a href=\"https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book-Z-H-16.html#%25_sec_2.3\">middle of second chapter</a>.</p>\n<h2>Exercise 2.54</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">equal?</span></span> l1 l2)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">pair?</span></span> l1)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">pair?</span></span> l2)\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">equal?</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> l1) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> l2))\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">equal?</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> l1) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> l2))\n        <span class=\"hljs-literal\">#f</span>\n      )\n      <span class=\"hljs-literal\">#f</span>\n    )\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">pair?</span></span> l2)\n      <span class=\"hljs-literal\">#f</span>\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">eq?</span></span> l1 l2) \n    )\n  )\n)\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">equal?</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span>) '(<span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span>))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">equal?</span></span> '() '())\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">equal?</span></span> <span class=\"hljs-symbol\">'a</span> <span class=\"hljs-symbol\">'a</span>)\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">equal?</span></span> <span class=\"hljs-symbol\">'a</span> <span class=\"hljs-symbol\">'b</span>)\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">equal?</span></span> '(<span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span>) '(list <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span>))</code></pre>\n<h2>Exercise 2.55</h2>\n<p><code>''abracadabra</code> is actually a <code>(quote (quote abracadabra))</code> which has value <code>(quote abracadabra)</code>, and <code>car</code> of it is <code>quote</code>.</p>\n<h2>Exercise 2.56</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">variable?</span> x) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">symbol?</span></span> x))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">same-variable?</span> v1 v2)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">and</span></span> (<span class=\"hljs-name\">variable?</span> v1) (<span class=\"hljs-name\">variable?</span> v2) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">eq?</span></span> v1 v2)))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">=number?</span> exp num)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">and</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">number?</span></span> exp) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> exp num)))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">make-sum</span> a1 a2)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cond</span></span> ((<span class=\"hljs-name\">=number?</span> a1 <span class=\"hljs-number\">0</span>) a2)\n        ((<span class=\"hljs-name\">=number?</span> a2 <span class=\"hljs-number\">0</span>) a1)\n        ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">and</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">number?</span></span> a1) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">number?</span></span> a2)) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> a1 a2))\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">else</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-symbol\">'+</span> a1 a2))))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">make-product</span> m1 m2)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cond</span></span> ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">or</span></span> (<span class=\"hljs-name\">=number?</span> m1 <span class=\"hljs-number\">0</span>) (<span class=\"hljs-name\">=number?</span> m2 <span class=\"hljs-number\">0</span>)) <span class=\"hljs-number\">0</span>)\n        ((<span class=\"hljs-name\">=number?</span> m1 <span class=\"hljs-number\">1</span>) m2)\n        ((<span class=\"hljs-name\">=number?</span> m2 <span class=\"hljs-number\">1</span>) m1)\n        ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">and</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">number?</span></span> m1) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">number?</span></span> m2)) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> m1 m2))\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">else</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-symbol\">'*</span> m1 m2))))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">sum?</span> x)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">and</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">pair?</span></span> x) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">eq?</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> x) <span class=\"hljs-symbol\">'+</span>)))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">addend</span> s) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cadr</span></span> s))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">augend</span> s) (<span class=\"hljs-name\">caddr</span> s))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">product?</span> x)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">and</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">pair?</span></span> x) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">eq?</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> x) <span class=\"hljs-symbol\">'*</span>)))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">multiplier</span> p) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cadr</span></span> p))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">multiplicand</span> p) (<span class=\"hljs-name\">caddr</span> p))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">exponentiation?</span> x)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">and</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">pair?</span></span> x) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">eq?</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> x) <span class=\"hljs-symbol\">'**</span>)))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">base</span> e) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cadr</span></span> e))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">exponent</span> e) (<span class=\"hljs-name\">caddr</span> e))\n \n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">make-exponentiation</span> base e)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cond</span></span> ((<span class=\"hljs-name\">=number?</span> e <span class=\"hljs-number\">0</span>) <span class=\"hljs-number\">1</span>)\n        ((<span class=\"hljs-name\">=number?</span> e <span class=\"hljs-number\">1</span>) base)\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">else</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-symbol\">'**</span> base e))))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">deriv</span> exp var)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cond</span></span> ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">number?</span></span> exp) <span class=\"hljs-number\">0</span>)\n        ((<span class=\"hljs-name\">variable?</span> exp)\n         (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\">same-variable?</span> exp var) <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">0</span>))\n        ((<span class=\"hljs-name\">sum?</span> exp)\n         (<span class=\"hljs-name\">make-sum</span> (<span class=\"hljs-name\">deriv</span> (<span class=\"hljs-name\">addend</span> exp) var)\n                   (<span class=\"hljs-name\">deriv</span> (<span class=\"hljs-name\">augend</span> exp) var)))\n        ((<span class=\"hljs-name\">product?</span> exp)\n         (<span class=\"hljs-name\">make-sum</span>\n           (<span class=\"hljs-name\">make-product</span> (<span class=\"hljs-name\">multiplier</span> exp)\n                         (<span class=\"hljs-name\">deriv</span> (<span class=\"hljs-name\">multiplicand</span> exp) var))\n           (<span class=\"hljs-name\">make-product</span> (<span class=\"hljs-name\">deriv</span> (<span class=\"hljs-name\">multiplier</span> exp) var)\n                         (<span class=\"hljs-name\">multiplicand</span> exp))))\n        ((<span class=\"hljs-name\">exponentiation?</span> exp)\n         (<span class=\"hljs-name\">make-product</span> (<span class=\"hljs-name\">exponent</span> exp) (<span class=\"hljs-name\">make-exponentiation</span> \n                (<span class=\"hljs-name\">base</span> exp)\n                (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> (<span class=\"hljs-name\">exponent</span> exp) <span class=\"hljs-number\">1</span>)\n            )))\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">else</span></span>\n         (<span class=\"hljs-name\">error</span> <span class=\"hljs-string\">\"unknown expression type -- DERIV\"</span> exp))))\n\n\n(<span class=\"hljs-name\">deriv</span> '(+ (** x <span class=\"hljs-number\">3</span>) (** x <span class=\"hljs-number\">2</span>)) <span class=\"hljs-symbol\">'x</span>)</code></pre>\n<h2>Exercise 2.57</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">make-sum</span> a1 a2)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cond</span></span> ((<span class=\"hljs-name\">=number?</span> a1 <span class=\"hljs-number\">0</span>) a2)\n        ((<span class=\"hljs-name\">=number?</span> a2 <span class=\"hljs-number\">0</span>) a1)\n        ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">and</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">number?</span></span> a1) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">number?</span></span> a2)) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> a1 a2))\n        ((<span class=\"hljs-name\">sum?</span> a2) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">append</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-symbol\">'+</span> a1) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> a2)))\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">else</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-symbol\">'+</span> a1 a2))))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">addend</span> s) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cadr</span></span> s))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">augend</span> s) \n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">null?</span></span> (<span class=\"hljs-name\">cdddr</span> s))\n    (<span class=\"hljs-name\">caddr</span> s)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> <span class=\"hljs-symbol\">'+</span> (<span class=\"hljs-name\">cddr</span> s))))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">make-product</span> m1 m2)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cond</span></span> ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">or</span></span> (<span class=\"hljs-name\">=number?</span> m1 <span class=\"hljs-number\">0</span>) (<span class=\"hljs-name\">=number?</span> m2 <span class=\"hljs-number\">0</span>)) <span class=\"hljs-number\">0</span>)\n        ((<span class=\"hljs-name\">=number?</span> m1 <span class=\"hljs-number\">1</span>) m2)\n        ((<span class=\"hljs-name\">=number?</span> m2 <span class=\"hljs-number\">1</span>) m1)\n        ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">and</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">number?</span></span> m1) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">number?</span></span> m2)) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> m1 m2))\n        ((<span class=\"hljs-name\">product?</span> m2) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">append</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-symbol\">'*</span> m1) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> m2)))\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">else</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-symbol\">'*</span> m1 m2))))\n\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">multiplier</span> p) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cadr</span></span> p))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">multiplicand</span> s) \n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">null?</span></span> (<span class=\"hljs-name\">cdddr</span> s))\n    (<span class=\"hljs-name\">caddr</span> s)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> <span class=\"hljs-symbol\">'*</span> (<span class=\"hljs-name\">cddr</span> s))))\n\n(<span class=\"hljs-name\">deriv</span> '(+ x (* x x x) (** x <span class=\"hljs-number\">3</span>)) <span class=\"hljs-symbol\">'x</span>)\n<span class=\"hljs-comment\">;Value 30: (+ 1 (+ (* x (+ x x)) (* x x)) (* 3 (** x 2)))</span></code></pre>\n<h2>Exercise 2.58</h2>\n<p>So, we want this to work:</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\">deriv</span> '(x + x**2 + <span class=\"hljs-number\">3</span> * x**3) <span class=\"hljs-symbol\">'x</span>)</code></pre>\n<p>At first I wanted to add some parsing step that converts this to lisp, and then reread requirements, and found this: \"Can you design appropriate predicates, selectors, and constructors for this notation such that our derivative program still works?\"</p>\n<p>So, no transformation, this should be the format of data, and we need to change functions that work with it.</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">priority</span> sym)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cond</span></span> \n    ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">eq?</span></span> sym <span class=\"hljs-symbol\">'+</span>) <span class=\"hljs-number\">1</span>)\n    ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">eq?</span></span> sym <span class=\"hljs-symbol\">'*</span>) <span class=\"hljs-number\">2</span>)\n    ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">eq?</span></span> sym <span class=\"hljs-symbol\">'**</span>) <span class=\"hljs-number\">3</span>)\n    ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">number?</span></span> sym) <span class=\"hljs-number\">4</span>)\n    ((<span class=\"hljs-name\">variable?</span> sym) <span class=\"hljs-number\">4</span>)\n    ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">pair?</span></span> sym) <span class=\"hljs-number\">4</span>)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">else</span></span> (<span class=\"hljs-name\">error</span> <span class=\"hljs-string\">\"unknown symbol --priority\"</span> sym))\n  )\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">least-priority-operation</span> exp)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">iter</span> op min-pr exp)\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">null?</span></span> exp)\n            op\n            (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">let</span></span> ((<span class=\"hljs-name\">np</span> (<span class=\"hljs-name\">priority</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> exp))))\n                (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">&#x3C;</span></span> np min-pr)\n                    (<span class=\"hljs-name\">iter</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> exp) np (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> exp))\n                    (<span class=\"hljs-name\">iter</span> op min-pr (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> exp))\n                )\n            )\n        )\n    )\n    (<span class=\"hljs-name\">iter</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> exp) (<span class=\"hljs-name\">priority</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> exp)) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> exp))\n)\n\n(<span class=\"hljs-name\">least-priority-operation</span> '(x + x**2 + <span class=\"hljs-number\">3</span> * x**3))\n(<span class=\"hljs-name\">least-priority-operation</span> '(x * y ** <span class=\"hljs-number\">2</span>))\n(<span class=\"hljs-name\">least-priority-operation</span> '(y ** <span class=\"hljs-number\">2</span>))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">unwrap</span> val) \n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">and</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">pair?</span></span> val) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">null?</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> val)))\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> val)\n        val\n    )\n)\n\n<span class=\"hljs-comment\">; Return part of expression before first appearance of given symbol</span>\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">before</span> sym exp)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">or</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">null?</span></span> exp) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">eq?</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> exp) sym))\n        '()\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span>\n            (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> exp)\n            (<span class=\"hljs-name\">before</span> sym (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> exp))\n        )\n    )\n)\n\n(<span class=\"hljs-name\">before</span> <span class=\"hljs-symbol\">'+</span> '(y ** <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">3</span>))\n\n<span class=\"hljs-comment\">; Return part of expression after symbol</span>\n<span class=\"hljs-comment\">; BTW, for division to work properly we need to take last occurence here, but </span>\n<span class=\"hljs-comment\">; as we don't have division - I'll leave it with first</span>\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">after</span> sym exp)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">null?</span></span> exp)\n        '()\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">eq?</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> exp) sym)\n            (<span class=\"hljs-name\">unwrap</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> exp))\n            (<span class=\"hljs-name\">after</span> sym (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> exp))\n        )\n    )\n)\n\n(<span class=\"hljs-name\">after</span> <span class=\"hljs-symbol\">'+</span> '(y ** <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">3</span>))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">make-sum</span> a1 a2)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cond</span></span> ((<span class=\"hljs-name\">=number?</span> a1 <span class=\"hljs-number\">0</span>) a2)\n        ((<span class=\"hljs-name\">=number?</span> a2 <span class=\"hljs-number\">0</span>) a1)\n        ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">and</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">number?</span></span> a1) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">number?</span></span> a2)) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> a1 a2))\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">else</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> a1 <span class=\"hljs-symbol\">'+</span> a2))))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">make-product</span> m1 m2)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cond</span></span> ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">or</span></span> (<span class=\"hljs-name\">=number?</span> m1 <span class=\"hljs-number\">0</span>) (<span class=\"hljs-name\">=number?</span> m2 <span class=\"hljs-number\">0</span>)) <span class=\"hljs-number\">0</span>)\n        ((<span class=\"hljs-name\">=number?</span> m1 <span class=\"hljs-number\">1</span>) m2)\n        ((<span class=\"hljs-name\">=number?</span> m2 <span class=\"hljs-number\">1</span>) m1)\n        ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">and</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">number?</span></span> m1) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">number?</span></span> m2)) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> m1 m2))\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">else</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> m1 <span class=\"hljs-symbol\">'*</span> m2))))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">sum?</span> x)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">and</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">pair?</span></span> x) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">eq?</span></span> (<span class=\"hljs-name\">least-priority-operation</span> x) <span class=\"hljs-symbol\">'+</span>)))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">addend</span> s) (<span class=\"hljs-name\">unwrap</span> (<span class=\"hljs-name\">before</span> <span class=\"hljs-symbol\">'+</span> s)))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">augend</span> s) (<span class=\"hljs-name\">after</span> <span class=\"hljs-symbol\">'+</span> s))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">product?</span> x)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">and</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">pair?</span></span> x) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">eq?</span></span> (<span class=\"hljs-name\">least-priority-operation</span> x) <span class=\"hljs-symbol\">'*</span>)))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">multiplier</span> p) (<span class=\"hljs-name\">unwrap</span> (<span class=\"hljs-name\">before</span> <span class=\"hljs-symbol\">'*</span> p)))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">multiplicand</span> p) (<span class=\"hljs-name\">after</span> <span class=\"hljs-symbol\">'*</span> p))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">exponentiation?</span> x)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">and</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">pair?</span></span> x) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">eq?</span></span> (<span class=\"hljs-name\">least-priority-operation</span> x) <span class=\"hljs-symbol\">'**</span>)))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">base</span> e) (<span class=\"hljs-name\">unwrap</span> (<span class=\"hljs-name\">before</span> <span class=\"hljs-symbol\">'**</span> e)))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">exponent</span> e) (<span class=\"hljs-name\">after</span> <span class=\"hljs-symbol\">'**</span> e))\n \n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">make-exponentiation</span> base e)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cond</span></span> ((<span class=\"hljs-name\">=number?</span> e <span class=\"hljs-number\">0</span>) <span class=\"hljs-number\">1</span>)\n        ((<span class=\"hljs-name\">=number?</span> e <span class=\"hljs-number\">1</span>) base)\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">else</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> base <span class=\"hljs-symbol\">'**</span> e))))\n\n(<span class=\"hljs-name\">deriv</span> '(x + x ** <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">3</span> * x ** <span class=\"hljs-number\">3</span>) <span class=\"hljs-symbol\">'x</span>)</code></pre>\n<p>This is rather ugly (I don't like <code>before</code>, <code>after</code>, <code>unwrap</code> etc., it does not seem very performant to use them), but I see we will have another example Symbolic Algebra later, maybe there will be a chance to make it better.</p>"},{"id":"sicp2.2.3","title":"SICP 2.2.3 Sequences as Conventional Interfaces","date":"2020-07-23","tags":["SICP"],"excerpt":"<p>Here we become skilled in list manipulation and build a set of useful subroutines.</p>","content":"<p>Here we become skilled in list manipulation and build a set of useful subroutines.</p>\n<h2>Exercise 2.33</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">accumulate</span> op initial sequence)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">null?</span></span> sequence)\n      initial\n      (<span class=\"hljs-name\">op</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> sequence)\n          (<span class=\"hljs-name\">accumulate</span> op initial (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> sequence)))))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">map</span></span> p sequence)\n  (<span class=\"hljs-name\">accumulate</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (x y) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> (<span class=\"hljs-name\">p</span> x) y)) nil sequence))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">map</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (x) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> <span class=\"hljs-number\">1</span> x)) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">3</span>))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">append</span></span> seq1 seq2)\n  (<span class=\"hljs-name\">accumulate</span> cons seq2 seq1))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">append</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">3</span>) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">4</span> <span class=\"hljs-number\">5</span>))\n\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">length</span></span> sequence)\n  (<span class=\"hljs-name\">accumulate</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (x y) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> <span class=\"hljs-number\">1</span> y)) <span class=\"hljs-number\">0</span> sequence))</code></pre>\n<h2>Exercise 2.34</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">horner-eval</span> x coefficient-sequence)\n  (<span class=\"hljs-name\">accumulate</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (this-coeff higher-terms) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> this-coeff (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> higher-terms x)))\n              <span class=\"hljs-number\">0</span>\n              coefficient-sequence))\n\n(<span class=\"hljs-name\">horner-eval</span> <span class=\"hljs-number\">2</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">5</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">1</span>))\n<span class=\"hljs-comment\">; 79</span></code></pre>\n<h2>Exercise 2.35</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">identity</span> x) x)\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">count-leaves</span> t)\n  (<span class=\"hljs-name\">accumulate</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (head tail)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">pair?</span></span> head) (<span class=\"hljs-name\">count-leaves</span> head) <span class=\"hljs-number\">1</span>) tail)\n  ) <span class=\"hljs-number\">0</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">map</span></span> identity t)))</code></pre>\n<p>Don't know why map is here...</p>\n<h2>Exercise 2.36</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">accumulate-n</span> op init seqs)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">null?</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> seqs))\n      nil\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> (<span class=\"hljs-name\">accumulate</span> op init (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">map</span></span> car seqs))\n            (<span class=\"hljs-name\">accumulate-n</span> op init (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">map</span></span> cdr seqs)))))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> s (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">3</span>) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">4</span> <span class=\"hljs-number\">5</span> <span class=\"hljs-number\">6</span>) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">7</span> <span class=\"hljs-number\">8</span> <span class=\"hljs-number\">9</span>) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">10</span> <span class=\"hljs-number\">11</span> <span class=\"hljs-number\">12</span>)))\n(<span class=\"hljs-name\">accumulate-n</span> + <span class=\"hljs-number\">0</span> s)</code></pre>\n<h2>Exercise 2.37</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">dot-product</span> v w)\n  (<span class=\"hljs-name\">accumulate</span> + <span class=\"hljs-number\">0</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">map</span></span> * v w)))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">matrix-*-vector</span> m v)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">map</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (m-row) (<span class=\"hljs-name\">dot-product</span> m-row v)) m))\n\n(<span class=\"hljs-name\">matrix-*-vector</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">-1</span>) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">0</span>)) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">0</span>))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">transpose</span> mat)\n  (<span class=\"hljs-name\">accumulate-n</span> cons nil mat))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">matrix-*-matrix</span> m n)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">let</span></span> ((<span class=\"hljs-name\">cols</span> (<span class=\"hljs-name\">transpose</span> n)))\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">map</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (m-row)\n           (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">map</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (n-col)\n                  (<span class=\"hljs-name\">dot-product</span> m-row n-col)\n                )\n            cols\n           )\n         ) m)))</code></pre>\n<h2>Exercise 2.38</h2>\n<p>I guess, if operation is commutative and associative, then it does not matter which fold to use, otherwise it matters.</p>\n<h2>Exercise 2.39</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">reverse</span></span> sequence)\n  (<span class=\"hljs-name\">fold-right</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (x y) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">append</span></span> y (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> x))) nil sequence))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">reverse</span></span> sequence)\n  (<span class=\"hljs-name\">fold-left</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (x y) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> y x)) nil sequence))</code></pre>\n<h1>Exercise 2.40</h1>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">enumerate-interval</span> low high)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">></span></span> low high)\n      nil\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> low (<span class=\"hljs-name\">enumerate-interval</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> low <span class=\"hljs-number\">1</span>) high))))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">flatmap</span> proc seq)\n  (<span class=\"hljs-name\">accumulate</span> append nil (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">map</span></span> proc seq)))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">unique-pairs</span> n)\n  (<span class=\"hljs-name\">flatmap</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (i)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">map</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (j) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> i j)) (<span class=\"hljs-name\">enumerate-interval</span> <span class=\"hljs-number\">1</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> i <span class=\"hljs-number\">1</span>)))\n  ) (<span class=\"hljs-name\">enumerate-interval</span> <span class=\"hljs-number\">2</span> n))\n)\n(<span class=\"hljs-name\">unique-pairs</span> <span class=\"hljs-number\">5</span>)\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">any</span> l) \n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">null?</span></span> l)\n    <span class=\"hljs-literal\">#f</span>\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> l)\n      <span class=\"hljs-literal\">#t</span>\n      (<span class=\"hljs-name\">any</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> l))\n    )\n  )\n)\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">prime?</span> n)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">divisor?</span> x) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">remainder</span></span> n x) <span class=\"hljs-number\">0</span>))\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">not</span></span> (<span class=\"hljs-name\">any</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">map</span></span> divisor? (<span class=\"hljs-name\">enumerate-interval</span> <span class=\"hljs-number\">2</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">truncate</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> n <span class=\"hljs-number\">2</span>))))))\n)\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">test-prime</span>)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">map</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (n) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> n (<span class=\"hljs-name\">prime?</span> n))) (<span class=\"hljs-name\">enumerate-interval</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">20</span>))\n)\n(<span class=\"hljs-name\">test-prime</span>)\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">prime-sum-pairs</span> n)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">prime-sum?</span> pair)\n      (<span class=\"hljs-name\">prime?</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> pair) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cadr</span></span> pair))))\n\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">make-pair-sum</span> pair)\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> pair) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cadr</span></span> pair) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> pair) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cadr</span></span> pair))))\n\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">map</span></span> make-pair-sum\n       (<span class=\"hljs-name\">filter</span> prime-sum? (<span class=\"hljs-name\">unique-pairs</span> n))))\n(<span class=\"hljs-name\">prime-sum-pairs</span> <span class=\"hljs-number\">6</span>)</code></pre>\n<h2>Exercise 2.41</h2>\n<pre><code class=\"hljs language-scheme\"><span class=\"hljs-comment\">; 1 &#x3C;= i &#x3C; j &#x3C; k &#x3C;= n</span>\n<span class=\"hljs-comment\">; i + j + k = s</span>\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">triplets</span> n s)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">build-triplet</span> i j)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">let</span></span> ((<span class=\"hljs-name\">k</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> s i j)))\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">and</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">&#x3C;</span></span> j k) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">&#x3C;=</span></span> k n))\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> i j k)\n        <span class=\"hljs-number\">0</span>\n      )\n    )\n  )\n  (<span class=\"hljs-name\">flatmap</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (i)\n    (<span class=\"hljs-name\">filter</span> pair? (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">map</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (j)\n        (<span class=\"hljs-name\">build-triplet</span> i j)\n    ) (<span class=\"hljs-name\">enumerate-interval</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> i <span class=\"hljs-number\">1</span>) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> n <span class=\"hljs-number\">1</span>)))))\n    (<span class=\"hljs-name\">enumerate-interval</span> <span class=\"hljs-number\">1</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> n <span class=\"hljs-number\">2</span>))\n  ))\n(<span class=\"hljs-name\">triplets</span> <span class=\"hljs-number\">4</span> <span class=\"hljs-number\">6</span>)</code></pre>\n<h2>Exercise 2.42</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> empty-board (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span>)) <span class=\"hljs-comment\">; or nil</span>\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">adjoin-position</span> new-row k rest-of-queens)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> new-row rest-of-queens)\n)\n<span class=\"hljs-comment\">; Check that predicate p(i, elem) is true at least for one of elements of list</span>\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">any</span> p l)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">iter</span> l i)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">null?</span></span> l) <span class=\"hljs-literal\">#f</span>\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\">p</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> l) i)\n        <span class=\"hljs-literal\">#t</span>\n        (<span class=\"hljs-name\">iter</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> l) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> i <span class=\"hljs-number\">1</span>))\n      )\n    )\n  )\n  (<span class=\"hljs-name\">iter</span> l <span class=\"hljs-number\">1</span>)\n)\n(<span class=\"hljs-name\">any</span> = (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">1</span>))\n(<span class=\"hljs-name\">any</span> = (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">4</span>))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">safe?</span> k positions)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">let</span></span> (\n    (<span class=\"hljs-name\">row</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> positions))\n    (<span class=\"hljs-name\">d1</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> positions) <span class=\"hljs-number\">1</span>))\n    (<span class=\"hljs-name\">d2</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> positions) <span class=\"hljs-number\">1</span>))\n  )\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">not</span></span> (<span class=\"hljs-name\">any</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (q i)\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">or</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> q row)\n            (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> d1 (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> q i <span class=\"hljs-number\">1</span>)) <span class=\"hljs-comment\">; i should be increased by 1 because we are in cdr of board</span>\n            (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> d2 (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> q i <span class=\"hljs-number\">1</span>))\n        )\n    ) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> positions)))\n  )\n)\n(<span class=\"hljs-name\">safe?</span> <span class=\"hljs-number\">0</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span>))\n(<span class=\"hljs-name\">safe?</span> <span class=\"hljs-number\">0</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">1</span>))\n(<span class=\"hljs-name\">safe?</span> <span class=\"hljs-number\">0</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">4</span> <span class=\"hljs-number\">2</span>))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">queens</span> board-size)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">queen-cols</span> k)  \n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> k <span class=\"hljs-number\">0</span>)\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> empty-board)\n        (<span class=\"hljs-name\">filter</span>\n         (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (positions) (<span class=\"hljs-name\">safe?</span> k positions))\n         (<span class=\"hljs-name\">flatmap</span>\n          (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (rest-of-queens)\n            (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">map</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (new-row)\n                   (<span class=\"hljs-name\">adjoin-position</span> new-row k rest-of-queens))\n                 (<span class=\"hljs-name\">enumerate-interval</span> <span class=\"hljs-number\">1</span> board-size)))\n          (<span class=\"hljs-name\">queen-cols</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> k <span class=\"hljs-number\">1</span>))))))\n  (<span class=\"hljs-name\">trace</span> queen-cols)\n  (<span class=\"hljs-name\">queen-cols</span> board-size))\n(<span class=\"hljs-name\">queens</span> <span class=\"hljs-number\">6</span>)\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">display-board</span> positions size)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">display-empty</span> n)\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">></span></span> n <span class=\"hljs-number\">0</span>) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">begin</span></span>\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">display</span></span> <span class=\"hljs-string\">\" .\"</span>)\n        (<span class=\"hljs-name\">display-empty</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> n <span class=\"hljs-number\">1</span>))\n      ))\n    )\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">display-row</span> q)\n        (<span class=\"hljs-name\">display-empty</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> q <span class=\"hljs-number\">1</span>))\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">display</span></span> <span class=\"hljs-string\">\" Q\"</span>)\n        (<span class=\"hljs-name\">display-empty</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> size q))\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">newline</span></span>)\n    )\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">for-each</span></span> display-row positions)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">newline</span></span>)\n)\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">test-queens</span> size)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">for-each</span></span>\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (b) (<span class=\"hljs-name\">display-board</span> b size))\n      (<span class=\"hljs-name\">queens</span> size)\n    )\n)\n(<span class=\"hljs-name\">test-queens</span> <span class=\"hljs-number\">6</span>)\n\n<span class=\"hljs-comment\">; Beautiful:</span>\n<span class=\"hljs-comment\">; . . . . Q .</span>\n<span class=\"hljs-comment\">; . . Q . . .</span>\n<span class=\"hljs-comment\">; Q . . . . .</span>\n<span class=\"hljs-comment\">; . . . . . Q</span>\n<span class=\"hljs-comment\">; . . . Q . .</span>\n<span class=\"hljs-comment\">; . Q . . . .</span>\n<span class=\"hljs-comment\">;</span>\n<span class=\"hljs-comment\">; . . . Q . .</span>\n<span class=\"hljs-comment\">; Q . . . . .</span>\n<span class=\"hljs-comment\">; . . . . Q .</span>\n<span class=\"hljs-comment\">; . Q . . . .</span>\n<span class=\"hljs-comment\">; . . . . . Q</span>\n<span class=\"hljs-comment\">; . . Q . . .</span>\n<span class=\"hljs-comment\">;</span>\n<span class=\"hljs-comment\">; . . Q . . .</span>\n<span class=\"hljs-comment\">; . . . . . Q</span>\n<span class=\"hljs-comment\">; . Q . . . .</span>\n<span class=\"hljs-comment\">; . . . . Q .</span>\n<span class=\"hljs-comment\">; Q . . . . .</span>\n<span class=\"hljs-comment\">; . . . Q . .</span>\n<span class=\"hljs-comment\">;</span>\n<span class=\"hljs-comment\">; . Q . . . .</span>\n<span class=\"hljs-comment\">; . . . Q . .</span>\n<span class=\"hljs-comment\">; . . . . . Q</span>\n<span class=\"hljs-comment\">; Q . . . . .</span>\n<span class=\"hljs-comment\">; . . Q . . .</span>\n<span class=\"hljs-comment\">; . . . . Q .</span></code></pre>\n<h2>Exercise 2.43</h2>\n<p>For size 0 basically running time is the same.</p>\n<p>For size 1, we call <code>(quen-cols 0)</code> once, check position 1 and return, same for Louis.</p>\n<p>For size 2, we call <code>(queen-cols 1)</code> once, check positions for next queen 1 and 2, and return. Louis calls (queen-cols 1) twice, because that is inside loop.</p>\n<p>For size 3, we call <code>(queen-cols 2)</code> once, check positions 1, 2 and 3, and return. Louis calls <code>(queens-cols 2)</code> 3 times, each of which calls <code>(queens-cols 1)</code> 2 times.</p>\n<p>So for us queens-cols is called <code>size</code> times, and for Louis <code>(factorial size)</code>. If our eight queens runs for time T, then his program will run 8!/8 T = 7! T = 5040T.</p>"},{"id":"sicp2.2.2","title":"SICP 2.2.2 Hierarchical structures","date":"2020-07-19","tags":["SICP"],"excerpt":"<p>AKA trees. Here I learned to debug Scheme a little bit, because I wrote code that not just worked from the first try.</p>\n<p>Also here some trivial exercises are skipped, because one with drawing I done on paper and won't upload it here because it is useless, and another is \"What would interpreter print\", which I guessed, tested with interpreter and it was right. If you want to have solution - ask your interpreter.</p>","content":"<p>AKA trees. Here I learned to debug Scheme a little bit, because I wrote code that not just worked from the first try.</p>\n<p>Also here some trivial exercises are skipped, because one with drawing I done on paper and won't upload it here because it is useless, and another is \"What would interpreter print\", which I guessed, tested with interpreter and it was right. If you want to have solution - ask your interpreter.</p>\n<h2>Exercise 2.25</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> l (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">3</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">5</span> <span class=\"hljs-number\">7</span>) <span class=\"hljs-number\">9</span>))\nl\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> l)))))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> l (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">7</span>)))\nl\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> l))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> l (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">1</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">2</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">3</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">4</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">5</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">6</span> <span class=\"hljs-number\">7</span>)))))))\nl\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> l))))))))))))</code></pre>\n<h2>Exercise 2.27</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> x (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span>) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">4</span>)))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">reverse</span></span> x)\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">deep-reverse</span> l)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">rev-el</span> el)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">pair?</span></span> el)\n      (<span class=\"hljs-name\">deep-reverse</span> el)\n      el\n    )\n  )\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">iter</span> src dst)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">null?</span></span> src)\n      dst\n      (<span class=\"hljs-name\">iter</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> src) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> (<span class=\"hljs-name\">rev-el</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> src)) dst))\n    )\n  )\n  (<span class=\"hljs-name\">iter</span> l nil)\n)</code></pre>\n<h2>Exercise 2.28</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">fringe</span> t)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">iter</span> src dst)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cond</span></span>\n      ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">null?</span></span> src) dst)\n      ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">pair?</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> src)) (<span class=\"hljs-name\">iter</span>\n         (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> src)\n         (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">append</span></span> (<span class=\"hljs-name\">iter</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> src) nil) dst)\n      ))\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">else</span></span> (<span class=\"hljs-name\">iter</span>\n          (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> src)\n          (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> src) dst)\n      ))\n    )\n  )\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">reverse</span></span> (<span class=\"hljs-name\">iter</span> t nil))\n)</code></pre>\n<h2>Exercise 2.29</h2>\n<p>Constructors and selectors:</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">make-mobile</span> left right)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> left right))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">left-branch</span> mobile)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> mobile))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">right-branch</span> mobile)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> mobile)))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">make-branch</span> length structure)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> length structure))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">branch-length</span> branch)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> branch))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">branch-structure</span> branch)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> branch)))</code></pre>\n<p>Test data:</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> m1 \n  (<span class=\"hljs-name\">make-mobile</span> \n    (<span class=\"hljs-name\">make-branch</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">10</span>)\n    (<span class=\"hljs-name\">make-branch</span> <span class=\"hljs-number\">1</span> \n        (<span class=\"hljs-name\">make-mobile</span> \n            (<span class=\"hljs-name\">make-branch</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">5</span>)\n            (<span class=\"hljs-name\">make-branch</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">5</span>)\n        )\n    )\n  )\n)\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> m2 \n    (<span class=\"hljs-name\">make-mobile</span>\n        (<span class=\"hljs-name\">make-branch</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">10</span>)\n        (<span class=\"hljs-name\">make-branch</span> <span class=\"hljs-number\">1</span> m1)\n    )\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> m3\n    (<span class=\"hljs-name\">make-mobile</span>\n        (<span class=\"hljs-name\">make-branch</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">10</span>)\n        (<span class=\"hljs-name\">make-branch</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">10</span>)\n    )\n)</code></pre>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">total-weight</span> mobile) \n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">pair?</span></span> mobile)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span>\n      (<span class=\"hljs-name\">total-weight</span> (<span class=\"hljs-name\">branch-structure</span> (<span class=\"hljs-name\">left-branch</span> mobile)))\n      (<span class=\"hljs-name\">total-weight</span> (<span class=\"hljs-name\">branch-structure</span> (<span class=\"hljs-name\">right-branch</span> mobile)))\n    )\n    mobile <span class=\"hljs-comment\">; if not pair - it should be just weight</span>\n  )\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">balanced</span> mobile)\n  <span class=\"hljs-comment\">; weight-b returns weight of mobile if it is balanced, otherwise - negative value</span>\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">weight-b</span> mobile)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">pair?</span></span> mobile)\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">let</span></span> ((<span class=\"hljs-name\">lb</span> (<span class=\"hljs-name\">weight-b</span> (<span class=\"hljs-name\">branch-structure</span> (<span class=\"hljs-name\">left-branch</span> mobile))))) <span class=\"hljs-comment\">; compute left balance</span>\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">&#x3C;</span></span> lb <span class=\"hljs-number\">0</span>)\n          <span class=\"hljs-number\">-1</span> <span class=\"hljs-comment\">; left submobile is not balanced, so this mobile too</span>\n          (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">let</span></span> ((<span class=\"hljs-name\">rb</span> (<span class=\"hljs-name\">weight-b</span> (<span class=\"hljs-name\">branch-structure</span> (<span class=\"hljs-name\">right-branch</span> mobile))))) <span class=\"hljs-comment\">; compute right balance</span>\n            (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">&#x3C;</span></span> rb <span class=\"hljs-number\">0</span>)\n              <span class=\"hljs-number\">-1</span> <span class=\"hljs-comment\">; right submobile is not balanced, so this mobile too</span>\n              (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span>\n                (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> lb (<span class=\"hljs-name\">branch-length</span> (<span class=\"hljs-name\">left-branch</span> mobile)))\n                (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> rb (<span class=\"hljs-name\">branch-length</span> (<span class=\"hljs-name\">right-branch</span> mobile)))\n              )\n                (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> lb rb) <span class=\"hljs-comment\">; finally, balanced case</span>\n                <span class=\"hljs-number\">-1</span> <span class=\"hljs-comment\">; submobiles are balanced, but apply different torques in this</span>\n              )\n            )\n          )\n        )\n      )\n      mobile <span class=\"hljs-comment\">; single weight is already balanced by itself</span>\n    )\n  )\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">></span></span> (<span class=\"hljs-name\">weight-b</span> mobile) <span class=\"hljs-number\">0</span>)\n)\n(<span class=\"hljs-name\">balanced</span> m1)\n(<span class=\"hljs-name\">balanced</span> m2)\n(<span class=\"hljs-name\">balanced</span> m3)</code></pre>\n<p>With <code>balanced</code> I was stuck, too many levels of nesting. As usual, I <a href=\"https://stackoverflow.com/questions/62962576/how-to-find-where-scheme-calls-integer-less\">asked on StackOverflow</a>, went to sleep and in the morning found bug, then someone answered my very obvious question.</p>\n<p>Part d. If we have such constructors:</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">make-mobile</span> left right)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> left right))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">make-branch</span> length structure)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> length structure))</code></pre>\n<p>We only have to change such selectors:</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">right-branch</span> mobile)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> mobile))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">branch-structure</span> branch)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> branch))</code></pre>\n<p>Layers of abstraction are useful (sometimes).</p>\n<h2>Exercise 2.30</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">square-tree</span> t) \n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cond</span></span> \n    ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">null?</span></span> t) nil)\n    ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">pair?</span></span> t) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> (<span class=\"hljs-name\">square-tree</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> t)) (<span class=\"hljs-name\">square-tree</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> t))))\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">else</span></span> (<span class=\"hljs-name\">sqr</span> t))\n  )\n)\n\n(<span class=\"hljs-name\">square-tree</span>\n (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">1</span>\n       (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">2</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">4</span>) <span class=\"hljs-number\">5</span>)\n       (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">6</span> <span class=\"hljs-number\">7</span>)))</code></pre>\n<p>Version with map:</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">square-tree</span> t) \n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">pair?</span></span> t)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">map</span></span> square-tree t)\n    (<span class=\"hljs-name\">sqr</span> t)\n  )\n)</code></pre>\n<h2>Exercise 2.31</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">tree-map</span> f t) \n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">pair?</span></span> t)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">map</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (t) (<span class=\"hljs-name\">tree-map</span> f t)) t)\n    (<span class=\"hljs-name\">f</span> t)\n  )\n)\n\n(<span class=\"hljs-name\">tree-map</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (x) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> x <span class=\"hljs-number\">1</span>))\n (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">1</span>\n       (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">2</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">4</span>) <span class=\"hljs-number\">5</span>)\n       (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">6</span> <span class=\"hljs-number\">7</span>)))</code></pre>\n<h2>Exercise 2.32</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">subsets</span> s)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">null?</span></span> s)\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> nil)\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">let</span></span> ((<span class=\"hljs-name\">rest</span> (<span class=\"hljs-name\">subsets</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> s))))\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">append</span></span>\n          rest\n          (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">map</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (ss) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> s) ss)) rest)\n        ))))</code></pre>\n<p>Emtpy set has only one subset - empty. Otherwise each element in the set doubles number of elements in the set of subsets - it creates subsets that are just like subsets without that element, except that they include it.</p>"},{"id":"sicp2.2.1","title":"SICP 2.2.1 Sequences","date":"2020-07-16","tags":["SICP"],"excerpt":"<p>Finally, the thing Lisp was named after.</p>\n<p>Fix MIT Scheme to be like SICP scheme using this:</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> nil '())</code></pre>","content":"<p>Finally, the thing Lisp was named after.</p>\n<p>Fix MIT Scheme to be like SICP scheme using this:</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> nil '())</code></pre>\n<h2>Exercise 2.17</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">last-pair</span> l)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">null?</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> l))\n    l\n    (<span class=\"hljs-name\">last-pair</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> l))\n  )\n)\n(<span class=\"hljs-name\">last-pair</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">23</span> <span class=\"hljs-number\">72</span> <span class=\"hljs-number\">149</span> <span class=\"hljs-number\">34</span>))</code></pre>\n<h2>Exercise 2.18</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">reverse</span></span> l)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">iter</span> src dst)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">null?</span></span> src)\n      dst\n      (<span class=\"hljs-name\">iter</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> src) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> src) dst))\n    )\n  )\n  (<span class=\"hljs-name\">iter</span> l nil)\n)\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">reverse</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">4</span>))</code></pre>\n<h2>Exercise 2.19</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> us-coins (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">50</span> <span class=\"hljs-number\">25</span> <span class=\"hljs-number\">10</span> <span class=\"hljs-number\">5</span> <span class=\"hljs-number\">1</span>))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> uk-coins (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">100</span> <span class=\"hljs-number\">50</span> <span class=\"hljs-number\">20</span> <span class=\"hljs-number\">10</span> <span class=\"hljs-number\">5</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">0.5</span>))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">cc</span> amount coin-values)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cond</span></span> ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> amount <span class=\"hljs-number\">0</span>) <span class=\"hljs-number\">1</span>)\n        ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">or</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">&#x3C;</span></span> amount <span class=\"hljs-number\">0</span>) (<span class=\"hljs-name\">no-more?</span> coin-values)) <span class=\"hljs-number\">0</span>)\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">else</span></span>\n         (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> (<span class=\"hljs-name\">cc</span> amount\n                (<span class=\"hljs-name\">except-first-denomination</span> coin-values))\n            (<span class=\"hljs-name\">cc</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> amount\n                   (<span class=\"hljs-name\">first-denomination</span> coin-values))\n                coin-values)))))</code></pre>\n<p>Answer:</p>\n<pre><code class=\"hljs language-scheme\">  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> no-more? null?)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> except-first-denomination cdr)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> first-denomination car)</code></pre>\n<p>Order does not matter, because we just sum amount without each element, and with.</p>\n<h2>Exercise 2.20</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">same-parity</span> n . l)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">matches</span> x) \n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">remainder</span></span> n <span class=\"hljs-number\">2</span>) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">remainder</span></span> x <span class=\"hljs-number\">2</span>))\n  )\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">iter</span> l) \n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">null?</span></span> l)\n      nil\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\">matches</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> l))\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> l) (<span class=\"hljs-name\">iter</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> l)))\n        (<span class=\"hljs-name\">iter</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> l))\n      )\n    )\n  )\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> n (<span class=\"hljs-name\">iter</span> l))\n)</code></pre>\n<h2>Exercise 2.21</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">sqr</span> x) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> x x))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">square-list</span> items)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">null?</span></span> items)\n      nil\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> (<span class=\"hljs-name\">sqr</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> items)) (<span class=\"hljs-name\">square-list</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> items)))))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">square-list</span> items)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">map</span></span> sqr items))</code></pre>\n<h2>Exercise 2.22</h2>\n<p>What is <code>cons</code>-ed into list first will be at the end of list.</p>\n<p>If we swap arguments to cons, then we will have the same hierarchy (what was consed first is at deepest pair), just link to the next pair is first element of pair, and value is second. To work with such structure properly, we will have to swap  car and cdr.</p>\n<h2>Exercise 2.23</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">for-each</span></span> f items)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">null?</span></span> items)\n    <span class=\"hljs-number\">0</span>\n    ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> () <span class=\"hljs-comment\">; Need some proper way to write blocks of code in if</span>\n      (<span class=\"hljs-name\">f</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> items))\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">for-each</span></span> f (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> items))\n    ))\n  )\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">for-each</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (x) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">newline</span></span>) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">display</span></span> x))\n          (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">57</span> <span class=\"hljs-number\">321</span> <span class=\"hljs-number\">88</span>))</code></pre>"},{"id":"sicp2.1.4","title":"SICP 2.1.4: Interval arithmetic","date":"2020-07-15","tags":["SICP"],"excerpt":"<p>Less mind-blowing ideas, more practice.</p>","content":"<p>Less mind-blowing ideas, more practice.</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">add-interval</span> x y)\n  (<span class=\"hljs-name\">make-interval</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> (<span class=\"hljs-name\">lower-bound</span> x) (<span class=\"hljs-name\">lower-bound</span> y))\n                 (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> (<span class=\"hljs-name\">upper-bound</span> x) (<span class=\"hljs-name\">upper-bound</span> y))))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">mul-interval</span> x y)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">let</span></span> ((<span class=\"hljs-name\">p1</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> (<span class=\"hljs-name\">lower-bound</span> x) (<span class=\"hljs-name\">lower-bound</span> y)))\n        (<span class=\"hljs-name\">p2</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> (<span class=\"hljs-name\">lower-bound</span> x) (<span class=\"hljs-name\">upper-bound</span> y)))\n        (<span class=\"hljs-name\">p3</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> (<span class=\"hljs-name\">upper-bound</span> x) (<span class=\"hljs-name\">lower-bound</span> y)))\n        (<span class=\"hljs-name\">p4</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> (<span class=\"hljs-name\">upper-bound</span> x) (<span class=\"hljs-name\">upper-bound</span> y))))\n    (<span class=\"hljs-name\">make-interval</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">min</span></span> p1 p2 p3 p4)\n                   (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">max</span></span> p1 p2 p3 p4))))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">div-interval</span> x y)\n  (<span class=\"hljs-name\">mul-interval</span> x \n                (<span class=\"hljs-name\">make-interval</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> <span class=\"hljs-number\">1.0</span> (<span class=\"hljs-name\">upper-bound</span> y))\n                               (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> <span class=\"hljs-number\">1.0</span> (<span class=\"hljs-name\">lower-bound</span> y)))))</code></pre>\n<h2>Exercise 2.7</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">make-interval</span> a b) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> a b))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">lower-bound</span> i)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">min</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> i) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> i)))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">upper-bound</span> i)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">max</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> i) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> i)))</code></pre>\n<h2>Exercise 2.8</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">sub-interval</span> x y)\n  (<span class=\"hljs-name\">make-interval</span> \n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> (<span class=\"hljs-name\">lower-bound</span> x) (<span class=\"hljs-name\">upper-bound</span> y))\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> (<span class=\"hljs-name\">upper-bound</span> x) (<span class=\"hljs-name\">lower-bound</span> y))))</code></pre>\n<h2>Exercise 2.9</h2>\n<p>Let's have interval (a1,b1) of width w1 = b1 - a1. And similar interval (a2,b2) of width w2 = b2 - a2.</p>\n<p>(a1,b1) + (a2,b2) = (a1 + a2, b1+b2)\nwidth of this interval is (b1+b2) - (a1+a2) = (b1 - a1) + (b2-a2) = w1+w2</p>\n<p>(a1,b1) - (a2,b2) = (a1 - b2, b1-a2)</p>\n<p>width of this interval is (b1-a2) - (a1-b2) = b1 - a2 - a1 + b2 = (b1 - a1) + (b2-a2) = w1+w2</p>\n<p>Multiplication counterexample:</p>\n<p>Let's multiply two intervals of width 1:\n(1,2) * (1,2) = (1, 3)\nGives interval of width 3.</p>\n<p>Let's multiply another two intervals of width 1:\n(1,2) * (2,3) = (2, 6)</p>\n<p>Gives interval of width 6. Width of multiplication could not be just function of width of arguments, because it's gives different results for the same inputs. It must be function of something else.</p>\n<h2>Exercise 2.10</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">spans-zero</span> i)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">and</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">&#x3C;=</span></span> (<span class=\"hljs-name\">lower-bound</span> i) <span class=\"hljs-number\">0</span>) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">>=</span></span> (<span class=\"hljs-name\">upper-bound</span> i) <span class=\"hljs-number\">0</span>))\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">div-interval</span> x y)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\">spans-zero</span> y)\n    (<span class=\"hljs-name\">error</span> <span class=\"hljs-string\">\"Could not divide by interval that spans zero\"</span>)\n    (<span class=\"hljs-name\">mul-interval</span> x \n                (<span class=\"hljs-name\">make-interval</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> <span class=\"hljs-number\">1.0</span> (<span class=\"hljs-name\">upper-bound</span> y))\n                               (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> <span class=\"hljs-number\">1.0</span> (<span class=\"hljs-name\">lower-bound</span> y))))\n  )\n)</code></pre>\n<h2>Exercise 2.11</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">random-interval</span>) \n  (<span class=\"hljs-name\">make-interval</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> (<span class=\"hljs-name\">random</span> <span class=\"hljs-number\">11</span>) <span class=\"hljs-number\">5</span>) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> (<span class=\"hljs-name\">random</span> <span class=\"hljs-number\">11</span>) <span class=\"hljs-number\">5</span>))\n)\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">eq-interval</span> a b)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">and</span></span>\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> (<span class=\"hljs-name\">lower-bound</span> a) (<span class=\"hljs-name\">lower-bound</span> b))\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> (<span class=\"hljs-name\">upper-bound</span> a) (<span class=\"hljs-name\">upper-bound</span> b))\n  )\n)\n\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">test-mul-interval</span>) \n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">bad-pair</span> i1 i2) \n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">display</span></span> <span class=\"hljs-string\">\"Mul-iterval result differs for \"</span>)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">display</span></span> i1)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">display</span></span> i2)\n    <span class=\"hljs-literal\">#f</span>\n  )\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">try</span> n)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> n <span class=\"hljs-number\">0</span>) <span class=\"hljs-literal\">#t</span>\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">let</span></span> (\n            (<span class=\"hljs-name\">i1</span> (<span class=\"hljs-name\">random-interval</span>))\n            (<span class=\"hljs-name\">i2</span> (<span class=\"hljs-name\">random-interval</span>))\n        )\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\">eq-interval</span> (<span class=\"hljs-name\">mul-interval2</span> i1 i2) (<span class=\"hljs-name\">mul-interval</span> i1 i2))\n          (<span class=\"hljs-name\">try</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> n <span class=\"hljs-number\">1</span>)) \n          (<span class=\"hljs-name\">bad-pair</span> i1 i2)\n        )\n      )\n    )\n  )\n  (<span class=\"hljs-name\">try</span> <span class=\"hljs-number\">100</span>)\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">mul-interval2</span> x y)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">let</span></span> (\n    (<span class=\"hljs-name\">lx</span> (<span class=\"hljs-name\">lower-bound</span> x))\n    (<span class=\"hljs-name\">ux</span> (<span class=\"hljs-name\">upper-bound</span> x))\n    (<span class=\"hljs-name\">ly</span> (<span class=\"hljs-name\">lower-bound</span> y))\n    (<span class=\"hljs-name\">uy</span> (<span class=\"hljs-name\">upper-bound</span> y))\n  )\n\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cond</span></span> \n    ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">and</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">&#x3C;</span></span> ux <span class=\"hljs-number\">0</span>) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">&#x3C;</span></span> uy <span class=\"hljs-number\">0</span>))\n     (<span class=\"hljs-name\">make-interval</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> ux uy) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> lx ly)))\n\n    ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">and</span></span> (<span class=\"hljs-name\">spans-zero</span> x) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">&#x3C;</span></span> uy <span class=\"hljs-number\">0</span>))\n     (<span class=\"hljs-name\">make-interval</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> ux ly) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> lx ly)))\n\n    ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">and</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">></span></span> lx <span class=\"hljs-number\">0</span>) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">&#x3C;</span></span> uy <span class=\"hljs-number\">0</span>))\n     (<span class=\"hljs-name\">make-interval</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> ux ly) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> lx uy)))\n\n    ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">and</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">&#x3C;</span></span> ux <span class=\"hljs-number\">0</span>) (<span class=\"hljs-name\">spans-zero</span> y))\n     (<span class=\"hljs-name\">make-interval</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> lx uy) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> lx ly)))\n\n    ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">and</span></span> (<span class=\"hljs-name\">spans-zero</span> x) (<span class=\"hljs-name\">spans-zero</span> y))\n     (<span class=\"hljs-name\">make-interval</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">min</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> ux ly) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> lx uy)) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">max</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> lx ly) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> ux uy))))\n\n    ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">and</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">></span></span> lx <span class=\"hljs-number\">0</span>) (<span class=\"hljs-name\">spans-zero</span> y))\n     (<span class=\"hljs-name\">make-interval</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> ux ly) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> ux uy)))\n\n    ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">and</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">&#x3C;</span></span> ux <span class=\"hljs-number\">0</span>) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">></span></span> ly <span class=\"hljs-number\">0</span>))\n     (<span class=\"hljs-name\">make-interval</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> lx uy) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> ux ly)))\n\n    ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">and</span></span> (<span class=\"hljs-name\">spans-zero</span> x) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">></span></span> ly <span class=\"hljs-number\">0</span>))\n     (<span class=\"hljs-name\">make-interval</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> lx uy) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> ux uy)))\n\n    ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">and</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">></span></span> lx <span class=\"hljs-number\">0</span>) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">></span></span> ly <span class=\"hljs-number\">0</span>))\n     (<span class=\"hljs-name\">make-interval</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> lx ly) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> ux uy)))\n\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">else</span></span> (<span class=\"hljs-name\">error</span> <span class=\"hljs-string\">\"impossible case\"</span>))\n  ))\n)</code></pre>\n<p>Wow this took a lot of effort. Good that they teached to use let, without it secod version of mul-interval would be huge.</p>\n<p>And this required lots of attention, but somehow my code passed the test from the first try.</p>\n<h2>Exercise 2.12</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">make-center-width</span> c w)\n  (<span class=\"hljs-name\">make-interval</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> c w) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> c w)))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">center</span> i)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> (<span class=\"hljs-name\">lower-bound</span> i) (<span class=\"hljs-name\">upper-bound</span> i)) <span class=\"hljs-number\">2</span>))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">width</span> i)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> (<span class=\"hljs-name\">upper-bound</span> i) (<span class=\"hljs-name\">lower-bound</span> i)) <span class=\"hljs-number\">2</span>))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">make-center-percent</span> c p)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">let</span></span> ((<span class=\"hljs-name\">w</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> p <span class=\"hljs-number\">0.01</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">abs</span></span> c))))\n  (<span class=\"hljs-name\">make-interval</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> c w) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> c w))))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">percent</span> i)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> <span class=\"hljs-number\">100</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> (<span class=\"hljs-name\">width</span> i) (<span class=\"hljs-name\">center</span> i)))\n)</code></pre>\n<h2>Exercise 2.13</h2>\n<p>It's approximately addition.</p>\n<h2>Exercise 2.14</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">par1</span> r1 r2)\n  (<span class=\"hljs-name\">div-interval</span> (<span class=\"hljs-name\">mul-interval</span> r1 r2)\n                (<span class=\"hljs-name\">add-interval</span> r1 r2)))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">par2</span> r1 r2)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">let</span></span> ((<span class=\"hljs-name\">one</span> (<span class=\"hljs-name\">make-interval</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">1</span>))) \n    (<span class=\"hljs-name\">div-interval</span> one\n                  (<span class=\"hljs-name\">add-interval</span> (<span class=\"hljs-name\">div-interval</span> one r1)\n                                (<span class=\"hljs-name\">div-interval</span> one r2)))))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> a (<span class=\"hljs-name\">make-center-percent</span> <span class=\"hljs-number\">100</span> <span class=\"hljs-number\">1</span>))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> b (<span class=\"hljs-name\">make-center-percent</span> <span class=\"hljs-number\">200</span> <span class=\"hljs-number\">1</span>))\n\n\n(<span class=\"hljs-name\">center</span> (<span class=\"hljs-name\">par1</span> a b))\n(<span class=\"hljs-name\">center</span> (<span class=\"hljs-name\">par2</span> a b))\n\n(<span class=\"hljs-name\">percent</span> (<span class=\"hljs-name\">par1</span> a b))\n(<span class=\"hljs-name\">percent</span> (<span class=\"hljs-name\">par2</span> a b))</code></pre>\n<h2>Exercise 2.15</h2>\n<p>Every operation on intervals with non zero width increases width of result.</p>\n<p>In par1 program does 3 operations in which both intervals have non zero widht, and par2 program does only addition, all the rest are operations with interval of zero widht.</p>\n<h2>Exercise 2.16</h2>\n<p>No I can not, because as they said, this problem is very difficult. I imagine it will require simplification of expression to some base form, before computing it.</p>"},{"id":"sicp2.1.3","title":"SICP 2.1.3 Meaning of data","date":"2020-07-10","tags":["SICP"],"excerpt":"<p>This section blows your mind by showing that data could be represented by functions. That's kid of obvious that array or assotiative array could be replaced by function that returns value by index, but here you replace with functions even the most basic data type - integer. Not for practical reasons, but I guess to achieve satory about lambda calculus.</p>","content":"<p>This section blows your mind by showing that data could be represented by functions. That's kid of obvious that array or assotiative array could be replaced by function that returns value by index, but here you replace with functions even the most basic data type - integer. Not for practical reasons, but I guess to achieve satory about lambda calculus.</p>\n<h2>Exercise 2.4</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> x y)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (m) (<span class=\"hljs-name\">m</span> x y)))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> z)\n  (<span class=\"hljs-name\">z</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (p q) p)))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> z)\n  (<span class=\"hljs-name\">z</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (p q) q)))</code></pre>\n<h2>Exercise 2.5</h2>\n<pre><code class=\"hljs language-scheme\"><span class=\"hljs-comment\">; Recursive process and linear time, could be done better</span>\n<span class=\"hljs-comment\">; but I'm to lazy to copy from previous exercises</span>\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">pow</span> x n) \n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> n <span class=\"hljs-number\">0</span>) <span class=\"hljs-number\">1</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> x (<span class=\"hljs-name\">pow</span> x (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> n <span class=\"hljs-number\">1</span>))))\n)\n\n<span class=\"hljs-comment\">; iterative linear, not sure if could be made better</span>\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">count-divisor</span> x d)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">iter</span> x count)\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">></span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">remainder</span></span> x d) <span class=\"hljs-number\">0</span>)\n        count\n        (<span class=\"hljs-name\">iter</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> x d) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> count <span class=\"hljs-number\">1</span>))\n      )\n  )\n  (<span class=\"hljs-name\">iter</span> x <span class=\"hljs-number\">0</span>)\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> x y)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> (<span class=\"hljs-name\">pow</span> <span class=\"hljs-number\">2</span> x) (<span class=\"hljs-name\">pow</span> <span class=\"hljs-number\">3</span> y))\n) \n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> z)\n  (<span class=\"hljs-name\">count-divisor</span> z <span class=\"hljs-number\">2</span>)\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> z)\n  (<span class=\"hljs-name\">count-divisor</span> z <span class=\"hljs-number\">3</span>)\n)</code></pre>\n<h2>Exercise 2.6</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> zero (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (f) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (x) x)))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">inc</span> n) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (f) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (x) (<span class=\"hljs-name\">f</span> ((<span class=\"hljs-name\">n</span> f) x)))))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> one (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (f) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (x) (<span class=\"hljs-name\">f</span> x))))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> two (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (f) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (x) (<span class=\"hljs-name\">f</span> (<span class=\"hljs-name\">f</span> x)))))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">plus</span> a b)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (f) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (x) ((<span class=\"hljs-name\">a</span> f) ((<span class=\"hljs-name\">b</span> f) x))))\n)\n\n<span class=\"hljs-comment\">; To debug if I placed parentheses correctly :)</span>\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">church-to-int</span> n)\n  ((<span class=\"hljs-name\">n</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (x) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> x <span class=\"hljs-number\">1</span>))) <span class=\"hljs-number\">0</span>)\n)\n\n(<span class=\"hljs-name\">church-to-int</span> (<span class=\"hljs-name\">plus</span> one two))\n<span class=\"hljs-comment\">;Value: 3</span></code></pre>\n<p>There is also nice video from Computerphile that explains how to build Boolean algebra from lambda calculus:\n{{&#x3C; youtube eis11j_iGMs >}}</p>"},{"id":"sicp2.1.2","title":"SICP 2.1.2 Abstraction barriers","date":"2020-07-08","tags":["SICP"],"excerpt":"<p>In this section I'm starting to have strong need for types.</p>\n<p>Code in exercises becomes more verbose.</p>","content":"<p>In this section I'm starting to have strong need for types.</p>\n<p>Code in exercises becomes more verbose.</p>\n<h2>Exercise 2.2</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> make-segment cons)\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> start-segment car)\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> end-segment cdr)\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> make-point cons)\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> x-point car)\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> y-point cdr)\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">mid-segment</span> segment)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">let</span></span> (\n    (<span class=\"hljs-name\">s</span> (<span class=\"hljs-name\">start-segment</span> segment))\n    (<span class=\"hljs-name\">e</span> (<span class=\"hljs-name\">end-segment</span> segment))\n  )\n\n  (<span class=\"hljs-name\">make-point</span>\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> (<span class=\"hljs-name\">x-point</span> s) (<span class=\"hljs-name\">x-point</span> e)) <span class=\"hljs-number\">2</span>)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> (<span class=\"hljs-name\">y-point</span> s) (<span class=\"hljs-name\">y-point</span> e)) <span class=\"hljs-number\">2</span>)\n  ))\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">print-point</span> p)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">newline</span></span>)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">display</span></span> <span class=\"hljs-string\">\"(\"</span>)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">display</span></span> (<span class=\"hljs-name\">x-point</span> p))\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">display</span></span> <span class=\"hljs-string\">\",\"</span>)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">display</span></span> (<span class=\"hljs-name\">y-point</span> p))\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">display</span></span> <span class=\"hljs-string\">\")\"</span>))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> a (<span class=\"hljs-name\">make-point</span> <span class=\"hljs-number\">1.0</span> <span class=\"hljs-number\">2.0</span>))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> b (<span class=\"hljs-name\">make-point</span> <span class=\"hljs-number\">3.0</span> <span class=\"hljs-number\">4.0</span>))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> ab (<span class=\"hljs-name\">make-segment</span> a b))\n\n(<span class=\"hljs-name\">print-point</span> (<span class=\"hljs-name\">mid-segment</span> ab))</code></pre>\n<h2>Exercise 2.3</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> make-rect cons)\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">area</span> rect) \n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> (<span class=\"hljs-name\">width-rect</span> rect) (<span class=\"hljs-name\">height-rect</span> rect))\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">perimeter</span> rect) \n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> <span class=\"hljs-number\">2</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> (<span class=\"hljs-name\">width-rect</span> rect) (<span class=\"hljs-name\">height-rect</span> rect)))\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">sqr</span> x) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> x x))\n<span class=\"hljs-comment\">;; Some useful stuff for testing</span>\n\n<span class=\"hljs-comment\">;  d  c</span>\n<span class=\"hljs-comment\">;</span>\n<span class=\"hljs-comment\">;  a  b</span>\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> a (<span class=\"hljs-name\">make-point</span> <span class=\"hljs-number\">0.0</span> <span class=\"hljs-number\">0.0</span>))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> b (<span class=\"hljs-name\">make-point</span> <span class=\"hljs-number\">1.0</span> <span class=\"hljs-number\">0.0</span>))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> c (<span class=\"hljs-name\">make-point</span> <span class=\"hljs-number\">1.0</span> <span class=\"hljs-number\">1.0</span>))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> d (<span class=\"hljs-name\">make-point</span> <span class=\"hljs-number\">0.0</span> <span class=\"hljs-number\">1.0</span>))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> ab (<span class=\"hljs-name\">make-segment</span> a b))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> ad (<span class=\"hljs-name\">make-segment</span> a d))\n\n<span class=\"hljs-comment\">;;; representation 1 - adjacent sides</span>\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> rect (<span class=\"hljs-name\">make-rect</span> ab ad))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">distance</span> point-a point-b)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">sqrt</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span>\n      (<span class=\"hljs-name\">sqr</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> (<span class=\"hljs-name\">x-point</span> point-a) (<span class=\"hljs-name\">x-point</span> point-b)))\n      (<span class=\"hljs-name\">sqr</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> (<span class=\"hljs-name\">y-point</span> point-a) (<span class=\"hljs-name\">y-point</span> point-b)))\n  ))\n)\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">length</span></span> segment)\n  (<span class=\"hljs-name\">distance</span> (<span class=\"hljs-name\">start-segment</span> segment) (<span class=\"hljs-name\">end-segment</span> segment))\n)\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">width-rect</span> rect)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">length</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> rect))\n)\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">height-rect</span> rect)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">length</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> rect))\n)\n\n<span class=\"hljs-comment\">;;; representation 2 - opposite points </span>\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> rect (<span class=\"hljs-name\">make-rect</span> a c))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">width-rect</span> rect)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">abs</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span>\n    (<span class=\"hljs-name\">x-point</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> rect))\n    (<span class=\"hljs-name\">x-point</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> rect))\n  ))\n)\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">height-rect</span> rect)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">abs</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span>\n    (<span class=\"hljs-name\">y-point</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> rect))\n    (<span class=\"hljs-name\">y-point</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> rect))\n  ))\n)</code></pre>"},{"id":"sicp2.1.1","title":"SISP 2.1.1: Rational numbers","date":"2020-07-08","tags":["SICP"],"excerpt":"<h2>Exercise 2.1</h2>\n<p>Here is how you construct rational number:</p>","content":"<h2>Exercise 2.1</h2>\n<p>Here is how you construct rational number:</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">make-rat</span> n d)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">let</span></span> ((<span class=\"hljs-name\">g</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">gcd</span></span> n d))\n       (<span class=\"hljs-name\">sign</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">&#x3C;</span></span> d <span class=\"hljs-number\">0</span>) <span class=\"hljs-number\">-1</span> <span class=\"hljs-number\">1</span>)))\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> n g sign) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> d g sign))))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> numer car)\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> denom cdr)\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">print-rat</span> x)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">newline</span></span>)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">display</span></span> (<span class=\"hljs-name\">numer</span> x))\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">display</span></span> <span class=\"hljs-string\">\"/\"</span>)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">display</span></span> (<span class=\"hljs-name\">denom</span> x)))</code></pre>\n<p>That's it, change sign of both parts when denominator is negative, you could do that by multiplying or dividing by -1.</p>"},{"id":"sicp1.3.4","title":"SICP 1.3.4 Procedures as returned values","date":"2020-07-02","tags":["SICP"],"excerpt":"<p>Today I have learned that John Carmack was also challenged by SICP:</p>\n<blockquote>\n<p>100 pages into Structure and Interpretation of Computer Programs. I'm proud of myself for not skipping the Church Numerals exercise. <a href=\"https://twitter.com/ID_AA_Carmack/status/350028210551013376\">Twitter</a></p>\n</blockquote>\n<p>I still need to get so far.</p>","content":"<p>Today I have learned that John Carmack was also challenged by SICP:</p>\n<blockquote>\n<p>100 pages into Structure and Interpretation of Computer Programs. I'm proud of myself for not skipping the Church Numerals exercise. <a href=\"https://twitter.com/ID_AA_Carmack/status/350028210551013376\">Twitter</a></p>\n</blockquote>\n<p>I still need to get so far.</p>\n<h2>Exercise 1.40</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">cubic</span> a b c) \n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (x) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span>\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> x x x)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> a x x)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> b x)\n    c\n  ))\n)</code></pre>\n<h2>Exercise 1.41</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">inc</span> x) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> x <span class=\"hljs-number\">1</span>))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">double</span> f)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (x) (<span class=\"hljs-name\">f</span> (<span class=\"hljs-name\">f</span> x)))\n)</code></pre>\n<h2>Exercise 1.42</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">sqr</span> x) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> x x))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">compose</span> f g) \n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (x) (<span class=\"hljs-name\">f</span> (<span class=\"hljs-name\">g</span> x)))\n)\n\n((<span class=\"hljs-name\">compose</span> sqr inc) <span class=\"hljs-number\">6</span>)</code></pre>\n<h2>Exercise 1.43</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">repeated</span> f n) \n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> n <span class=\"hljs-number\">1</span>)\n    f\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">even?</span></span> n)\n      (<span class=\"hljs-name\">repeated</span> (<span class=\"hljs-name\">double</span> f) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> n <span class=\"hljs-number\">2</span>))\n      (<span class=\"hljs-name\">compose</span> f (<span class=\"hljs-name\">repeated</span> f (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> n <span class=\"hljs-number\">1</span>)))\n    )\n  )\n)</code></pre>\n<h2>Exercise 1.44</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> dx <span class=\"hljs-number\">0.000001</span>)\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">smooth</span> f)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (x) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span>\n    (<span class=\"hljs-name\">f</span> x)\n    (<span class=\"hljs-name\">f</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> x dx))\n    (<span class=\"hljs-name\">f</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> x dx))\n  ) <span class=\"hljs-number\">3.0</span>))\n)\n\n(<span class=\"hljs-name\">repeated</span> smooth <span class=\"hljs-number\">10</span>)</code></pre>\n<h1>Exercise 1.45</h1>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> tolerance <span class=\"hljs-number\">0.00001</span>)\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">fixed-point</span> f first-guess)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">close-enough?</span> v1 v2)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">&#x3C;</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">abs</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> v1 v2)) tolerance))\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">try</span> guess limit)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">display</span></span> guess) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">newline</span></span>)<span class=\"hljs-comment\">; to debug trace</span>\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">let</span></span> ((<span class=\"hljs-name\">next</span> (<span class=\"hljs-name\">f</span> guess)))\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> limit <span class=\"hljs-number\">0</span>)\n        (<span class=\"hljs-name\">error</span> <span class=\"hljs-string\">\"Reached iteration limit\"</span>)\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\">close-enough?</span> guess next)\n            next\n            (<span class=\"hljs-name\">try</span> next (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> limit <span class=\"hljs-number\">1</span>)))\n      )))\n  (<span class=\"hljs-name\">try</span> first-guess <span class=\"hljs-number\">1000</span>)\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">average-damp</span> f) \n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (y) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> (<span class=\"hljs-name\">f</span> y) y) <span class=\"hljs-number\">2</span>))\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">npow</span> x n)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> n <span class=\"hljs-number\">1</span>) x (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> x (<span class=\"hljs-name\">npow</span> x (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> n <span class=\"hljs-number\">1</span>)) ))\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">n-root</span> x n) \n  (<span class=\"hljs-name\">fixed-point</span>\n    ((<span class=\"hljs-name\">repeated</span> average-damp (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> n <span class=\"hljs-number\">2</span>)) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (y) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> x (<span class=\"hljs-name\">npow</span> y (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> n <span class=\"hljs-number\">1</span>)))))\n    <span class=\"hljs-number\">1</span>\n  )\n)</code></pre>\n<p>I saw on the internet solutions better than n / 2, but I would like to move on.</p>\n<h1>Exercise 1.46</h1>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">iterative-improve</span> good-enough next)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">iter</span> guess) \n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\">good-enough</span> guess)\n      guess\n      (<span class=\"hljs-name\">iter</span> (<span class=\"hljs-name\">next</span> guess))\n    )\n  )\n  iter\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">~=</span> a b) \n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">&#x3C;</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">abs</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> a b)) <span class=\"hljs-number\">0.00001</span>)\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">sqrt</span></span> x) \n  ((<span class=\"hljs-name\">iterative-improve</span>\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (y) (<span class=\"hljs-name\">~=</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> y y) x))\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (y) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> y (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> x y)) <span class=\"hljs-number\">2</span>))\n  ) <span class=\"hljs-number\">1.0</span>)\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">fixed-point</span> f first-guess)\n  ((<span class=\"hljs-name\">iterative-improve</span>\n     (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (y) (<span class=\"hljs-name\">~=</span> (<span class=\"hljs-name\">f</span> y) y))<span class=\"hljs-comment\">; not very optimal because we computing f twice </span>\n     f\n  ) first-guess)\n)</code></pre>\n<p>And I could move to the chapter about data structures.</p>"},{"id":"sicp1.3.3","title":"SICP 1.3.3 Procedures as general methods","date":"2020-06-29","tags":["SICP"],"excerpt":"<p>I'll attach solution from previous section to this post as it was the only exercise there.</p>","content":"<p>I'll attach solution from previous section to this post as it was the only exercise there.</p>\n<h2>Exercise 1.34 Runtime error with types</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">f</span> g)\n  (<span class=\"hljs-name\">g</span> <span class=\"hljs-number\">2</span>))\n(<span class=\"hljs-name\">f</span> f) -> (<span class=\"hljs-name\">f</span> <span class=\"hljs-number\">2</span>) -> (<span class=\"hljs-name\">2</span> <span class=\"hljs-number\">2</span>)</code></pre>\n<p>2 is obviously not a function, so scheme gives error when you try to apply it as function.</p>\n<h2>Exercise 1.35 Use fixed point procedure for finding golden ratio</h2>\n<p>So, let's divide both sides of equation Φ2 = Φ + 1. We get Φ  = 1 + 1/Φ - and this is exactly the formula to find fixed point for.</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> tolerance <span class=\"hljs-number\">0.00001</span>)\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">fixed-point</span> f first-guess)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">close-enough?</span> v1 v2)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">&#x3C;</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">abs</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> v1 v2)) tolerance))\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">try</span> guess)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">let</span></span> ((<span class=\"hljs-name\">next</span> (<span class=\"hljs-name\">f</span> guess)))\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\">close-enough?</span> guess next)\n          next\n          (<span class=\"hljs-name\">try</span> next))))\n  (<span class=\"hljs-name\">try</span> first-guess))\n(<span class=\"hljs-name\">fixed-point</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (x) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> <span class=\"hljs-number\">1</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> <span class=\"hljs-number\">1</span> x))) <span class=\"hljs-number\">1.0</span>)</code></pre>\n<h2>Exercise 1.36 Printing sequence of approximations</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> tolerance <span class=\"hljs-number\">0.00001</span>)\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">fixed-point</span> f first-guess)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">close-enough?</span> v1 v2)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">&#x3C;</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">abs</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> v1 v2)) tolerance))\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">try</span> guess)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">let</span></span> ((<span class=\"hljs-name\">next</span> (<span class=\"hljs-name\">f</span> guess)))\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">display</span></span> <span class=\"hljs-string\">\"Approximation: \"</span>) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">display</span></span> next)(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">newline</span></span>)\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\">close-enough?</span> guess next)\n          next\n          (<span class=\"hljs-name\">try</span> next))))\n  (<span class=\"hljs-name\">try</span> first-guess))\n(<span class=\"hljs-name\">fixed-point</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (x) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">log</span></span> <span class=\"hljs-number\">1000</span>) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">log</span></span> x))) <span class=\"hljs-number\">2.0</span>)</code></pre>\n<h2>Exercise 1.37 Golden ratio from continued fraction</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">cont-frac</span> n d k)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">iter</span> i) \n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> (<span class=\"hljs-name\">n</span> i) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> i k)\n       (<span class=\"hljs-name\">d</span> i)\n       (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> (<span class=\"hljs-name\">d</span> i) (<span class=\"hljs-name\">iter</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> i <span class=\"hljs-number\">1</span>)))\n    ))\n  )\n  (<span class=\"hljs-name\">iter</span> <span class=\"hljs-number\">1</span>)\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">golden</span> k)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> <span class=\"hljs-number\">1</span> (<span class=\"hljs-name\">cont-frac</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (i) <span class=\"hljs-number\">1.0</span>)\n           (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (i) <span class=\"hljs-number\">1.0</span>)\n           k))\n)\n\n(<span class=\"hljs-name\">golden</span> <span class=\"hljs-number\">12</span>)\n<span class=\"hljs-comment\">;Value: 1.6180555555555558</span>\n</code></pre>\n<p>Iterative continuous fraction:</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">cont-frac</span> n d k)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">iter</span> i result) \n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> i <span class=\"hljs-number\">0</span>)\n      result\n      (<span class=\"hljs-name\">iter</span>\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> i <span class=\"hljs-number\">1</span>)\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> (<span class=\"hljs-name\">n</span> i) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> (<span class=\"hljs-name\">d</span> i) result))\n      )\n    )\n  )\n  (<span class=\"hljs-name\">iter</span> k <span class=\"hljs-number\">0</span>)\n)</code></pre>\n<h2>Exercise 1.38 Euler number</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">e</span> k)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> <span class=\"hljs-number\">2</span> (<span class=\"hljs-name\">cont-frac</span>\n         (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (i) <span class=\"hljs-number\">1.0</span>)\n         (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (i)\n           (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">remainder</span></span> i <span class=\"hljs-number\">3</span>) <span class=\"hljs-number\">2</span>)\n             (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> <span class=\"hljs-number\">1</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">floor</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> i <span class=\"hljs-number\">3</span>))) <span class=\"hljs-number\">2</span>)\n             <span class=\"hljs-number\">1.0</span>\n            )\n         )\n         k\n  ))\n)\n\n(<span class=\"hljs-name\">e</span> <span class=\"hljs-number\">15</span>)\n<span class=\"hljs-comment\">;Value: 2.718281828470584</span></code></pre>\n<h2>Exercise 1.39 Continued fraction tangent</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">tan</span></span> x k)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">let</span></span> ((<span class=\"hljs-name\">n_sqr</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> <span class=\"hljs-number\">0</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> x x))))\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> x (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> <span class=\"hljs-number\">1</span> (<span class=\"hljs-name\">cont-frac</span>\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (i) n_sqr)\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (i) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> <span class=\"hljs-number\">1</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> i <span class=\"hljs-number\">2</span>)))\n        k\n      )))\n  )\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">tan</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> pi <span class=\"hljs-number\">4</span>) <span class=\"hljs-number\">100</span>)\n<span class=\"hljs-comment\">;Value: .9999999732051038</span>\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">tan</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> pi <span class=\"hljs-number\">2</span>) <span class=\"hljs-number\">1000</span>)\n<span class=\"hljs-comment\">;Value: 37320539.58514773</span>\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">tan</span></span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">100</span>)\n<span class=\"hljs-comment\">;Value: 0</span></code></pre>\n<p>Approximately so.</p>"}],"pages":3,"archives":[{"url":"/month/2018-08/page/1","id":"2018-08","count":1,"title":"2018-08"},{"url":"/month/2020-06/page/1","id":"2020-06","count":7,"title":"2020-06"},{"url":"/month/2020-07/page/1","id":"2020-07","count":10,"title":"2020-07"},{"url":"/month/2020-08/page/1","id":"2020-08","count":2,"title":"2020-08"},{"url":"/month/2020-09/page/1","id":"2020-09","count":2,"title":"2020-09"},{"url":"/month/2020-12/page/1","id":"2020-12","count":1,"title":"2020-12"},{"url":"/month/2021-01/page/1","id":"2021-01","count":4,"title":"2021-01"}],"topics":[{"url":"/tag/MOOC/page/1","id":"MOOC","title":"MOOC","count":2},{"url":"/tag/SICP/page/1","id":"SICP","title":"SICP","count":20},{"url":"/tag/ideas/page/1","id":"ideas","title":"ideas","count":1},{"url":"/tag/notes/page/1","id":"notes","title":"notes","count":5},{"url":"/tag/on writing/page/1","id":"on writing","title":"on writing","count":3}]},"__N_SSG":true}