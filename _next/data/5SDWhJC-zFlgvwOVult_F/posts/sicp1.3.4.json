{"pageProps":{"post":{"id":"sicp1.3.4","title":"SICP 1.3.4 Procedures as returned values","date":"2020-07-02","tags":["SICP"],"excerpt":"<p>Today I have learned that John Carmack was also challenged by SICP:</p>\n<blockquote>\n<p>100 pages into Structure and Interpretation of Computer Programs. I'm proud of myself for not skipping the Church Numerals exercise. <a href=\"https://twitter.com/ID_AA_Carmack/status/350028210551013376\">Twitter</a></p>\n</blockquote>\n<p>I still need to get so far.</p>","content":"<p>Today I have learned that John Carmack was also challenged by SICP:</p>\n<blockquote>\n<p>100 pages into Structure and Interpretation of Computer Programs. I'm proud of myself for not skipping the Church Numerals exercise. <a href=\"https://twitter.com/ID_AA_Carmack/status/350028210551013376\">Twitter</a></p>\n</blockquote>\n<p>I still need to get so far.</p>\n<h2>Exercise 1.40</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">cubic</span> a b c) \n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (x) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span>\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> x x x)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> a x x)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> b x)\n    c\n  ))\n)</code></pre>\n<h2>Exercise 1.41</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">inc</span> x) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> x <span class=\"hljs-number\">1</span>))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">double</span> f)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (x) (<span class=\"hljs-name\">f</span> (<span class=\"hljs-name\">f</span> x)))\n)</code></pre>\n<h2>Exercise 1.42</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">sqr</span> x) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> x x))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">compose</span> f g) \n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (x) (<span class=\"hljs-name\">f</span> (<span class=\"hljs-name\">g</span> x)))\n)\n\n((<span class=\"hljs-name\">compose</span> sqr inc) <span class=\"hljs-number\">6</span>)</code></pre>\n<h2>Exercise 1.43</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">repeated</span> f n) \n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> n <span class=\"hljs-number\">1</span>)\n    f\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">even?</span></span> n)\n      (<span class=\"hljs-name\">repeated</span> (<span class=\"hljs-name\">double</span> f) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> n <span class=\"hljs-number\">2</span>))\n      (<span class=\"hljs-name\">compose</span> f (<span class=\"hljs-name\">repeated</span> f (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> n <span class=\"hljs-number\">1</span>)))\n    )\n  )\n)</code></pre>\n<h2>Exercise 1.44</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> dx <span class=\"hljs-number\">0.000001</span>)\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">smooth</span> f)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (x) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span>\n    (<span class=\"hljs-name\">f</span> x)\n    (<span class=\"hljs-name\">f</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> x dx))\n    (<span class=\"hljs-name\">f</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> x dx))\n  ) <span class=\"hljs-number\">3.0</span>))\n)\n\n(<span class=\"hljs-name\">repeated</span> smooth <span class=\"hljs-number\">10</span>)</code></pre>\n<h1>Exercise 1.45</h1>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> tolerance <span class=\"hljs-number\">0.00001</span>)\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">fixed-point</span> f first-guess)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">close-enough?</span> v1 v2)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">&#x3C;</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">abs</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> v1 v2)) tolerance))\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">try</span> guess limit)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">display</span></span> guess) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">newline</span></span>)<span class=\"hljs-comment\">; to debug trace</span>\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">let</span></span> ((<span class=\"hljs-name\">next</span> (<span class=\"hljs-name\">f</span> guess)))\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> limit <span class=\"hljs-number\">0</span>)\n        (<span class=\"hljs-name\">error</span> <span class=\"hljs-string\">\"Reached iteration limit\"</span>)\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\">close-enough?</span> guess next)\n            next\n            (<span class=\"hljs-name\">try</span> next (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> limit <span class=\"hljs-number\">1</span>)))\n      )))\n  (<span class=\"hljs-name\">try</span> first-guess <span class=\"hljs-number\">1000</span>)\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">average-damp</span> f) \n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (y) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> (<span class=\"hljs-name\">f</span> y) y) <span class=\"hljs-number\">2</span>))\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">npow</span> x n)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> n <span class=\"hljs-number\">1</span>) x (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> x (<span class=\"hljs-name\">npow</span> x (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> n <span class=\"hljs-number\">1</span>)) ))\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">n-root</span> x n) \n  (<span class=\"hljs-name\">fixed-point</span>\n    ((<span class=\"hljs-name\">repeated</span> average-damp (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> n <span class=\"hljs-number\">2</span>)) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (y) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> x (<span class=\"hljs-name\">npow</span> y (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> n <span class=\"hljs-number\">1</span>)))))\n    <span class=\"hljs-number\">1</span>\n  )\n)</code></pre>\n<p>I saw on the internet solutions better than n / 2, but I would like to move on.</p>\n<h1>Exercise 1.46</h1>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">iterative-improve</span> good-enough next)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">iter</span> guess) \n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\">good-enough</span> guess)\n      guess\n      (<span class=\"hljs-name\">iter</span> (<span class=\"hljs-name\">next</span> guess))\n    )\n  )\n  iter\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">~=</span> a b) \n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">&#x3C;</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">abs</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> a b)) <span class=\"hljs-number\">0.00001</span>)\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">sqrt</span></span> x) \n  ((<span class=\"hljs-name\">iterative-improve</span>\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (y) (<span class=\"hljs-name\">~=</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> y y) x))\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (y) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> y (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> x y)) <span class=\"hljs-number\">2</span>))\n  ) <span class=\"hljs-number\">1.0</span>)\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">fixed-point</span> f first-guess)\n  ((<span class=\"hljs-name\">iterative-improve</span>\n     (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (y) (<span class=\"hljs-name\">~=</span> (<span class=\"hljs-name\">f</span> y) y))<span class=\"hljs-comment\">; not very optimal because we computing f twice </span>\n     f\n  ) first-guess)\n)</code></pre>\n<p>And I could move to the chapter about data structures.</p>"},"archives":[{"url":"/month/2018-08/page/1","id":"2018-08","count":1,"title":"2018-08"},{"url":"/month/2018-12/page/1","id":"2018-12","count":1,"title":"2018-12"},{"url":"/month/2020-06/page/1","id":"2020-06","count":7,"title":"2020-06"},{"url":"/month/2020-07/page/1","id":"2020-07","count":10,"title":"2020-07"},{"url":"/month/2020-08/page/1","id":"2020-08","count":2,"title":"2020-08"},{"url":"/month/2020-09/page/1","id":"2020-09","count":2,"title":"2020-09"},{"url":"/month/2020-12/page/1","id":"2020-12","count":1,"title":"2020-12"},{"url":"/month/2021-01/page/1","id":"2021-01","count":4,"title":"2021-01"}],"topics":[{"url":"/tag/MOOC/page/1","id":"MOOC","title":"MOOC","count":2},{"url":"/tag/SICP/page/1","id":"SICP","title":"SICP","count":20},{"url":"/tag/ideas/page/1","id":"ideas","title":"ideas","count":1},{"url":"/tag/notes/page/1","id":"notes","title":"notes","count":5},{"url":"/tag/on writing/page/1","id":"on writing","title":"on writing","count":3}]},"__N_SSG":true}