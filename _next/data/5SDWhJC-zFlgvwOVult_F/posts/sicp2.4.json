{"pageProps":{"post":{"id":"sicp2.4","title":"SICP 2.4 Multiple representations for abstract data","date":"2020-08-26","tags":["SICP"],"excerpt":"<p>I went on vacation and lost cadence on this project. Need to get back on track, remember how to lauch interpreter, etc. :)</p>\n<p><a href=\"https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book-Z-H-17.html\">Link to the chapter</a></p>\n<p>In this chapter we will need <code>get</code> and <code>put</code> functions which could be implemented by similar system functions.</p>\n<p>Found this on <a href=\"https://stackoverflow.com/a/29465496/816449\">StackOverflow</a>, of course.</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> put <span class=\"hljs-number\">2</span>d-put!)\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">get</span> a b)\n    <span class=\"hljs-comment\">;(display \"get \") (display a) (display b) (newline)</span>\n    (<span class=\"hljs-name\">2d-get</span> a b)\n)</code></pre>","content":"<p>I went on vacation and lost cadence on this project. Need to get back on track, remember how to lauch interpreter, etc. :)</p>\n<p><a href=\"https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book-Z-H-17.html\">Link to the chapter</a></p>\n<p>In this chapter we will need <code>get</code> and <code>put</code> functions which could be implemented by similar system functions.</p>\n<p>Found this on <a href=\"https://stackoverflow.com/a/29465496/816449\">StackOverflow</a>, of course.</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> put <span class=\"hljs-number\">2</span>d-put!)\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">get</span> a b)\n    <span class=\"hljs-comment\">;(display \"get \") (display a) (display b) (newline)</span>\n    (<span class=\"hljs-name\">2d-get</span> a b)\n)</code></pre>\n<p>And some setup from <a href=\"/posts/sicp2.3.2/\">previous section</a>:</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> variable? symbol?)\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">same-variable?</span> v1 v2)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">and</span></span> (<span class=\"hljs-name\">variable?</span> v1) (<span class=\"hljs-name\">variable?</span> v2) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">eq?</span></span> v1 v2)))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">=number?</span> exp num)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">and</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">number?</span></span> exp) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> exp num)))</code></pre>\n<h2>Exercise 2.73</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">deriv</span> exp var)\n   (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cond</span></span> ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">number?</span></span> exp) <span class=\"hljs-number\">0</span>)\n         ((<span class=\"hljs-name\">variable?</span> exp) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\">same-variable?</span> exp var) <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">0</span>))\n         (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">else</span></span> ((<span class=\"hljs-name\">get</span> <span class=\"hljs-symbol\">'deriv</span> (<span class=\"hljs-name\">operator</span> exp)) (<span class=\"hljs-name\">operands</span> exp)\n                                            var))))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">operator</span> exp) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> exp))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">operands</span> exp) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> exp))</code></pre>\n<p>a) So, in our new derive we do lookup in table instead of <code>cond</code> expression. We are not able to move <code>number?</code> into lookup, because <code>number?</code> is condition for a set of values, not just one value, and table works only with one value.</p>\n<p>b)</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">make-sum</span> args) \n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">sum</span> items total nonnum)\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cond</span></span>\n            ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">null?</span></span> items)\n                (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">null?</span></span> nonnum)\n                    total\n                    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> <span class=\"hljs-symbol\">'+</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> total <span class=\"hljs-number\">0</span>)\n                                nonnum\n                                (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> total nonnum)\n                    ))\n                )\n            )\n            ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">number?</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> items))\n                (<span class=\"hljs-name\">sum</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> items) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> items) total) nonnum))\n            (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">else</span></span>\n                (<span class=\"hljs-name\">sum</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> items) total (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> items) nonnum)))\n        )\n    )\n    (<span class=\"hljs-name\">sum</span> args <span class=\"hljs-number\">0</span> '())\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">make-prod</span> m1 m2)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cond</span></span> ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">or</span></span> (<span class=\"hljs-name\">=number?</span> m1 <span class=\"hljs-number\">0</span>) (<span class=\"hljs-name\">=number?</span> m2 <span class=\"hljs-number\">0</span>)) <span class=\"hljs-number\">0</span>)\n        ((<span class=\"hljs-name\">=number?</span> m1 <span class=\"hljs-number\">1</span>) m2)\n        ((<span class=\"hljs-name\">=number?</span> m2 <span class=\"hljs-number\">1</span>) m1)\n        ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">and</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">number?</span></span> m1) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">number?</span></span> m2)) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> m1 m2))\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">else</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-symbol\">'*</span> m1 m2))))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">install-derivatives-package</span>) \n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">deriv-sum</span> items var)\n    (<span class=\"hljs-name\">make-sum</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">map</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (e) (<span class=\"hljs-name\">deriv</span> e var)) items))\n  )\n  (<span class=\"hljs-name\">put</span> <span class=\"hljs-symbol\">'deriv</span> <span class=\"hljs-symbol\">'+</span> deriv-sum)\n\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">deriv-prod</span> items var)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">let</span></span> ((<span class=\"hljs-name\">tail</span>\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">null?</span></span> (<span class=\"hljs-name\">cddr</span> items))\n            (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cadr</span></span> items)\n            (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> <span class=\"hljs-symbol\">'*</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> items))\n        )\n    ))\n        (<span class=\"hljs-name\">make-sum</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> \n           (<span class=\"hljs-name\">make-prod</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> items)\n                      (<span class=\"hljs-name\">deriv</span> tail var))\n           (<span class=\"hljs-name\">make-prod</span> (<span class=\"hljs-name\">deriv</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> items) var)\n                      tail)\n        ))\n    )\n  )\n  (<span class=\"hljs-name\">put</span> <span class=\"hljs-symbol\">'deriv</span> <span class=\"hljs-symbol\">'+</span> deriv-sum)\n  (<span class=\"hljs-name\">put</span> <span class=\"hljs-symbol\">'deriv</span> <span class=\"hljs-symbol\">'*</span> deriv-prod)\n)\n(<span class=\"hljs-name\">install-derivatives-package</span>) </code></pre>\n<p>I think I wrote too much code here because I wanted to support sums and products of multiple arguments.</p>\n<p>c) Exponentation</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">make-exp</span> base e)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cond</span></span> ((<span class=\"hljs-name\">=number?</span> e <span class=\"hljs-number\">0</span>) <span class=\"hljs-number\">1</span>)\n        ((<span class=\"hljs-name\">=number?</span> e <span class=\"hljs-number\">1</span>) base)\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">else</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-symbol\">'**</span> base e))))\n\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">deriv-exp</span> items var)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">let</span></span> (\n        (<span class=\"hljs-name\">base</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> items))\n        (<span class=\"hljs-name\">e</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cadr</span></span> items))\n    )\n        (<span class=\"hljs-name\">make-prod</span>\n            e\n            (<span class=\"hljs-name\">make-exp</span> base (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> e <span class=\"hljs-number\">1</span>))\n        )\n    )\n  )\n  (<span class=\"hljs-name\">put</span> <span class=\"hljs-symbol\">'deriv</span> <span class=\"hljs-symbol\">'**</span> deriv-exp)\n\n(<span class=\"hljs-name\">deriv</span> '(+ (** x <span class=\"hljs-number\">3</span>) (** x <span class=\"hljs-number\">2</span>)) <span class=\"hljs-symbol\">'x</span>)</code></pre>\n<p>d) We could switch arguments inside <code>get</code>, or inside <code>put</code>, or switch arguments when we call put. That's all what will be needed.</p>\n<h2>Exercise 2.74</h2>\n<p>I skipped it because it is too abstract.</p>\n<h2>Exercise 2.75</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">make-from-mag-ang</span> r a) \n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">dispatch</span> op)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cond</span></span> ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">eq?</span></span> op <span class=\"hljs-symbol\">'real-part</span>) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> r (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cos</span></span> a)))\n          ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">eq?</span></span> op <span class=\"hljs-symbol\">'imag-part</span>) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> r (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">sin</span></span> a)))\n          ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">eq?</span></span> op <span class=\"hljs-symbol\">'magnitude</span>) r)\n          ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">eq?</span></span> op <span class=\"hljs-symbol\">'angle</span>) a)\n          (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">else</span></span>\n           (<span class=\"hljs-name\">error</span> <span class=\"hljs-string\">\"Unknown op -- MAKE-FROM-REAL-IMAG\"</span> op))))\n  dispatch)</code></pre>\n<h2>Exercise 2.76</h2>\n<p>Skip this too. Because I see no way to verify that I did it correctly. Learning needs feedback.</p>"},"archives":[{"url":"/month/2018-08/page/1","id":"2018-08","count":1,"title":"2018-08"},{"url":"/month/2018-12/page/1","id":"2018-12","count":1,"title":"2018-12"},{"url":"/month/2020-06/page/1","id":"2020-06","count":7,"title":"2020-06"},{"url":"/month/2020-07/page/1","id":"2020-07","count":10,"title":"2020-07"},{"url":"/month/2020-08/page/1","id":"2020-08","count":2,"title":"2020-08"},{"url":"/month/2020-09/page/1","id":"2020-09","count":2,"title":"2020-09"},{"url":"/month/2020-12/page/1","id":"2020-12","count":1,"title":"2020-12"},{"url":"/month/2021-01/page/1","id":"2021-01","count":4,"title":"2021-01"}],"topics":[{"url":"/tag/MOOC/page/1","id":"MOOC","title":"MOOC","count":2},{"url":"/tag/SICP/page/1","id":"SICP","title":"SICP","count":20},{"url":"/tag/ideas/page/1","id":"ideas","title":"ideas","count":1},{"url":"/tag/notes/page/1","id":"notes","title":"notes","count":5},{"url":"/tag/on writing/page/1","id":"on writing","title":"on writing","count":3}]},"__N_SSG":true}