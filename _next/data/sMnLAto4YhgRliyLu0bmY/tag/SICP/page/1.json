{"pageProps":{"pageNumber":"1","posts":[{"id":"sicp2.5.1","title":"SICP 2.5.1 Generic arithmetic operations","date":"2020-09-02","tags":["SICP"],"excerpt":"<p>In <a href=\"/posts/sicp2.4/\">previous post</a> I have used wrong StackOverflow answer. :) Or, to be more precise, right answer for that section, but useless here, as we want to store in table functions for multiple arguments.</p>\n<p><a href=\"https://stackoverflow.com/a/19114031/816449\">Correct answer</a> that supports lists looks like this:</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> *op-table* (<span class=\"hljs-name\">make-hash-table</span>))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">put</span> op type proc)\n  (<span class=\"hljs-name\">hash-table/put!</span> *op-table* (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> op type) proc))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">get</span> op type)\n  (<span class=\"hljs-name\">hash-table/get</span> *op-table* (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> op type) <span class=\"hljs-literal\">#f</span>))</code></pre>","content":"<p>In <a href=\"/posts/sicp2.4/\">previous post</a> I have used wrong StackOverflow answer. :) Or, to be more precise, right answer for that section, but useless here, as we want to store in table functions for multiple arguments.</p>\n<p><a href=\"https://stackoverflow.com/a/19114031/816449\">Correct answer</a> that supports lists looks like this:</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> *op-table* (<span class=\"hljs-name\">make-hash-table</span>))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">put</span> op type proc)\n  (<span class=\"hljs-name\">hash-table/put!</span> *op-table* (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> op type) proc))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">get</span> op type)\n  (<span class=\"hljs-name\">hash-table/get</span> *op-table* (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> op type) <span class=\"hljs-literal\">#f</span>))</code></pre>\n<p>Also I needed to copypaste a lot of code to be able to start working on <a href=\"#exercise-2-77\">first exercise</a>:</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">attach-tag</span> type-tag contents)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> type-tag contents))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">type-tag</span> datum)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">pair?</span></span> datum)\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> datum)\n      (<span class=\"hljs-name\">error</span> <span class=\"hljs-string\">\"Bad tagged datum -- TYPE-TAG\"</span> datum)))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">contents</span> datum)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">pair?</span></span> datum)\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> datum)\n      (<span class=\"hljs-name\">error</span> <span class=\"hljs-string\">\"Bad tagged datum -- CONTENTS\"</span> datum)))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">apply-generic</span> op . args)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">let</span></span> ((<span class=\"hljs-name\">type-tags</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">map</span></span> type-tag args)))\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">let</span></span> ((<span class=\"hljs-name\">proc</span> (<span class=\"hljs-name\">get</span> op type-tags)))\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> proc\n          (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">apply</span></span> proc (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">map</span></span> contents args))\n          (<span class=\"hljs-name\">error</span>\n            <span class=\"hljs-string\">\"No method for these types -- APPLY-GENERIC\"</span>\n            (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> op type-tags))))))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">real-part</span></span> z) (<span class=\"hljs-name\">apply-generic</span> <span class=\"hljs-symbol\">'real-part</span> z))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">imag-part</span></span> z) (<span class=\"hljs-name\">apply-generic</span> <span class=\"hljs-symbol\">'imag-part</span> z))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">magnitude</span></span> z) (<span class=\"hljs-name\">apply-generic</span> <span class=\"hljs-symbol\">'magnitude</span> z))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">angle</span></span> z) (<span class=\"hljs-name\">apply-generic</span> <span class=\"hljs-symbol\">'angle</span> z))\n\n\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">install-rectangular-package</span>)\n  <span class=\"hljs-comment\">;; internal procedures</span>\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">real-part</span></span> z) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> z))\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">imag-part</span></span> z) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> z))\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">make-from-real-imag</span> x y) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> x y))\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">magnitude</span></span> z)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">sqrt</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> (<span class=\"hljs-name\">square</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">real-part</span></span> z))\n             (<span class=\"hljs-name\">square</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">imag-part</span></span> z)))))\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">angle</span></span> z)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">atan</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">imag-part</span></span> z) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">real-part</span></span> z)))\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">make-from-mag-ang</span> r a) \n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> r (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cos</span></span> a)) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> r (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">sin</span></span> a))))\n  <span class=\"hljs-comment\">;; interface to the rest of the system</span>\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">tag</span> x) (<span class=\"hljs-name\">attach-tag</span> <span class=\"hljs-symbol\">'rectangular</span> x))\n  (<span class=\"hljs-name\">put</span> <span class=\"hljs-symbol\">'real-part</span> '(rectangular) real-part)\n  (<span class=\"hljs-name\">put</span> <span class=\"hljs-symbol\">'imag-part</span> '(rectangular) imag-part)\n  (<span class=\"hljs-name\">put</span> <span class=\"hljs-symbol\">'magnitude</span> '(rectangular) magnitude)\n  (<span class=\"hljs-name\">put</span> <span class=\"hljs-symbol\">'angle</span> '(rectangular) angle)\n  (<span class=\"hljs-name\">put</span> <span class=\"hljs-symbol\">'make-from-real-imag</span> <span class=\"hljs-symbol\">'rectangular</span> \n       (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (x y) (<span class=\"hljs-name\">tag</span> (<span class=\"hljs-name\">make-from-real-imag</span> x y))))\n  (<span class=\"hljs-name\">put</span> <span class=\"hljs-symbol\">'make-from-mag-ang</span> <span class=\"hljs-symbol\">'rectangular</span> \n       (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (r a) (<span class=\"hljs-name\">tag</span> (<span class=\"hljs-name\">make-from-mag-ang</span> r a))))\n  <span class=\"hljs-symbol\">'done</span>)\n(<span class=\"hljs-name\">install-rectangular-package</span>)\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">install-polar-package</span>)\n  <span class=\"hljs-comment\">;; internal procedures</span>\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">magnitude</span></span> z) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> z))\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">angle</span></span> z) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> z))\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">make-from-mag-ang</span> r a) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> r a))\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">real-part</span></span> z)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">magnitude</span></span> z) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cos</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">angle</span></span> z))))\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">imag-part</span></span> z)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">magnitude</span></span> z) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">sin</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">angle</span></span> z))))\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">make-from-real-imag</span> x y) \n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">sqrt</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> (<span class=\"hljs-name\">square</span> x) (<span class=\"hljs-name\">square</span> y)))\n          (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">atan</span></span> y x)))\n  <span class=\"hljs-comment\">;; interface to the rest of the system</span>\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">tag</span> x) (<span class=\"hljs-name\">attach-tag</span> <span class=\"hljs-symbol\">'polar</span> x))\n  (<span class=\"hljs-name\">put</span> <span class=\"hljs-symbol\">'real-part</span> '(polar) real-part)\n  (<span class=\"hljs-name\">put</span> <span class=\"hljs-symbol\">'imag-part</span> '(polar) imag-part)\n  (<span class=\"hljs-name\">put</span> <span class=\"hljs-symbol\">'magnitude</span> '(polar) magnitude)\n  (<span class=\"hljs-name\">put</span> <span class=\"hljs-symbol\">'angle</span> '(polar) angle)\n  (<span class=\"hljs-name\">put</span> <span class=\"hljs-symbol\">'make-from-real-imag</span> <span class=\"hljs-symbol\">'polar</span>\n       (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (x y) (<span class=\"hljs-name\">tag</span> (<span class=\"hljs-name\">make-from-real-imag</span> x y))))\n  (<span class=\"hljs-name\">put</span> <span class=\"hljs-symbol\">'make-from-mag-ang</span> <span class=\"hljs-symbol\">'polar</span> \n       (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (r a) (<span class=\"hljs-name\">tag</span> (<span class=\"hljs-name\">make-from-mag-ang</span> r a))))\n  <span class=\"hljs-symbol\">'done</span>)\n(<span class=\"hljs-name\">install-rectangular-package</span>)\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">install-complex-package</span>)\n  <span class=\"hljs-comment\">;; imported procedures from rectangular and polar packages</span>\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">make-from-real-imag</span> x y)\n    ((<span class=\"hljs-name\">get</span> <span class=\"hljs-symbol\">'make-from-real-imag</span> <span class=\"hljs-symbol\">'rectangular</span>) x y))\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">make-from-mag-ang</span> r a)\n    ((<span class=\"hljs-name\">get</span> <span class=\"hljs-symbol\">'make-from-mag-ang</span> <span class=\"hljs-symbol\">'polar</span>) r a))\n  <span class=\"hljs-comment\">;; internal procedures</span>\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">add-complex</span> z1 z2)\n    (<span class=\"hljs-name\">make-from-real-imag</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">real-part</span></span> z1) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">real-part</span></span> z2))\n                         (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">imag-part</span></span> z1) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">imag-part</span></span> z2))))\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">sub-complex</span> z1 z2)\n    (<span class=\"hljs-name\">make-from-real-imag</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">real-part</span></span> z1) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">real-part</span></span> z2))\n                         (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">imag-part</span></span> z1) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">imag-part</span></span> z2))))\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">mul-complex</span> z1 z2)\n    (<span class=\"hljs-name\">make-from-mag-ang</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">magnitude</span></span> z1) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">magnitude</span></span> z2))\n                       (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">angle</span></span> z1) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">angle</span></span> z2))))\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">div-complex</span> z1 z2)\n    (<span class=\"hljs-name\">make-from-mag-ang</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">magnitude</span></span> z1) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">magnitude</span></span> z2))\n                       (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">angle</span></span> z1) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">angle</span></span> z2))))\n  <span class=\"hljs-comment\">;; interface to rest of the system</span>\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">tag</span> z) (<span class=\"hljs-name\">attach-tag</span> <span class=\"hljs-symbol\">'complex</span> z))\n  (<span class=\"hljs-name\">put</span> <span class=\"hljs-symbol\">'add</span> '(complex complex)\n       (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (z1 z2) (<span class=\"hljs-name\">tag</span> (<span class=\"hljs-name\">add-complex</span> z1 z2))))\n  (<span class=\"hljs-name\">put</span> <span class=\"hljs-symbol\">'sub</span> '(complex complex)\n       (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (z1 z2) (<span class=\"hljs-name\">tag</span> (<span class=\"hljs-name\">sub-complex</span> z1 z2))))\n  (<span class=\"hljs-name\">put</span> <span class=\"hljs-symbol\">'mul</span> '(complex complex)\n       (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (z1 z2) (<span class=\"hljs-name\">tag</span> (<span class=\"hljs-name\">mul-complex</span> z1 z2))))\n  (<span class=\"hljs-name\">put</span> <span class=\"hljs-symbol\">'div</span> '(complex complex)\n       (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (z1 z2) (<span class=\"hljs-name\">tag</span> (<span class=\"hljs-name\">div-complex</span> z1 z2))))\n  (<span class=\"hljs-name\">put</span> <span class=\"hljs-symbol\">'make-from-real-imag</span> <span class=\"hljs-symbol\">'complex</span>\n       (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (x y) (<span class=\"hljs-name\">tag</span> (<span class=\"hljs-name\">make-from-real-imag</span> x y))))\n  (<span class=\"hljs-name\">put</span> <span class=\"hljs-symbol\">'make-from-mag-ang</span> <span class=\"hljs-symbol\">'complex</span>\n       (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (r a) (<span class=\"hljs-name\">tag</span> (<span class=\"hljs-name\">make-from-mag-ang</span> r a))))\n  (<span class=\"hljs-name\">put</span> <span class=\"hljs-symbol\">'real-part</span> '(complex) real-part)\n  (<span class=\"hljs-name\">put</span> <span class=\"hljs-symbol\">'imag-part</span> '(complex) imag-part)\n  (<span class=\"hljs-name\">put</span> <span class=\"hljs-symbol\">'magnitude</span> '(complex) magnitude)\n  (<span class=\"hljs-name\">put</span> <span class=\"hljs-symbol\">'angle</span> '(complex) angle)\n  <span class=\"hljs-symbol\">'done</span>)\n(<span class=\"hljs-name\">install-complex-package</span>)</code></pre>\n<h2>Exercise 2.77</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> z (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> <span class=\"hljs-symbol\">'complex</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> <span class=\"hljs-symbol\">'rectangular</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">4</span>))))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">magnitude</span></span> z)</code></pre>\n<p>It calls <code>apply-generic</code> to do operation <code>'magnitude</code> with z</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\">apply-generic</span> <span class=\"hljs-symbol\">'magnitude</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> <span class=\"hljs-symbol\">'complex</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> <span class=\"hljs-symbol\">'rectangular</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">4</span>))))</code></pre>\n<p><code>apply-generic</code> looks for operation <code>'magnitude</code> for <code>'complex</code> numbers, and applies it to value inside</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">apply</span></span> (<span class=\"hljs-name\">get</span> <span class=\"hljs-symbol\">'magnitude</span> <span class=\"hljs-symbol\">'complex</span>) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> <span class=\"hljs-symbol\">'rectangular</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">4</span>)))</code></pre>\n<p>That operation, thanks to Alyssa P. Hacker, is just application of same <code>magnitude</code> function, but this time for <code>'rectangular</code> object</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">magnitude</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> <span class=\"hljs-symbol\">'rectangular</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">4</span>)))</code></pre>\n<p>apply-generic applies operation 'magnitude for 'rectangular type to content of rectangular \"package\":</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">apply</span></span> (<span class=\"hljs-name\">get</span> <span class=\"hljs-symbol\">'magnitude</span> <span class=\"hljs-symbol\">'rectangular</span>) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">4</span>))</code></pre>\n<p>which is <code>magnitude</code> function from inside rectangular package</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">magnitude</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">4</span>))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">sqrt</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> (<span class=\"hljs-name\">square</span> <span class=\"hljs-number\">3</span>)\n         (<span class=\"hljs-name\">square</span> <span class=\"hljs-number\">4</span>)))\n<span class=\"hljs-number\">5</span></code></pre>\n<h2>Exercise 2.78</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">attach-tag</span> type-tag contents)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">eq?</span></span> type-tag <span class=\"hljs-symbol\">'scheme-number</span>)\n    contents\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> type-tag contents)\n  )\n)\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">type-tag</span> datum)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cond</span></span>\n    ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">number?</span></span> datum) <span class=\"hljs-symbol\">'scheme-number</span>)\n    ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">pair?</span></span> datum) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> datum))\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">else</span></span> (<span class=\"hljs-name\">error</span> <span class=\"hljs-string\">\"Bad tagged datum -- TYPE-TAG\"</span> datum))\n  )\n)\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">contents</span> datum)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cond</span></span>\n    ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">number?</span></span> datum) datum)\n    ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">pair?</span></span> datum) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> datum))\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">else</span></span> (<span class=\"hljs-name\">error</span> <span class=\"hljs-string\">\"Bad tagged datum -- CONTENTS\"</span> datum))\n  )\n)</code></pre>\n<p>To test:</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">add</span> x y) (<span class=\"hljs-name\">apply-generic</span> <span class=\"hljs-symbol\">'add</span> x y))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">sub</span> x y) (<span class=\"hljs-name\">apply-generic</span> <span class=\"hljs-symbol\">'sub</span> x y))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">mul</span> x y) (<span class=\"hljs-name\">apply-generic</span> <span class=\"hljs-symbol\">'mul</span> x y))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">div</span> x y) (<span class=\"hljs-name\">apply-generic</span> <span class=\"hljs-symbol\">'div</span> x y))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">install-scheme-number-package</span>)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">tag</span> x)\n    (<span class=\"hljs-name\">attach-tag</span> <span class=\"hljs-symbol\">'scheme-number</span> x))    \n  (<span class=\"hljs-name\">put</span> <span class=\"hljs-symbol\">'add</span> '(scheme-number scheme-number)\n       (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (x y) (<span class=\"hljs-name\">tag</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> x y))))\n  (<span class=\"hljs-name\">put</span> <span class=\"hljs-symbol\">'sub</span> '(scheme-number scheme-number)\n       (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (x y) (<span class=\"hljs-name\">tag</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> x y))))\n  (<span class=\"hljs-name\">put</span> <span class=\"hljs-symbol\">'mul</span> '(scheme-number scheme-number)\n       (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (x y) (<span class=\"hljs-name\">tag</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> x y))))\n  (<span class=\"hljs-name\">put</span> <span class=\"hljs-symbol\">'div</span> '(scheme-number scheme-number)\n       (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (x y) (<span class=\"hljs-name\">tag</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> x y))))\n  (<span class=\"hljs-name\">put</span> <span class=\"hljs-symbol\">'make</span> <span class=\"hljs-symbol\">'scheme-number</span>\n       (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (x) (<span class=\"hljs-name\">tag</span> x)))\n  <span class=\"hljs-symbol\">'done</span>)\n(<span class=\"hljs-name\">install-scheme-number-package</span>)</code></pre>\n<h2>Exercise 2.79</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\">put</span> <span class=\"hljs-symbol\">'equ?</span> '(scheme-number scheme-number) =)\n\n(<span class=\"hljs-name\">put</span> <span class=\"hljs-symbol\">'equ?</span> '(complex complex)\n     (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (x y) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">and</span></span>\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">real-part</span></span> x) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">real-part</span></span> y))\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">imag-part</span></span> x) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">imag-part</span></span> y))\n    ))\n)\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">equ?</span> x y) (<span class=\"hljs-name\">apply-generic</span> <span class=\"hljs-symbol\">'equ?</span> x y))</code></pre>\n<h2>Exercise 2.80</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\">put</span> <span class=\"hljs-symbol\">'zero?</span> '(scheme-number)\n     (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (x) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> x <span class=\"hljs-number\">0</span>))\n)\n(<span class=\"hljs-name\">put</span> <span class=\"hljs-symbol\">'zero?</span> '(complex)\n     (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (x) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">magnitude</span></span> x) <span class=\"hljs-number\">0</span>))\n)\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">zero?</span></span> x) (<span class=\"hljs-name\">apply-generic</span> <span class=\"hljs-symbol\">'zero?</span> x))</code></pre>"},{"id":"sicp2.4","title":"SICP 2.4 Multiple representations for abstract data","date":"2020-08-26","tags":["SICP"],"excerpt":"<p>I went on vacation and lost cadence on this project. Need to get back on track, remember how to lauch interpreter, etc. :)</p>\n<p><a href=\"https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book-Z-H-17.html\">Link to the chapter</a></p>\n<p>In this chapter we will need <code>get</code> and <code>put</code> functions which could be implemented by similar system functions.</p>\n<p>Found this on <a href=\"https://stackoverflow.com/a/29465496/816449\">StackOverflow</a>, of course.</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> put <span class=\"hljs-number\">2</span>d-put!)\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">get</span> a b)\n    <span class=\"hljs-comment\">;(display \"get \") (display a) (display b) (newline)</span>\n    (<span class=\"hljs-name\">2d-get</span> a b)\n)</code></pre>","content":"<p>I went on vacation and lost cadence on this project. Need to get back on track, remember how to lauch interpreter, etc. :)</p>\n<p><a href=\"https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book-Z-H-17.html\">Link to the chapter</a></p>\n<p>In this chapter we will need <code>get</code> and <code>put</code> functions which could be implemented by similar system functions.</p>\n<p>Found this on <a href=\"https://stackoverflow.com/a/29465496/816449\">StackOverflow</a>, of course.</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> put <span class=\"hljs-number\">2</span>d-put!)\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">get</span> a b)\n    <span class=\"hljs-comment\">;(display \"get \") (display a) (display b) (newline)</span>\n    (<span class=\"hljs-name\">2d-get</span> a b)\n)</code></pre>\n<p>And some setup from <a href=\"/posts/sicp2.3.2/\">previous section</a>:</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> variable? symbol?)\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">same-variable?</span> v1 v2)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">and</span></span> (<span class=\"hljs-name\">variable?</span> v1) (<span class=\"hljs-name\">variable?</span> v2) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">eq?</span></span> v1 v2)))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">=number?</span> exp num)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">and</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">number?</span></span> exp) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> exp num)))</code></pre>\n<h2>Exercise 2.73</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">deriv</span> exp var)\n   (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cond</span></span> ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">number?</span></span> exp) <span class=\"hljs-number\">0</span>)\n         ((<span class=\"hljs-name\">variable?</span> exp) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\">same-variable?</span> exp var) <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">0</span>))\n         (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">else</span></span> ((<span class=\"hljs-name\">get</span> <span class=\"hljs-symbol\">'deriv</span> (<span class=\"hljs-name\">operator</span> exp)) (<span class=\"hljs-name\">operands</span> exp)\n                                            var))))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">operator</span> exp) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> exp))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">operands</span> exp) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> exp))</code></pre>\n<p>a) So, in our new derive we do lookup in table instead of <code>cond</code> expression. We are not able to move <code>number?</code> into lookup, because <code>number?</code> is condition for a set of values, not just one value, and table works only with one value.</p>\n<p>b)</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">make-sum</span> args) \n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">sum</span> items total nonnum)\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cond</span></span>\n            ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">null?</span></span> items)\n                (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">null?</span></span> nonnum)\n                    total\n                    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> <span class=\"hljs-symbol\">'+</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> total <span class=\"hljs-number\">0</span>)\n                                nonnum\n                                (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> total nonnum)\n                    ))\n                )\n            )\n            ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">number?</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> items))\n                (<span class=\"hljs-name\">sum</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> items) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> items) total) nonnum))\n            (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">else</span></span>\n                (<span class=\"hljs-name\">sum</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> items) total (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> items) nonnum)))\n        )\n    )\n    (<span class=\"hljs-name\">sum</span> args <span class=\"hljs-number\">0</span> '())\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">make-prod</span> m1 m2)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cond</span></span> ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">or</span></span> (<span class=\"hljs-name\">=number?</span> m1 <span class=\"hljs-number\">0</span>) (<span class=\"hljs-name\">=number?</span> m2 <span class=\"hljs-number\">0</span>)) <span class=\"hljs-number\">0</span>)\n        ((<span class=\"hljs-name\">=number?</span> m1 <span class=\"hljs-number\">1</span>) m2)\n        ((<span class=\"hljs-name\">=number?</span> m2 <span class=\"hljs-number\">1</span>) m1)\n        ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">and</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">number?</span></span> m1) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">number?</span></span> m2)) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> m1 m2))\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">else</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-symbol\">'*</span> m1 m2))))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">install-derivatives-package</span>) \n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">deriv-sum</span> items var)\n    (<span class=\"hljs-name\">make-sum</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">map</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (e) (<span class=\"hljs-name\">deriv</span> e var)) items))\n  )\n  (<span class=\"hljs-name\">put</span> <span class=\"hljs-symbol\">'deriv</span> <span class=\"hljs-symbol\">'+</span> deriv-sum)\n\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">deriv-prod</span> items var)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">let</span></span> ((<span class=\"hljs-name\">tail</span>\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">null?</span></span> (<span class=\"hljs-name\">cddr</span> items))\n            (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cadr</span></span> items)\n            (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> <span class=\"hljs-symbol\">'*</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> items))\n        )\n    ))\n        (<span class=\"hljs-name\">make-sum</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> \n           (<span class=\"hljs-name\">make-prod</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> items)\n                      (<span class=\"hljs-name\">deriv</span> tail var))\n           (<span class=\"hljs-name\">make-prod</span> (<span class=\"hljs-name\">deriv</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> items) var)\n                      tail)\n        ))\n    )\n  )\n  (<span class=\"hljs-name\">put</span> <span class=\"hljs-symbol\">'deriv</span> <span class=\"hljs-symbol\">'+</span> deriv-sum)\n  (<span class=\"hljs-name\">put</span> <span class=\"hljs-symbol\">'deriv</span> <span class=\"hljs-symbol\">'*</span> deriv-prod)\n)\n(<span class=\"hljs-name\">install-derivatives-package</span>) </code></pre>\n<p>I think I wrote too much code here because I wanted to support sums and products of multiple arguments.</p>\n<p>c) Exponentation</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">make-exp</span> base e)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cond</span></span> ((<span class=\"hljs-name\">=number?</span> e <span class=\"hljs-number\">0</span>) <span class=\"hljs-number\">1</span>)\n        ((<span class=\"hljs-name\">=number?</span> e <span class=\"hljs-number\">1</span>) base)\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">else</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-symbol\">'**</span> base e))))\n\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">deriv-exp</span> items var)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">let</span></span> (\n        (<span class=\"hljs-name\">base</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> items))\n        (<span class=\"hljs-name\">e</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cadr</span></span> items))\n    )\n        (<span class=\"hljs-name\">make-prod</span>\n            e\n            (<span class=\"hljs-name\">make-exp</span> base (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> e <span class=\"hljs-number\">1</span>))\n        )\n    )\n  )\n  (<span class=\"hljs-name\">put</span> <span class=\"hljs-symbol\">'deriv</span> <span class=\"hljs-symbol\">'**</span> deriv-exp)\n\n(<span class=\"hljs-name\">deriv</span> '(+ (** x <span class=\"hljs-number\">3</span>) (** x <span class=\"hljs-number\">2</span>)) <span class=\"hljs-symbol\">'x</span>)</code></pre>\n<p>d) We could switch arguments inside <code>get</code>, or inside <code>put</code>, or switch arguments when we call put. That's all what will be needed.</p>\n<h2>Exercise 2.74</h2>\n<p>I skipped it because it is too abstract.</p>\n<h2>Exercise 2.75</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">make-from-mag-ang</span> r a) \n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">dispatch</span> op)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cond</span></span> ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">eq?</span></span> op <span class=\"hljs-symbol\">'real-part</span>) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> r (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cos</span></span> a)))\n          ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">eq?</span></span> op <span class=\"hljs-symbol\">'imag-part</span>) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> r (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">sin</span></span> a)))\n          ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">eq?</span></span> op <span class=\"hljs-symbol\">'magnitude</span>) r)\n          ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">eq?</span></span> op <span class=\"hljs-symbol\">'angle</span>) a)\n          (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">else</span></span>\n           (<span class=\"hljs-name\">error</span> <span class=\"hljs-string\">\"Unknown op -- MAKE-FROM-REAL-IMAG\"</span> op))))\n  dispatch)</code></pre>\n<h2>Exercise 2.76</h2>\n<p>Skip this too. Because I see no way to verify that I did it correctly. Learning needs feedback.</p>"},{"id":"sicp2.3.4","title":"SICP 2.3.4 Huffman encoding","date":"2020-08-02","tags":["SICP"],"excerpt":"<p>Exercises to use sets and trees in practice. This topic reminds me of project in Scala course by Martin Odersky.</p>","content":"<p>Exercises to use sets and trees in practice. This topic reminds me of project in Scala course by Martin Odersky.</p>\n<h2>Exercise 2.67</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">make-leaf</span> symbol weight)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-symbol\">'leaf</span> symbol weight))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">leaf?</span> object)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">eq?</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> object) <span class=\"hljs-symbol\">'leaf</span>))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">symbol-leaf</span> x) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cadr</span></span> x))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">weight-leaf</span> x) (<span class=\"hljs-name\">caddr</span> x))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">make-code-tree</span> left right)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> left\n        right\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">append</span></span> (<span class=\"hljs-name\">symbols</span> left) (<span class=\"hljs-name\">symbols</span> right))\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> (<span class=\"hljs-name\">weight</span> left) (<span class=\"hljs-name\">weight</span> right))))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">left-branch</span> tree) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> tree))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">right-branch</span> tree) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cadr</span></span> tree))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">symbols</span> tree)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\">leaf?</span> tree)\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> (<span class=\"hljs-name\">symbol-leaf</span> tree))\n      (<span class=\"hljs-name\">caddr</span> tree)))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">weight</span> tree)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\">leaf?</span> tree)\n      (<span class=\"hljs-name\">weight-leaf</span> tree)\n      (<span class=\"hljs-name\">cadddr</span> tree)))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">decode</span> bits tree)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">decode-1</span> bits current-branch)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">null?</span></span> bits)\n        '()\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">let</span></span> ((<span class=\"hljs-name\">next-branch</span>\n               (<span class=\"hljs-name\">choose-branch</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> bits) current-branch)))\n          (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\">leaf?</span> next-branch)\n              (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> (<span class=\"hljs-name\">symbol-leaf</span> next-branch)\n                    (<span class=\"hljs-name\">decode-1</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> bits) tree))\n              (<span class=\"hljs-name\">decode-1</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> bits) next-branch)))))\n  (<span class=\"hljs-name\">decode-1</span> bits tree))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">choose-branch</span> bit branch)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cond</span></span> ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> bit <span class=\"hljs-number\">0</span>) (<span class=\"hljs-name\">left-branch</span> branch))\n        ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> bit <span class=\"hljs-number\">1</span>) (<span class=\"hljs-name\">right-branch</span> branch))\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">else</span></span> (<span class=\"hljs-name\">error</span> <span class=\"hljs-string\">\"bad bit -- CHOOSE-BRANCH\"</span> bit))))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">adjoin-set</span> x set)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cond</span></span> ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">null?</span></span> set) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> x))\n        ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">&#x3C;</span></span> (<span class=\"hljs-name\">weight</span> x) (<span class=\"hljs-name\">weight</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> set))) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> x set))\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">else</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> set)\n                    (<span class=\"hljs-name\">adjoin-set</span> x (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> set))))))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> sample-tree\n  (<span class=\"hljs-name\">make-code-tree</span> (<span class=\"hljs-name\">make-leaf</span> <span class=\"hljs-symbol\">'A</span> <span class=\"hljs-number\">4</span>)\n                  (<span class=\"hljs-name\">make-code-tree</span>\n                   (<span class=\"hljs-name\">make-leaf</span> <span class=\"hljs-symbol\">'B</span> <span class=\"hljs-number\">2</span>)\n                   (<span class=\"hljs-name\">make-code-tree</span> (<span class=\"hljs-name\">make-leaf</span> <span class=\"hljs-symbol\">'D</span> <span class=\"hljs-number\">1</span>)\n                                   (<span class=\"hljs-name\">make-leaf</span> <span class=\"hljs-symbol\">'C</span> <span class=\"hljs-number\">1</span>)))))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> sample-message '(<span class=\"hljs-number\">0</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">0</span>))\n\n(<span class=\"hljs-name\">decode</span> sample-message sample-tree)\n<span class=\"hljs-comment\">;Value 14: (a d a b b c a)</span></code></pre>\n<h2>Exercise 2.68</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">encode</span> message tree)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">null?</span></span> message)\n      '()\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">append</span></span> (<span class=\"hljs-name\">encode-symbol</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> message) tree)\n              (<span class=\"hljs-name\">encode</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> message) tree))))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">encode-symbol</span> sym tree)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cond</span></span> \n        ((<span class=\"hljs-name\">leaf?</span> tree) '())\n        ((<span class=\"hljs-name\">element-of-set?</span> sym (<span class=\"hljs-name\">symbols</span> (<span class=\"hljs-name\">left-branch</span> tree)))\n         (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> <span class=\"hljs-number\">0</span> (<span class=\"hljs-name\">encode-symbol</span> sym (<span class=\"hljs-name\">left-branch</span> tree))))\n        ((<span class=\"hljs-name\">element-of-set?</span> sym (<span class=\"hljs-name\">symbols</span> (<span class=\"hljs-name\">right-branch</span> tree)))\n         (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> <span class=\"hljs-number\">1</span> (<span class=\"hljs-name\">encode-symbol</span> sym (<span class=\"hljs-name\">right-branch</span> tree))))\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">else</span></span> (<span class=\"hljs-name\">error</span> <span class=\"hljs-string\">\"encode-symbol fails for symbol\"</span> sym <span class=\"hljs-string\">\" with tree \"</span> tree))\n    )\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">element-of-set?</span> x set)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cond</span></span>\n        ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">null?</span></span> set) <span class=\"hljs-literal\">#f</span>)\n        ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">equal?</span></span> x (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> set)) <span class=\"hljs-literal\">#t</span>)\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">else</span></span> (<span class=\"hljs-name\">element-of-set?</span> x (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> set)))\n    )\n)\n\n\n(<span class=\"hljs-name\">encode</span> '(a d a b b c a) sample-tree)</code></pre>\n<h2>Exercise 2.69</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">make-leaf-set</span> pairs)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">null?</span></span> pairs)\n      '()\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">let</span></span> ((<span class=\"hljs-name\">pair</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> pairs)))\n        (<span class=\"hljs-name\">adjoin-set</span> (<span class=\"hljs-name\">make-leaf</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> pair)    <span class=\"hljs-comment\">; symbol</span>\n                               (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cadr</span></span> pair))  <span class=\"hljs-comment\">; frequency</span>\n                    (<span class=\"hljs-name\">make-leaf-set</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> pairs))))))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">adjoin-set</span> x set)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cond</span></span> ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">null?</span></span> set) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> x))\n        ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">&#x3C;</span></span> (<span class=\"hljs-name\">weight</span> x) (<span class=\"hljs-name\">weight</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> set))) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> x set))\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">else</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> set)\n                    (<span class=\"hljs-name\">adjoin-set</span> x (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> set))))))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">generate-huffman-tree</span> pairs)\n  (<span class=\"hljs-name\">successive-merge</span> (<span class=\"hljs-name\">make-leaf-set</span> pairs)))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">successive-merge</span> forest)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">null?</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> forest)) <span class=\"hljs-comment\">; single element</span>\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> forest) <span class=\"hljs-comment\">; means we merged all trees and could return the only element</span>\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">let</span></span> ( <span class=\"hljs-comment\">; othwerise let's take two smallest</span>\n            (<span class=\"hljs-name\">smallest1</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> forest))\n            (<span class=\"hljs-name\">smallest2</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cadr</span></span> forest))\n            (<span class=\"hljs-name\">tail</span> (<span class=\"hljs-name\">cddr</span> forest))\n        )\n            (<span class=\"hljs-name\">successive-merge</span> (<span class=\"hljs-name\">adjoin-set</span>\n                (<span class=\"hljs-name\">make-code-tree</span> smallest1 smallest2) <span class=\"hljs-comment\">; merge them</span>\n                tail <span class=\"hljs-comment\">; and add to the remaining set of trees</span>\n            ))\n        )\n    )\n)\n\n(<span class=\"hljs-name\">generate-huffman-tree</span> '((a <span class=\"hljs-number\">1</span>) (b <span class=\"hljs-number\">1</span>) (c <span class=\"hljs-number\">5</span>)))</code></pre>\n<h2>Exercise 2.70</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> rock-code (<span class=\"hljs-name\">generate-huffman-tree</span> '(\n    (A \t    <span class=\"hljs-number\">2</span>)\n    (BOOM \t<span class=\"hljs-number\">1</span>)\n    (GET \t<span class=\"hljs-number\">2</span>)\n    (JOB \t<span class=\"hljs-number\">2</span>)\n    (NA \t<span class=\"hljs-number\">16</span>)\n    (SHA \t<span class=\"hljs-number\">4</span>)\n    (YIP \t<span class=\"hljs-number\">9</span>)\n    (WAH \t<span class=\"hljs-number\">1</span>) \n)))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> rock-song '(Get a job\n\nSha na na na na na na na na\n\nGet a job\n\nSha na na na na na na na na\n\nWah yip yip yip yip yip yip yip yip yip\n\nSha boom\n))</code></pre>\n<p>How many bits are required for encoding?</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">length</span></span> (<span class=\"hljs-name\">encode</span> rock-song rock-code))\n<span class=\"hljs-comment\">;Value: 84</span></code></pre>\n<p>What is the smallest number of bits that would be needed to encode this song if we used a fixed-length code for the eight-symbol alphabet?</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> <span class=\"hljs-number\">3</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">length</span></span> rock-song))\n<span class=\"hljs-comment\">;Value: 108</span></code></pre>\n<h2>Exercise 2.71</h2>\n<p>Most frequent symbol is encoded in one bit, least frequent - in n bits.</p>\n<h2>Exercise 2.72</h2>\n<p>If search in set is linear, then for the most frequent symbol endoing is done in O(n), for the least frequent - in O(n2). If search is done in log(n) - then encoding could be done from log(n) to n*log(n)</p>"},{"id":"sicp2.3.3","title":"SICP 2.3.3 Representing sets","date":"2020-07-28","tags":["SICP"],"excerpt":"<p>This was more boring in comparison to previous section, probably because it required writing less code, and just writing more explanations. Writing is thinking, so I tried to do that. Or maybe it was boring because sets are not as exciting as symbolic differentiation. At least when you have high level language.</p>","content":"<p>This was more boring in comparison to previous section, probably because it required writing less code, and just writing more explanations. Writing is thinking, so I tried to do that. Or maybe it was boring because sets are not as exciting as symbolic differentiation. At least when you have high level language.</p>\n<h2>Exercise 2.59</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">element-of-set?</span> x set)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cond</span></span> ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">null?</span></span> set) false)\n        ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">equal?</span></span> x (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> set)) true)\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">else</span></span> (<span class=\"hljs-name\">element-of-set?</span> x (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> set)))))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">adjoin-set</span> x set)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\">element-of-set?</span> x set)\n      set\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> x set)))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">union-set</span> set1 set2)\n  (<span class=\"hljs-name\">fold-left</span>\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (union next) (<span class=\"hljs-name\">adjoin-set</span> next union))\n    set1\n    set2\n  )\n)</code></pre>\n<h2>Exercise 2.60</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">element-of-set?</span> x set)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cond</span></span> ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">null?</span></span> set) false)\n        ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">equal?</span></span> x (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> set)) true)\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">else</span></span> (<span class=\"hljs-name\">element-of-set?</span> x (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> set)))))</code></pre>\n<p>O(n), as unique one, but here list could be way longer, so less performant.</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">adjoin-set</span> x set)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> x set)\n)</code></pre>\n<p>O(1), lot better than unique one ( O(n)), because we not checking uniqueness.</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">union-set</span> set1 set2)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">append</span></span> set1 set2)\n)</code></pre>\n<p>Append has complexity O(n) = O(len(set1)) if I'm not mistaken. O(n), better than O(n2).</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">intersection-set</span> set1 set2)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cond</span></span> ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">or</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">null?</span></span> set1) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">null?</span></span> set2)) '())\n        ((<span class=\"hljs-name\">element-of-set?</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> set1) set2)        \n         (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> set1)\n               (<span class=\"hljs-name\">intersection-set</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> set1) set2)))\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">else</span></span> (<span class=\"hljs-name\">intersection-set</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> set1) set2))))</code></pre>\n<p>Intersection has same implementation and as a result same asymptotic complexity O(n2), but we expect n to be a lot larger.</p>\n<p>So, this approach would suit applications where we will do a lot of adjoins and unions, and not much checking for element or intersections.</p>\n<h2>Exercise 2.61</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">adjoin-set</span> x set)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cond</span></span> ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">or</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">null?</span></span> set) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">&#x3C;</span></span> x (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> set))) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> x set))\n        ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> x (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> set)) set)\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">else</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> set) (<span class=\"hljs-name\">adjoin-set</span> x (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> set))))))\n\n(<span class=\"hljs-name\">adjoin-set</span> <span class=\"hljs-number\">0</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">3</span>))\n(<span class=\"hljs-name\">adjoin-set</span> <span class=\"hljs-number\">1</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">3</span>))\n(<span class=\"hljs-name\">adjoin-set</span> <span class=\"hljs-number\">2</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">3</span>))\n(<span class=\"hljs-name\">adjoin-set</span> <span class=\"hljs-number\">4</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">3</span>))</code></pre>\n<h2>Exercise 2.62</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">union-set</span> set1 set2)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cond</span></span>\n        ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">null?</span></span> set1) set2)\n        ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">null?</span></span> set2) set1)\n        ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">&#x3C;</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> set1) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> set2)) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> set1) (<span class=\"hljs-name\">union-set</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> set1) set2)))\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">else</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> set2) (<span class=\"hljs-name\">union-set</span> set1 (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> set2))))\n    )\n)\n(<span class=\"hljs-name\">union-set</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span>) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">4</span>))\n(<span class=\"hljs-name\">union-set</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">3</span>) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">4</span>))</code></pre>\n<h2>Exercise 2.63</h2>\n<p>a. Yes, they give same results by traversing tree from left to right.</p>\n<p>b. One without <code>append</code> is better. For the second one <code>copy-to-list</code> is called for right subtree first, and then process conses current tree entry to result, then <code>copy-to-list</code> is called recursively to cons left subtree to the resulting list.</p>\n<p>In case with append, we compute <code>tree->list1</code> for both subtrees simultaniously, then iterate over result for left subtree inside <code>append</code>.  Append takes O(n) time, where n is length of left argument. It is processing half of nodes in each level in the tree, which is approximately O(n log(n)).</p>\n<h2>Exercise 2.64</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">list->tree</span> elements)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> (<span class=\"hljs-name\">partial-tree</span> elements (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">length</span></span> elements))))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">partial-tree</span> elts n)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> n <span class=\"hljs-number\">0</span>)\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> '() elts)\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">let</span></span> ((<span class=\"hljs-name\">left-size</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">quotient</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> n <span class=\"hljs-number\">1</span>) <span class=\"hljs-number\">2</span>)))\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">let</span></span> ((<span class=\"hljs-name\">left-result</span> (<span class=\"hljs-name\">partial-tree</span> elts left-size)))\n          (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">let</span></span> ((<span class=\"hljs-name\">left-tree</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> left-result))\n                (<span class=\"hljs-name\">non-left-elts</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> left-result))\n                (<span class=\"hljs-name\">right-size</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> n (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> left-size <span class=\"hljs-number\">1</span>))))\n            (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">let</span></span> ((<span class=\"hljs-name\">this-entry</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> non-left-elts))\n                  (<span class=\"hljs-name\">right-result</span> (<span class=\"hljs-name\">partial-tree</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> non-left-elts)\n                                              right-size)))\n              (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">let</span></span> ((<span class=\"hljs-name\">right-tree</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> right-result))\n                    (<span class=\"hljs-name\">remaining-elts</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> right-result)))\n                (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> (<span class=\"hljs-name\">make-tree</span> this-entry left-tree right-tree)\n                      remaining-elts))))))))</code></pre>\n<p><code>partial-tree</code> takes as arguments <code>elts</code> - list of elements, and integer <code>n</code> and returns pair whose <code>car</code> is balanced tree containing the first <code>n</code> elements of the list and <code>cdr</code> is the list of elements not included in the tree.</p>\n<p>If we need to construct tree with 0 elements, we just return empty tree and list provided to us. Otherwise, we will have tree with one element in root, and subtrees. Size of subtrees will be (n-1) / 2 (remaining amount of elements appriximately equally split for each subtree). First we build left subtree and obtain remaining elements. First of the remaining elements goes into root of our tree, the rest - to building right subtree. After we have both subtrees attached to tree with root element, we return it, and what was left in list of elements from building right subtree.</p>\n<p>So, when we have list <code>(1 3 5 7 9 11)</code>, we will have following tree:</p>\n<pre><code>(5\n    (1\n        ()\n        (3 () ())\n    )\n    (9\n        (7 () ())\n        (11 () ())\n    )\n)\n</code></pre>\n<p>b. What is the order of growth in the number of steps required by list->tree to convert a list of n elements?</p>\n<p>partial-tree is called once for n = 0. For n > 0, it is called X(n), where X(n) = 2 + X( (n-1) / 2) + X(n - 1 - (n-1)/2 = (n-1)/2) => X(n) = 2 + X((n-1)/2). If X is identity function - equation is true, so X(n) = n. Order of growth is linear.</p>\n<h2>Exercise 2.65</h2>\n<p>Finally coding and not writing essays. I'm bad at essays (probably need another textbook on this topic, but how to test myself?)</p>\n<p>I imagine we convert both trees to ordered lists, then use operations on ordered lists described in previous section, then convert back to trees. All of this operations take O(n).</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">union-set</span> s1 s2)\n  (<span class=\"hljs-name\">list->tree</span> (<span class=\"hljs-name\">list-union-set</span> (<span class=\"hljs-name\">tree->list2</span> s1) (<span class=\"hljs-name\">tree->list2</span>)))\n)</code></pre>\n<p>Same for intersection, just call different function. I'm even not going to test this code, as it will be more effort than writing it.</p>\n<h2>Exercise 2.66</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">lookup</span> given-key set-of-records)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cond</span></span> ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">null?</span></span> set-of-records) false)\n        ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> given-key (<span class=\"hljs-name\">key</span> (<span class=\"hljs-name\">entry</span> set-of-records)))\n         (<span class=\"hljs-name\">entry</span> set-of-records))\n        ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">&#x3C;</span></span> given-key (<span class=\"hljs-name\">key</span> (<span class=\"hljs-name\">entry</span> set-of-records)))\n         (<span class=\"hljs-name\">lookup</span> (<span class=\"hljs-name\">left-branch</span> set-of-records)))\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">else</span></span>\n         (<span class=\"hljs-name\">lookup</span> (<span class=\"hljs-name\">right-branch</span> set-of-records)))))</code></pre>"},{"id":"sicp2.3.2","title":"SICP 2.3.2 Symbolic differentiation","date":"2020-07-26","tags":["SICP"],"excerpt":"<p>I decided to skip picture language, because of technical reasons. Also, 2.3.1 I'll do in this post, because it was just to short. Here we get one step clother to build interpreter, not yet for programming language, but at least for mathematical expressions.</p>\n<p>And now we are in the <a href=\"https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book-Z-H-16.html#%25_sec_2.3\">middle of second chapter</a>.</p>","content":"<p>I decided to skip picture language, because of technical reasons. Also, 2.3.1 I'll do in this post, because it was just to short. Here we get one step clother to build interpreter, not yet for programming language, but at least for mathematical expressions.</p>\n<p>And now we are in the <a href=\"https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book-Z-H-16.html#%25_sec_2.3\">middle of second chapter</a>.</p>\n<h2>Exercise 2.54</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">equal?</span></span> l1 l2)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">pair?</span></span> l1)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">pair?</span></span> l2)\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">equal?</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> l1) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> l2))\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">equal?</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> l1) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> l2))\n        <span class=\"hljs-literal\">#f</span>\n      )\n      <span class=\"hljs-literal\">#f</span>\n    )\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">pair?</span></span> l2)\n      <span class=\"hljs-literal\">#f</span>\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">eq?</span></span> l1 l2) \n    )\n  )\n)\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">equal?</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span>) '(<span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span>))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">equal?</span></span> '() '())\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">equal?</span></span> <span class=\"hljs-symbol\">'a</span> <span class=\"hljs-symbol\">'a</span>)\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">equal?</span></span> <span class=\"hljs-symbol\">'a</span> <span class=\"hljs-symbol\">'b</span>)\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">equal?</span></span> '(<span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span>) '(list <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span>))</code></pre>\n<h2>Exercise 2.55</h2>\n<p><code>''abracadabra</code> is actually a <code>(quote (quote abracadabra))</code> which has value <code>(quote abracadabra)</code>, and <code>car</code> of it is <code>quote</code>.</p>\n<h2>Exercise 2.56</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">variable?</span> x) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">symbol?</span></span> x))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">same-variable?</span> v1 v2)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">and</span></span> (<span class=\"hljs-name\">variable?</span> v1) (<span class=\"hljs-name\">variable?</span> v2) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">eq?</span></span> v1 v2)))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">=number?</span> exp num)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">and</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">number?</span></span> exp) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> exp num)))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">make-sum</span> a1 a2)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cond</span></span> ((<span class=\"hljs-name\">=number?</span> a1 <span class=\"hljs-number\">0</span>) a2)\n        ((<span class=\"hljs-name\">=number?</span> a2 <span class=\"hljs-number\">0</span>) a1)\n        ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">and</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">number?</span></span> a1) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">number?</span></span> a2)) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> a1 a2))\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">else</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-symbol\">'+</span> a1 a2))))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">make-product</span> m1 m2)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cond</span></span> ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">or</span></span> (<span class=\"hljs-name\">=number?</span> m1 <span class=\"hljs-number\">0</span>) (<span class=\"hljs-name\">=number?</span> m2 <span class=\"hljs-number\">0</span>)) <span class=\"hljs-number\">0</span>)\n        ((<span class=\"hljs-name\">=number?</span> m1 <span class=\"hljs-number\">1</span>) m2)\n        ((<span class=\"hljs-name\">=number?</span> m2 <span class=\"hljs-number\">1</span>) m1)\n        ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">and</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">number?</span></span> m1) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">number?</span></span> m2)) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> m1 m2))\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">else</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-symbol\">'*</span> m1 m2))))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">sum?</span> x)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">and</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">pair?</span></span> x) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">eq?</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> x) <span class=\"hljs-symbol\">'+</span>)))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">addend</span> s) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cadr</span></span> s))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">augend</span> s) (<span class=\"hljs-name\">caddr</span> s))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">product?</span> x)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">and</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">pair?</span></span> x) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">eq?</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> x) <span class=\"hljs-symbol\">'*</span>)))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">multiplier</span> p) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cadr</span></span> p))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">multiplicand</span> p) (<span class=\"hljs-name\">caddr</span> p))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">exponentiation?</span> x)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">and</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">pair?</span></span> x) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">eq?</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> x) <span class=\"hljs-symbol\">'**</span>)))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">base</span> e) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cadr</span></span> e))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">exponent</span> e) (<span class=\"hljs-name\">caddr</span> e))\n \n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">make-exponentiation</span> base e)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cond</span></span> ((<span class=\"hljs-name\">=number?</span> e <span class=\"hljs-number\">0</span>) <span class=\"hljs-number\">1</span>)\n        ((<span class=\"hljs-name\">=number?</span> e <span class=\"hljs-number\">1</span>) base)\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">else</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-symbol\">'**</span> base e))))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">deriv</span> exp var)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cond</span></span> ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">number?</span></span> exp) <span class=\"hljs-number\">0</span>)\n        ((<span class=\"hljs-name\">variable?</span> exp)\n         (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\">same-variable?</span> exp var) <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">0</span>))\n        ((<span class=\"hljs-name\">sum?</span> exp)\n         (<span class=\"hljs-name\">make-sum</span> (<span class=\"hljs-name\">deriv</span> (<span class=\"hljs-name\">addend</span> exp) var)\n                   (<span class=\"hljs-name\">deriv</span> (<span class=\"hljs-name\">augend</span> exp) var)))\n        ((<span class=\"hljs-name\">product?</span> exp)\n         (<span class=\"hljs-name\">make-sum</span>\n           (<span class=\"hljs-name\">make-product</span> (<span class=\"hljs-name\">multiplier</span> exp)\n                         (<span class=\"hljs-name\">deriv</span> (<span class=\"hljs-name\">multiplicand</span> exp) var))\n           (<span class=\"hljs-name\">make-product</span> (<span class=\"hljs-name\">deriv</span> (<span class=\"hljs-name\">multiplier</span> exp) var)\n                         (<span class=\"hljs-name\">multiplicand</span> exp))))\n        ((<span class=\"hljs-name\">exponentiation?</span> exp)\n         (<span class=\"hljs-name\">make-product</span> (<span class=\"hljs-name\">exponent</span> exp) (<span class=\"hljs-name\">make-exponentiation</span> \n                (<span class=\"hljs-name\">base</span> exp)\n                (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> (<span class=\"hljs-name\">exponent</span> exp) <span class=\"hljs-number\">1</span>)\n            )))\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">else</span></span>\n         (<span class=\"hljs-name\">error</span> <span class=\"hljs-string\">\"unknown expression type -- DERIV\"</span> exp))))\n\n\n(<span class=\"hljs-name\">deriv</span> '(+ (** x <span class=\"hljs-number\">3</span>) (** x <span class=\"hljs-number\">2</span>)) <span class=\"hljs-symbol\">'x</span>)</code></pre>\n<h2>Exercise 2.57</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">make-sum</span> a1 a2)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cond</span></span> ((<span class=\"hljs-name\">=number?</span> a1 <span class=\"hljs-number\">0</span>) a2)\n        ((<span class=\"hljs-name\">=number?</span> a2 <span class=\"hljs-number\">0</span>) a1)\n        ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">and</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">number?</span></span> a1) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">number?</span></span> a2)) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> a1 a2))\n        ((<span class=\"hljs-name\">sum?</span> a2) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">append</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-symbol\">'+</span> a1) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> a2)))\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">else</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-symbol\">'+</span> a1 a2))))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">addend</span> s) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cadr</span></span> s))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">augend</span> s) \n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">null?</span></span> (<span class=\"hljs-name\">cdddr</span> s))\n    (<span class=\"hljs-name\">caddr</span> s)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> <span class=\"hljs-symbol\">'+</span> (<span class=\"hljs-name\">cddr</span> s))))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">make-product</span> m1 m2)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cond</span></span> ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">or</span></span> (<span class=\"hljs-name\">=number?</span> m1 <span class=\"hljs-number\">0</span>) (<span class=\"hljs-name\">=number?</span> m2 <span class=\"hljs-number\">0</span>)) <span class=\"hljs-number\">0</span>)\n        ((<span class=\"hljs-name\">=number?</span> m1 <span class=\"hljs-number\">1</span>) m2)\n        ((<span class=\"hljs-name\">=number?</span> m2 <span class=\"hljs-number\">1</span>) m1)\n        ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">and</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">number?</span></span> m1) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">number?</span></span> m2)) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> m1 m2))\n        ((<span class=\"hljs-name\">product?</span> m2) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">append</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-symbol\">'*</span> m1) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> m2)))\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">else</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-symbol\">'*</span> m1 m2))))\n\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">multiplier</span> p) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cadr</span></span> p))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">multiplicand</span> s) \n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">null?</span></span> (<span class=\"hljs-name\">cdddr</span> s))\n    (<span class=\"hljs-name\">caddr</span> s)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> <span class=\"hljs-symbol\">'*</span> (<span class=\"hljs-name\">cddr</span> s))))\n\n(<span class=\"hljs-name\">deriv</span> '(+ x (* x x x) (** x <span class=\"hljs-number\">3</span>)) <span class=\"hljs-symbol\">'x</span>)\n<span class=\"hljs-comment\">;Value 30: (+ 1 (+ (* x (+ x x)) (* x x)) (* 3 (** x 2)))</span></code></pre>\n<h2>Exercise 2.58</h2>\n<p>So, we want this to work:</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\">deriv</span> '(x + x**2 + <span class=\"hljs-number\">3</span> * x**3) <span class=\"hljs-symbol\">'x</span>)</code></pre>\n<p>At first I wanted to add some parsing step that converts this to lisp, and then reread requirements, and found this: \"Can you design appropriate predicates, selectors, and constructors for this notation such that our derivative program still works?\"</p>\n<p>So, no transformation, this should be the format of data, and we need to change functions that work with it.</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">priority</span> sym)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cond</span></span> \n    ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">eq?</span></span> sym <span class=\"hljs-symbol\">'+</span>) <span class=\"hljs-number\">1</span>)\n    ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">eq?</span></span> sym <span class=\"hljs-symbol\">'*</span>) <span class=\"hljs-number\">2</span>)\n    ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">eq?</span></span> sym <span class=\"hljs-symbol\">'**</span>) <span class=\"hljs-number\">3</span>)\n    ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">number?</span></span> sym) <span class=\"hljs-number\">4</span>)\n    ((<span class=\"hljs-name\">variable?</span> sym) <span class=\"hljs-number\">4</span>)\n    ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">pair?</span></span> sym) <span class=\"hljs-number\">4</span>)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">else</span></span> (<span class=\"hljs-name\">error</span> <span class=\"hljs-string\">\"unknown symbol --priority\"</span> sym))\n  )\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">least-priority-operation</span> exp)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">iter</span> op min-pr exp)\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">null?</span></span> exp)\n            op\n            (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">let</span></span> ((<span class=\"hljs-name\">np</span> (<span class=\"hljs-name\">priority</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> exp))))\n                (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">&#x3C;</span></span> np min-pr)\n                    (<span class=\"hljs-name\">iter</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> exp) np (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> exp))\n                    (<span class=\"hljs-name\">iter</span> op min-pr (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> exp))\n                )\n            )\n        )\n    )\n    (<span class=\"hljs-name\">iter</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> exp) (<span class=\"hljs-name\">priority</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> exp)) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> exp))\n)\n\n(<span class=\"hljs-name\">least-priority-operation</span> '(x + x**2 + <span class=\"hljs-number\">3</span> * x**3))\n(<span class=\"hljs-name\">least-priority-operation</span> '(x * y ** <span class=\"hljs-number\">2</span>))\n(<span class=\"hljs-name\">least-priority-operation</span> '(y ** <span class=\"hljs-number\">2</span>))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">unwrap</span> val) \n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">and</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">pair?</span></span> val) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">null?</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> val)))\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> val)\n        val\n    )\n)\n\n<span class=\"hljs-comment\">; Return part of expression before first appearance of given symbol</span>\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">before</span> sym exp)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">or</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">null?</span></span> exp) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">eq?</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> exp) sym))\n        '()\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span>\n            (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> exp)\n            (<span class=\"hljs-name\">before</span> sym (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> exp))\n        )\n    )\n)\n\n(<span class=\"hljs-name\">before</span> <span class=\"hljs-symbol\">'+</span> '(y ** <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">3</span>))\n\n<span class=\"hljs-comment\">; Return part of expression after symbol</span>\n<span class=\"hljs-comment\">; BTW, for division to work properly we need to take last occurence here, but </span>\n<span class=\"hljs-comment\">; as we don't have division - I'll leave it with first</span>\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">after</span> sym exp)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">null?</span></span> exp)\n        '()\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">eq?</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> exp) sym)\n            (<span class=\"hljs-name\">unwrap</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> exp))\n            (<span class=\"hljs-name\">after</span> sym (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> exp))\n        )\n    )\n)\n\n(<span class=\"hljs-name\">after</span> <span class=\"hljs-symbol\">'+</span> '(y ** <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">3</span>))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">make-sum</span> a1 a2)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cond</span></span> ((<span class=\"hljs-name\">=number?</span> a1 <span class=\"hljs-number\">0</span>) a2)\n        ((<span class=\"hljs-name\">=number?</span> a2 <span class=\"hljs-number\">0</span>) a1)\n        ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">and</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">number?</span></span> a1) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">number?</span></span> a2)) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> a1 a2))\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">else</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> a1 <span class=\"hljs-symbol\">'+</span> a2))))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">make-product</span> m1 m2)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cond</span></span> ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">or</span></span> (<span class=\"hljs-name\">=number?</span> m1 <span class=\"hljs-number\">0</span>) (<span class=\"hljs-name\">=number?</span> m2 <span class=\"hljs-number\">0</span>)) <span class=\"hljs-number\">0</span>)\n        ((<span class=\"hljs-name\">=number?</span> m1 <span class=\"hljs-number\">1</span>) m2)\n        ((<span class=\"hljs-name\">=number?</span> m2 <span class=\"hljs-number\">1</span>) m1)\n        ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">and</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">number?</span></span> m1) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">number?</span></span> m2)) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> m1 m2))\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">else</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> m1 <span class=\"hljs-symbol\">'*</span> m2))))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">sum?</span> x)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">and</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">pair?</span></span> x) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">eq?</span></span> (<span class=\"hljs-name\">least-priority-operation</span> x) <span class=\"hljs-symbol\">'+</span>)))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">addend</span> s) (<span class=\"hljs-name\">unwrap</span> (<span class=\"hljs-name\">before</span> <span class=\"hljs-symbol\">'+</span> s)))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">augend</span> s) (<span class=\"hljs-name\">after</span> <span class=\"hljs-symbol\">'+</span> s))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">product?</span> x)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">and</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">pair?</span></span> x) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">eq?</span></span> (<span class=\"hljs-name\">least-priority-operation</span> x) <span class=\"hljs-symbol\">'*</span>)))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">multiplier</span> p) (<span class=\"hljs-name\">unwrap</span> (<span class=\"hljs-name\">before</span> <span class=\"hljs-symbol\">'*</span> p)))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">multiplicand</span> p) (<span class=\"hljs-name\">after</span> <span class=\"hljs-symbol\">'*</span> p))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">exponentiation?</span> x)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">and</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">pair?</span></span> x) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">eq?</span></span> (<span class=\"hljs-name\">least-priority-operation</span> x) <span class=\"hljs-symbol\">'**</span>)))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">base</span> e) (<span class=\"hljs-name\">unwrap</span> (<span class=\"hljs-name\">before</span> <span class=\"hljs-symbol\">'**</span> e)))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">exponent</span> e) (<span class=\"hljs-name\">after</span> <span class=\"hljs-symbol\">'**</span> e))\n \n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">make-exponentiation</span> base e)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cond</span></span> ((<span class=\"hljs-name\">=number?</span> e <span class=\"hljs-number\">0</span>) <span class=\"hljs-number\">1</span>)\n        ((<span class=\"hljs-name\">=number?</span> e <span class=\"hljs-number\">1</span>) base)\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">else</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> base <span class=\"hljs-symbol\">'**</span> e))))\n\n(<span class=\"hljs-name\">deriv</span> '(x + x ** <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">3</span> * x ** <span class=\"hljs-number\">3</span>) <span class=\"hljs-symbol\">'x</span>)</code></pre>\n<p>This is rather ugly (I don't like <code>before</code>, <code>after</code>, <code>unwrap</code> etc., it does not seem very performant to use them), but I see we will have another example Symbolic Algebra later, maybe there will be a chance to make it better.</p>"},{"id":"sicp2.2.3","title":"SICP 2.2.3 Sequences as Conventional Interfaces","date":"2020-07-23","tags":["SICP"],"excerpt":"<p>Here we become skilled in list manipulation and build a set of useful subroutines.</p>","content":"<p>Here we become skilled in list manipulation and build a set of useful subroutines.</p>\n<h2>Exercise 2.33</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">accumulate</span> op initial sequence)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">null?</span></span> sequence)\n      initial\n      (<span class=\"hljs-name\">op</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> sequence)\n          (<span class=\"hljs-name\">accumulate</span> op initial (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> sequence)))))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">map</span></span> p sequence)\n  (<span class=\"hljs-name\">accumulate</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (x y) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> (<span class=\"hljs-name\">p</span> x) y)) nil sequence))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">map</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (x) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> <span class=\"hljs-number\">1</span> x)) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">3</span>))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">append</span></span> seq1 seq2)\n  (<span class=\"hljs-name\">accumulate</span> cons seq2 seq1))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">append</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">3</span>) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">4</span> <span class=\"hljs-number\">5</span>))\n\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">length</span></span> sequence)\n  (<span class=\"hljs-name\">accumulate</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (x y) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> <span class=\"hljs-number\">1</span> y)) <span class=\"hljs-number\">0</span> sequence))</code></pre>\n<h2>Exercise 2.34</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">horner-eval</span> x coefficient-sequence)\n  (<span class=\"hljs-name\">accumulate</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (this-coeff higher-terms) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> this-coeff (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> higher-terms x)))\n              <span class=\"hljs-number\">0</span>\n              coefficient-sequence))\n\n(<span class=\"hljs-name\">horner-eval</span> <span class=\"hljs-number\">2</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">5</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">1</span>))\n<span class=\"hljs-comment\">; 79</span></code></pre>\n<h2>Exercise 2.35</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">identity</span> x) x)\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">count-leaves</span> t)\n  (<span class=\"hljs-name\">accumulate</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (head tail)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">pair?</span></span> head) (<span class=\"hljs-name\">count-leaves</span> head) <span class=\"hljs-number\">1</span>) tail)\n  ) <span class=\"hljs-number\">0</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">map</span></span> identity t)))</code></pre>\n<p>Don't know why map is here...</p>\n<h2>Exercise 2.36</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">accumulate-n</span> op init seqs)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">null?</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> seqs))\n      nil\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> (<span class=\"hljs-name\">accumulate</span> op init (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">map</span></span> car seqs))\n            (<span class=\"hljs-name\">accumulate-n</span> op init (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">map</span></span> cdr seqs)))))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> s (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">3</span>) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">4</span> <span class=\"hljs-number\">5</span> <span class=\"hljs-number\">6</span>) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">7</span> <span class=\"hljs-number\">8</span> <span class=\"hljs-number\">9</span>) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">10</span> <span class=\"hljs-number\">11</span> <span class=\"hljs-number\">12</span>)))\n(<span class=\"hljs-name\">accumulate-n</span> + <span class=\"hljs-number\">0</span> s)</code></pre>\n<h2>Exercise 2.37</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">dot-product</span> v w)\n  (<span class=\"hljs-name\">accumulate</span> + <span class=\"hljs-number\">0</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">map</span></span> * v w)))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">matrix-*-vector</span> m v)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">map</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (m-row) (<span class=\"hljs-name\">dot-product</span> m-row v)) m))\n\n(<span class=\"hljs-name\">matrix-*-vector</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">-1</span>) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">0</span>)) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">0</span>))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">transpose</span> mat)\n  (<span class=\"hljs-name\">accumulate-n</span> cons nil mat))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">matrix-*-matrix</span> m n)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">let</span></span> ((<span class=\"hljs-name\">cols</span> (<span class=\"hljs-name\">transpose</span> n)))\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">map</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (m-row)\n           (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">map</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (n-col)\n                  (<span class=\"hljs-name\">dot-product</span> m-row n-col)\n                )\n            cols\n           )\n         ) m)))</code></pre>\n<h2>Exercise 2.38</h2>\n<p>I guess, if operation is commutative and associative, then it does not matter which fold to use, otherwise it matters.</p>\n<h2>Exercise 2.39</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">reverse</span></span> sequence)\n  (<span class=\"hljs-name\">fold-right</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (x y) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">append</span></span> y (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> x))) nil sequence))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">reverse</span></span> sequence)\n  (<span class=\"hljs-name\">fold-left</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (x y) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> y x)) nil sequence))</code></pre>\n<h1>Exercise 2.40</h1>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">enumerate-interval</span> low high)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">></span></span> low high)\n      nil\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> low (<span class=\"hljs-name\">enumerate-interval</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> low <span class=\"hljs-number\">1</span>) high))))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">flatmap</span> proc seq)\n  (<span class=\"hljs-name\">accumulate</span> append nil (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">map</span></span> proc seq)))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">unique-pairs</span> n)\n  (<span class=\"hljs-name\">flatmap</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (i)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">map</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (j) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> i j)) (<span class=\"hljs-name\">enumerate-interval</span> <span class=\"hljs-number\">1</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> i <span class=\"hljs-number\">1</span>)))\n  ) (<span class=\"hljs-name\">enumerate-interval</span> <span class=\"hljs-number\">2</span> n))\n)\n(<span class=\"hljs-name\">unique-pairs</span> <span class=\"hljs-number\">5</span>)\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">any</span> l) \n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">null?</span></span> l)\n    <span class=\"hljs-literal\">#f</span>\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> l)\n      <span class=\"hljs-literal\">#t</span>\n      (<span class=\"hljs-name\">any</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> l))\n    )\n  )\n)\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">prime?</span> n)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">divisor?</span> x) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">remainder</span></span> n x) <span class=\"hljs-number\">0</span>))\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">not</span></span> (<span class=\"hljs-name\">any</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">map</span></span> divisor? (<span class=\"hljs-name\">enumerate-interval</span> <span class=\"hljs-number\">2</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">truncate</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> n <span class=\"hljs-number\">2</span>))))))\n)\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">test-prime</span>)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">map</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (n) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> n (<span class=\"hljs-name\">prime?</span> n))) (<span class=\"hljs-name\">enumerate-interval</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">20</span>))\n)\n(<span class=\"hljs-name\">test-prime</span>)\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">prime-sum-pairs</span> n)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">prime-sum?</span> pair)\n      (<span class=\"hljs-name\">prime?</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> pair) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cadr</span></span> pair))))\n\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">make-pair-sum</span> pair)\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> pair) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cadr</span></span> pair) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> pair) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cadr</span></span> pair))))\n\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">map</span></span> make-pair-sum\n       (<span class=\"hljs-name\">filter</span> prime-sum? (<span class=\"hljs-name\">unique-pairs</span> n))))\n(<span class=\"hljs-name\">prime-sum-pairs</span> <span class=\"hljs-number\">6</span>)</code></pre>\n<h2>Exercise 2.41</h2>\n<pre><code class=\"hljs language-scheme\"><span class=\"hljs-comment\">; 1 &#x3C;= i &#x3C; j &#x3C; k &#x3C;= n</span>\n<span class=\"hljs-comment\">; i + j + k = s</span>\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">triplets</span> n s)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">build-triplet</span> i j)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">let</span></span> ((<span class=\"hljs-name\">k</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> s i j)))\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">and</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">&#x3C;</span></span> j k) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">&#x3C;=</span></span> k n))\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> i j k)\n        <span class=\"hljs-number\">0</span>\n      )\n    )\n  )\n  (<span class=\"hljs-name\">flatmap</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (i)\n    (<span class=\"hljs-name\">filter</span> pair? (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">map</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (j)\n        (<span class=\"hljs-name\">build-triplet</span> i j)\n    ) (<span class=\"hljs-name\">enumerate-interval</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> i <span class=\"hljs-number\">1</span>) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> n <span class=\"hljs-number\">1</span>)))))\n    (<span class=\"hljs-name\">enumerate-interval</span> <span class=\"hljs-number\">1</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> n <span class=\"hljs-number\">2</span>))\n  ))\n(<span class=\"hljs-name\">triplets</span> <span class=\"hljs-number\">4</span> <span class=\"hljs-number\">6</span>)</code></pre>\n<h2>Exercise 2.42</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> empty-board (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span>)) <span class=\"hljs-comment\">; or nil</span>\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">adjoin-position</span> new-row k rest-of-queens)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> new-row rest-of-queens)\n)\n<span class=\"hljs-comment\">; Check that predicate p(i, elem) is true at least for one of elements of list</span>\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">any</span> p l)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">iter</span> l i)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">null?</span></span> l) <span class=\"hljs-literal\">#f</span>\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\">p</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> l) i)\n        <span class=\"hljs-literal\">#t</span>\n        (<span class=\"hljs-name\">iter</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> l) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> i <span class=\"hljs-number\">1</span>))\n      )\n    )\n  )\n  (<span class=\"hljs-name\">iter</span> l <span class=\"hljs-number\">1</span>)\n)\n(<span class=\"hljs-name\">any</span> = (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">1</span>))\n(<span class=\"hljs-name\">any</span> = (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">4</span>))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">safe?</span> k positions)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">let</span></span> (\n    (<span class=\"hljs-name\">row</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> positions))\n    (<span class=\"hljs-name\">d1</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> positions) <span class=\"hljs-number\">1</span>))\n    (<span class=\"hljs-name\">d2</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> positions) <span class=\"hljs-number\">1</span>))\n  )\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">not</span></span> (<span class=\"hljs-name\">any</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (q i)\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">or</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> q row)\n            (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> d1 (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> q i <span class=\"hljs-number\">1</span>)) <span class=\"hljs-comment\">; i should be increased by 1 because we are in cdr of board</span>\n            (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> d2 (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> q i <span class=\"hljs-number\">1</span>))\n        )\n    ) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> positions)))\n  )\n)\n(<span class=\"hljs-name\">safe?</span> <span class=\"hljs-number\">0</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span>))\n(<span class=\"hljs-name\">safe?</span> <span class=\"hljs-number\">0</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">1</span>))\n(<span class=\"hljs-name\">safe?</span> <span class=\"hljs-number\">0</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">4</span> <span class=\"hljs-number\">2</span>))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">queens</span> board-size)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">queen-cols</span> k)  \n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> k <span class=\"hljs-number\">0</span>)\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> empty-board)\n        (<span class=\"hljs-name\">filter</span>\n         (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (positions) (<span class=\"hljs-name\">safe?</span> k positions))\n         (<span class=\"hljs-name\">flatmap</span>\n          (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (rest-of-queens)\n            (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">map</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (new-row)\n                   (<span class=\"hljs-name\">adjoin-position</span> new-row k rest-of-queens))\n                 (<span class=\"hljs-name\">enumerate-interval</span> <span class=\"hljs-number\">1</span> board-size)))\n          (<span class=\"hljs-name\">queen-cols</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> k <span class=\"hljs-number\">1</span>))))))\n  (<span class=\"hljs-name\">trace</span> queen-cols)\n  (<span class=\"hljs-name\">queen-cols</span> board-size))\n(<span class=\"hljs-name\">queens</span> <span class=\"hljs-number\">6</span>)\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">display-board</span> positions size)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">display-empty</span> n)\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">></span></span> n <span class=\"hljs-number\">0</span>) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">begin</span></span>\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">display</span></span> <span class=\"hljs-string\">\" .\"</span>)\n        (<span class=\"hljs-name\">display-empty</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> n <span class=\"hljs-number\">1</span>))\n      ))\n    )\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">display-row</span> q)\n        (<span class=\"hljs-name\">display-empty</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> q <span class=\"hljs-number\">1</span>))\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">display</span></span> <span class=\"hljs-string\">\" Q\"</span>)\n        (<span class=\"hljs-name\">display-empty</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> size q))\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">newline</span></span>)\n    )\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">for-each</span></span> display-row positions)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">newline</span></span>)\n)\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">test-queens</span> size)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">for-each</span></span>\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (b) (<span class=\"hljs-name\">display-board</span> b size))\n      (<span class=\"hljs-name\">queens</span> size)\n    )\n)\n(<span class=\"hljs-name\">test-queens</span> <span class=\"hljs-number\">6</span>)\n\n<span class=\"hljs-comment\">; Beautiful:</span>\n<span class=\"hljs-comment\">; . . . . Q .</span>\n<span class=\"hljs-comment\">; . . Q . . .</span>\n<span class=\"hljs-comment\">; Q . . . . .</span>\n<span class=\"hljs-comment\">; . . . . . Q</span>\n<span class=\"hljs-comment\">; . . . Q . .</span>\n<span class=\"hljs-comment\">; . Q . . . .</span>\n<span class=\"hljs-comment\">;</span>\n<span class=\"hljs-comment\">; . . . Q . .</span>\n<span class=\"hljs-comment\">; Q . . . . .</span>\n<span class=\"hljs-comment\">; . . . . Q .</span>\n<span class=\"hljs-comment\">; . Q . . . .</span>\n<span class=\"hljs-comment\">; . . . . . Q</span>\n<span class=\"hljs-comment\">; . . Q . . .</span>\n<span class=\"hljs-comment\">;</span>\n<span class=\"hljs-comment\">; . . Q . . .</span>\n<span class=\"hljs-comment\">; . . . . . Q</span>\n<span class=\"hljs-comment\">; . Q . . . .</span>\n<span class=\"hljs-comment\">; . . . . Q .</span>\n<span class=\"hljs-comment\">; Q . . . . .</span>\n<span class=\"hljs-comment\">; . . . Q . .</span>\n<span class=\"hljs-comment\">;</span>\n<span class=\"hljs-comment\">; . Q . . . .</span>\n<span class=\"hljs-comment\">; . . . Q . .</span>\n<span class=\"hljs-comment\">; . . . . . Q</span>\n<span class=\"hljs-comment\">; Q . . . . .</span>\n<span class=\"hljs-comment\">; . . Q . . .</span>\n<span class=\"hljs-comment\">; . . . . Q .</span></code></pre>\n<h2>Exercise 2.43</h2>\n<p>For size 0 basically running time is the same.</p>\n<p>For size 1, we call <code>(quen-cols 0)</code> once, check position 1 and return, same for Louis.</p>\n<p>For size 2, we call <code>(queen-cols 1)</code> once, check positions for next queen 1 and 2, and return. Louis calls (queen-cols 1) twice, because that is inside loop.</p>\n<p>For size 3, we call <code>(queen-cols 2)</code> once, check positions 1, 2 and 3, and return. Louis calls <code>(queens-cols 2)</code> 3 times, each of which calls <code>(queens-cols 1)</code> 2 times.</p>\n<p>So for us queens-cols is called <code>size</code> times, and for Louis <code>(factorial size)</code>. If our eight queens runs for time T, then his program will run 8!/8 T = 7! T = 5040T.</p>"},{"id":"sicp2.2.2","title":"SICP 2.2.2 Hierarchical structures","date":"2020-07-19","tags":["SICP"],"excerpt":"<p>AKA trees. Here I learned to debug Scheme a little bit, because I wrote code that not just worked from the first try.</p>\n<p>Also here some trivial exercises are skipped, because one with drawing I done on paper and won't upload it here because it is useless, and another is \"What would interpreter print\", which I guessed, tested with interpreter and it was right. If you want to have solution - ask your interpreter.</p>","content":"<p>AKA trees. Here I learned to debug Scheme a little bit, because I wrote code that not just worked from the first try.</p>\n<p>Also here some trivial exercises are skipped, because one with drawing I done on paper and won't upload it here because it is useless, and another is \"What would interpreter print\", which I guessed, tested with interpreter and it was right. If you want to have solution - ask your interpreter.</p>\n<h2>Exercise 2.25</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> l (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">3</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">5</span> <span class=\"hljs-number\">7</span>) <span class=\"hljs-number\">9</span>))\nl\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> l)))))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> l (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">7</span>)))\nl\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> l))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> l (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">1</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">2</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">3</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">4</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">5</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">6</span> <span class=\"hljs-number\">7</span>)))))))\nl\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> l))))))))))))</code></pre>\n<h2>Exercise 2.27</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> x (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span>) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">4</span>)))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">reverse</span></span> x)\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">deep-reverse</span> l)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">rev-el</span> el)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">pair?</span></span> el)\n      (<span class=\"hljs-name\">deep-reverse</span> el)\n      el\n    )\n  )\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">iter</span> src dst)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">null?</span></span> src)\n      dst\n      (<span class=\"hljs-name\">iter</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> src) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> (<span class=\"hljs-name\">rev-el</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> src)) dst))\n    )\n  )\n  (<span class=\"hljs-name\">iter</span> l nil)\n)</code></pre>\n<h2>Exercise 2.28</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">fringe</span> t)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">iter</span> src dst)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cond</span></span>\n      ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">null?</span></span> src) dst)\n      ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">pair?</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> src)) (<span class=\"hljs-name\">iter</span>\n         (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> src)\n         (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">append</span></span> (<span class=\"hljs-name\">iter</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> src) nil) dst)\n      ))\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">else</span></span> (<span class=\"hljs-name\">iter</span>\n          (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> src)\n          (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> src) dst)\n      ))\n    )\n  )\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">reverse</span></span> (<span class=\"hljs-name\">iter</span> t nil))\n)</code></pre>\n<h2>Exercise 2.29</h2>\n<p>Constructors and selectors:</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">make-mobile</span> left right)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> left right))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">left-branch</span> mobile)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> mobile))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">right-branch</span> mobile)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> mobile)))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">make-branch</span> length structure)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> length structure))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">branch-length</span> branch)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> branch))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">branch-structure</span> branch)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> branch)))</code></pre>\n<p>Test data:</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> m1 \n  (<span class=\"hljs-name\">make-mobile</span> \n    (<span class=\"hljs-name\">make-branch</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">10</span>)\n    (<span class=\"hljs-name\">make-branch</span> <span class=\"hljs-number\">1</span> \n        (<span class=\"hljs-name\">make-mobile</span> \n            (<span class=\"hljs-name\">make-branch</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">5</span>)\n            (<span class=\"hljs-name\">make-branch</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">5</span>)\n        )\n    )\n  )\n)\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> m2 \n    (<span class=\"hljs-name\">make-mobile</span>\n        (<span class=\"hljs-name\">make-branch</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">10</span>)\n        (<span class=\"hljs-name\">make-branch</span> <span class=\"hljs-number\">1</span> m1)\n    )\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> m3\n    (<span class=\"hljs-name\">make-mobile</span>\n        (<span class=\"hljs-name\">make-branch</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">10</span>)\n        (<span class=\"hljs-name\">make-branch</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">10</span>)\n    )\n)</code></pre>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">total-weight</span> mobile) \n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">pair?</span></span> mobile)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span>\n      (<span class=\"hljs-name\">total-weight</span> (<span class=\"hljs-name\">branch-structure</span> (<span class=\"hljs-name\">left-branch</span> mobile)))\n      (<span class=\"hljs-name\">total-weight</span> (<span class=\"hljs-name\">branch-structure</span> (<span class=\"hljs-name\">right-branch</span> mobile)))\n    )\n    mobile <span class=\"hljs-comment\">; if not pair - it should be just weight</span>\n  )\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">balanced</span> mobile)\n  <span class=\"hljs-comment\">; weight-b returns weight of mobile if it is balanced, otherwise - negative value</span>\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">weight-b</span> mobile)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">pair?</span></span> mobile)\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">let</span></span> ((<span class=\"hljs-name\">lb</span> (<span class=\"hljs-name\">weight-b</span> (<span class=\"hljs-name\">branch-structure</span> (<span class=\"hljs-name\">left-branch</span> mobile))))) <span class=\"hljs-comment\">; compute left balance</span>\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">&#x3C;</span></span> lb <span class=\"hljs-number\">0</span>)\n          <span class=\"hljs-number\">-1</span> <span class=\"hljs-comment\">; left submobile is not balanced, so this mobile too</span>\n          (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">let</span></span> ((<span class=\"hljs-name\">rb</span> (<span class=\"hljs-name\">weight-b</span> (<span class=\"hljs-name\">branch-structure</span> (<span class=\"hljs-name\">right-branch</span> mobile))))) <span class=\"hljs-comment\">; compute right balance</span>\n            (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">&#x3C;</span></span> rb <span class=\"hljs-number\">0</span>)\n              <span class=\"hljs-number\">-1</span> <span class=\"hljs-comment\">; right submobile is not balanced, so this mobile too</span>\n              (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span>\n                (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> lb (<span class=\"hljs-name\">branch-length</span> (<span class=\"hljs-name\">left-branch</span> mobile)))\n                (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> rb (<span class=\"hljs-name\">branch-length</span> (<span class=\"hljs-name\">right-branch</span> mobile)))\n              )\n                (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> lb rb) <span class=\"hljs-comment\">; finally, balanced case</span>\n                <span class=\"hljs-number\">-1</span> <span class=\"hljs-comment\">; submobiles are balanced, but apply different torques in this</span>\n              )\n            )\n          )\n        )\n      )\n      mobile <span class=\"hljs-comment\">; single weight is already balanced by itself</span>\n    )\n  )\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">></span></span> (<span class=\"hljs-name\">weight-b</span> mobile) <span class=\"hljs-number\">0</span>)\n)\n(<span class=\"hljs-name\">balanced</span> m1)\n(<span class=\"hljs-name\">balanced</span> m2)\n(<span class=\"hljs-name\">balanced</span> m3)</code></pre>\n<p>With <code>balanced</code> I was stuck, too many levels of nesting. As usual, I <a href=\"https://stackoverflow.com/questions/62962576/how-to-find-where-scheme-calls-integer-less\">asked on StackOverflow</a>, went to sleep and in the morning found bug, then someone answered my very obvious question.</p>\n<p>Part d. If we have such constructors:</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">make-mobile</span> left right)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> left right))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">make-branch</span> length structure)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> length structure))</code></pre>\n<p>We only have to change such selectors:</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">right-branch</span> mobile)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> mobile))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">branch-structure</span> branch)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> branch))</code></pre>\n<p>Layers of abstraction are useful (sometimes).</p>\n<h2>Exercise 2.30</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">square-tree</span> t) \n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cond</span></span> \n    ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">null?</span></span> t) nil)\n    ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">pair?</span></span> t) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> (<span class=\"hljs-name\">square-tree</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> t)) (<span class=\"hljs-name\">square-tree</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> t))))\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">else</span></span> (<span class=\"hljs-name\">sqr</span> t))\n  )\n)\n\n(<span class=\"hljs-name\">square-tree</span>\n (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">1</span>\n       (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">2</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">4</span>) <span class=\"hljs-number\">5</span>)\n       (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">6</span> <span class=\"hljs-number\">7</span>)))</code></pre>\n<p>Version with map:</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">square-tree</span> t) \n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">pair?</span></span> t)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">map</span></span> square-tree t)\n    (<span class=\"hljs-name\">sqr</span> t)\n  )\n)</code></pre>\n<h2>Exercise 2.31</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">tree-map</span> f t) \n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">pair?</span></span> t)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">map</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (t) (<span class=\"hljs-name\">tree-map</span> f t)) t)\n    (<span class=\"hljs-name\">f</span> t)\n  )\n)\n\n(<span class=\"hljs-name\">tree-map</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (x) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> x <span class=\"hljs-number\">1</span>))\n (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">1</span>\n       (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">2</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">4</span>) <span class=\"hljs-number\">5</span>)\n       (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">6</span> <span class=\"hljs-number\">7</span>)))</code></pre>\n<h2>Exercise 2.32</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">subsets</span> s)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">null?</span></span> s)\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> nil)\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">let</span></span> ((<span class=\"hljs-name\">rest</span> (<span class=\"hljs-name\">subsets</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> s))))\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">append</span></span>\n          rest\n          (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">map</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (ss) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> s) ss)) rest)\n        ))))</code></pre>\n<p>Emtpy set has only one subset - empty. Otherwise each element in the set doubles number of elements in the set of subsets - it creates subsets that are just like subsets without that element, except that they include it.</p>"},{"id":"sicp2.2.1","title":"SICP 2.2.1 Sequences","date":"2020-07-16","tags":["SICP"],"excerpt":"<p>Finally, the thing Lisp was named after.</p>\n<p>Fix MIT Scheme to be like SICP scheme using this:</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> nil '())</code></pre>","content":"<p>Finally, the thing Lisp was named after.</p>\n<p>Fix MIT Scheme to be like SICP scheme using this:</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> nil '())</code></pre>\n<h2>Exercise 2.17</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">last-pair</span> l)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">null?</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> l))\n    l\n    (<span class=\"hljs-name\">last-pair</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> l))\n  )\n)\n(<span class=\"hljs-name\">last-pair</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">23</span> <span class=\"hljs-number\">72</span> <span class=\"hljs-number\">149</span> <span class=\"hljs-number\">34</span>))</code></pre>\n<h2>Exercise 2.18</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">reverse</span></span> l)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">iter</span> src dst)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">null?</span></span> src)\n      dst\n      (<span class=\"hljs-name\">iter</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> src) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> src) dst))\n    )\n  )\n  (<span class=\"hljs-name\">iter</span> l nil)\n)\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">reverse</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">4</span>))</code></pre>\n<h2>Exercise 2.19</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> us-coins (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">50</span> <span class=\"hljs-number\">25</span> <span class=\"hljs-number\">10</span> <span class=\"hljs-number\">5</span> <span class=\"hljs-number\">1</span>))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> uk-coins (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">100</span> <span class=\"hljs-number\">50</span> <span class=\"hljs-number\">20</span> <span class=\"hljs-number\">10</span> <span class=\"hljs-number\">5</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">0.5</span>))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">cc</span> amount coin-values)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cond</span></span> ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> amount <span class=\"hljs-number\">0</span>) <span class=\"hljs-number\">1</span>)\n        ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">or</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">&#x3C;</span></span> amount <span class=\"hljs-number\">0</span>) (<span class=\"hljs-name\">no-more?</span> coin-values)) <span class=\"hljs-number\">0</span>)\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">else</span></span>\n         (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> (<span class=\"hljs-name\">cc</span> amount\n                (<span class=\"hljs-name\">except-first-denomination</span> coin-values))\n            (<span class=\"hljs-name\">cc</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> amount\n                   (<span class=\"hljs-name\">first-denomination</span> coin-values))\n                coin-values)))))</code></pre>\n<p>Answer:</p>\n<pre><code class=\"hljs language-scheme\">  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> no-more? null?)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> except-first-denomination cdr)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> first-denomination car)</code></pre>\n<p>Order does not matter, because we just sum amount without each element, and with.</p>\n<h2>Exercise 2.20</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">same-parity</span> n . l)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">matches</span> x) \n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">remainder</span></span> n <span class=\"hljs-number\">2</span>) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">remainder</span></span> x <span class=\"hljs-number\">2</span>))\n  )\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">iter</span> l) \n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">null?</span></span> l)\n      nil\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\">matches</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> l))\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> l) (<span class=\"hljs-name\">iter</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> l)))\n        (<span class=\"hljs-name\">iter</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> l))\n      )\n    )\n  )\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> n (<span class=\"hljs-name\">iter</span> l))\n)</code></pre>\n<h2>Exercise 2.21</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">sqr</span> x) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> x x))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">square-list</span> items)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">null?</span></span> items)\n      nil\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> (<span class=\"hljs-name\">sqr</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> items)) (<span class=\"hljs-name\">square-list</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> items)))))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">square-list</span> items)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">map</span></span> sqr items))</code></pre>\n<h2>Exercise 2.22</h2>\n<p>What is <code>cons</code>-ed into list first will be at the end of list.</p>\n<p>If we swap arguments to cons, then we will have the same hierarchy (what was consed first is at deepest pair), just link to the next pair is first element of pair, and value is second. To work with such structure properly, we will have to swap  car and cdr.</p>\n<h2>Exercise 2.23</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">for-each</span></span> f items)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">null?</span></span> items)\n    <span class=\"hljs-number\">0</span>\n    ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> () <span class=\"hljs-comment\">; Need some proper way to write blocks of code in if</span>\n      (<span class=\"hljs-name\">f</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> items))\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">for-each</span></span> f (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> items))\n    ))\n  )\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">for-each</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (x) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">newline</span></span>) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">display</span></span> x))\n          (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">57</span> <span class=\"hljs-number\">321</span> <span class=\"hljs-number\">88</span>))</code></pre>"},{"id":"sicp2.1.4","title":"SICP 2.1.4: Interval arithmetic","date":"2020-07-15","tags":["SICP"],"excerpt":"<p>Less mind-blowing ideas, more practice.</p>","content":"<p>Less mind-blowing ideas, more practice.</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">add-interval</span> x y)\n  (<span class=\"hljs-name\">make-interval</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> (<span class=\"hljs-name\">lower-bound</span> x) (<span class=\"hljs-name\">lower-bound</span> y))\n                 (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> (<span class=\"hljs-name\">upper-bound</span> x) (<span class=\"hljs-name\">upper-bound</span> y))))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">mul-interval</span> x y)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">let</span></span> ((<span class=\"hljs-name\">p1</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> (<span class=\"hljs-name\">lower-bound</span> x) (<span class=\"hljs-name\">lower-bound</span> y)))\n        (<span class=\"hljs-name\">p2</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> (<span class=\"hljs-name\">lower-bound</span> x) (<span class=\"hljs-name\">upper-bound</span> y)))\n        (<span class=\"hljs-name\">p3</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> (<span class=\"hljs-name\">upper-bound</span> x) (<span class=\"hljs-name\">lower-bound</span> y)))\n        (<span class=\"hljs-name\">p4</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> (<span class=\"hljs-name\">upper-bound</span> x) (<span class=\"hljs-name\">upper-bound</span> y))))\n    (<span class=\"hljs-name\">make-interval</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">min</span></span> p1 p2 p3 p4)\n                   (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">max</span></span> p1 p2 p3 p4))))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">div-interval</span> x y)\n  (<span class=\"hljs-name\">mul-interval</span> x \n                (<span class=\"hljs-name\">make-interval</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> <span class=\"hljs-number\">1.0</span> (<span class=\"hljs-name\">upper-bound</span> y))\n                               (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> <span class=\"hljs-number\">1.0</span> (<span class=\"hljs-name\">lower-bound</span> y)))))</code></pre>\n<h2>Exercise 2.7</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">make-interval</span> a b) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> a b))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">lower-bound</span> i)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">min</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> i) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> i)))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">upper-bound</span> i)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">max</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> i) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> i)))</code></pre>\n<h2>Exercise 2.8</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">sub-interval</span> x y)\n  (<span class=\"hljs-name\">make-interval</span> \n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> (<span class=\"hljs-name\">lower-bound</span> x) (<span class=\"hljs-name\">upper-bound</span> y))\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> (<span class=\"hljs-name\">upper-bound</span> x) (<span class=\"hljs-name\">lower-bound</span> y))))</code></pre>\n<h2>Exercise 2.9</h2>\n<p>Let's have interval (a1,b1) of width w1 = b1 - a1. And similar interval (a2,b2) of width w2 = b2 - a2.</p>\n<p>(a1,b1) + (a2,b2) = (a1 + a2, b1+b2)\nwidth of this interval is (b1+b2) - (a1+a2) = (b1 - a1) + (b2-a2) = w1+w2</p>\n<p>(a1,b1) - (a2,b2) = (a1 - b2, b1-a2)</p>\n<p>width of this interval is (b1-a2) - (a1-b2) = b1 - a2 - a1 + b2 = (b1 - a1) + (b2-a2) = w1+w2</p>\n<p>Multiplication counterexample:</p>\n<p>Let's multiply two intervals of width 1:\n(1,2) * (1,2) = (1, 3)\nGives interval of width 3.</p>\n<p>Let's multiply another two intervals of width 1:\n(1,2) * (2,3) = (2, 6)</p>\n<p>Gives interval of width 6. Width of multiplication could not be just function of width of arguments, because it's gives different results for the same inputs. It must be function of something else.</p>\n<h2>Exercise 2.10</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">spans-zero</span> i)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">and</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">&#x3C;=</span></span> (<span class=\"hljs-name\">lower-bound</span> i) <span class=\"hljs-number\">0</span>) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">>=</span></span> (<span class=\"hljs-name\">upper-bound</span> i) <span class=\"hljs-number\">0</span>))\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">div-interval</span> x y)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\">spans-zero</span> y)\n    (<span class=\"hljs-name\">error</span> <span class=\"hljs-string\">\"Could not divide by interval that spans zero\"</span>)\n    (<span class=\"hljs-name\">mul-interval</span> x \n                (<span class=\"hljs-name\">make-interval</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> <span class=\"hljs-number\">1.0</span> (<span class=\"hljs-name\">upper-bound</span> y))\n                               (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> <span class=\"hljs-number\">1.0</span> (<span class=\"hljs-name\">lower-bound</span> y))))\n  )\n)</code></pre>\n<h2>Exercise 2.11</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">random-interval</span>) \n  (<span class=\"hljs-name\">make-interval</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> (<span class=\"hljs-name\">random</span> <span class=\"hljs-number\">11</span>) <span class=\"hljs-number\">5</span>) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> (<span class=\"hljs-name\">random</span> <span class=\"hljs-number\">11</span>) <span class=\"hljs-number\">5</span>))\n)\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">eq-interval</span> a b)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">and</span></span>\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> (<span class=\"hljs-name\">lower-bound</span> a) (<span class=\"hljs-name\">lower-bound</span> b))\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> (<span class=\"hljs-name\">upper-bound</span> a) (<span class=\"hljs-name\">upper-bound</span> b))\n  )\n)\n\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">test-mul-interval</span>) \n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">bad-pair</span> i1 i2) \n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">display</span></span> <span class=\"hljs-string\">\"Mul-iterval result differs for \"</span>)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">display</span></span> i1)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">display</span></span> i2)\n    <span class=\"hljs-literal\">#f</span>\n  )\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">try</span> n)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> n <span class=\"hljs-number\">0</span>) <span class=\"hljs-literal\">#t</span>\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">let</span></span> (\n            (<span class=\"hljs-name\">i1</span> (<span class=\"hljs-name\">random-interval</span>))\n            (<span class=\"hljs-name\">i2</span> (<span class=\"hljs-name\">random-interval</span>))\n        )\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\">eq-interval</span> (<span class=\"hljs-name\">mul-interval2</span> i1 i2) (<span class=\"hljs-name\">mul-interval</span> i1 i2))\n          (<span class=\"hljs-name\">try</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> n <span class=\"hljs-number\">1</span>)) \n          (<span class=\"hljs-name\">bad-pair</span> i1 i2)\n        )\n      )\n    )\n  )\n  (<span class=\"hljs-name\">try</span> <span class=\"hljs-number\">100</span>)\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">mul-interval2</span> x y)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">let</span></span> (\n    (<span class=\"hljs-name\">lx</span> (<span class=\"hljs-name\">lower-bound</span> x))\n    (<span class=\"hljs-name\">ux</span> (<span class=\"hljs-name\">upper-bound</span> x))\n    (<span class=\"hljs-name\">ly</span> (<span class=\"hljs-name\">lower-bound</span> y))\n    (<span class=\"hljs-name\">uy</span> (<span class=\"hljs-name\">upper-bound</span> y))\n  )\n\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cond</span></span> \n    ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">and</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">&#x3C;</span></span> ux <span class=\"hljs-number\">0</span>) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">&#x3C;</span></span> uy <span class=\"hljs-number\">0</span>))\n     (<span class=\"hljs-name\">make-interval</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> ux uy) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> lx ly)))\n\n    ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">and</span></span> (<span class=\"hljs-name\">spans-zero</span> x) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">&#x3C;</span></span> uy <span class=\"hljs-number\">0</span>))\n     (<span class=\"hljs-name\">make-interval</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> ux ly) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> lx ly)))\n\n    ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">and</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">></span></span> lx <span class=\"hljs-number\">0</span>) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">&#x3C;</span></span> uy <span class=\"hljs-number\">0</span>))\n     (<span class=\"hljs-name\">make-interval</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> ux ly) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> lx uy)))\n\n    ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">and</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">&#x3C;</span></span> ux <span class=\"hljs-number\">0</span>) (<span class=\"hljs-name\">spans-zero</span> y))\n     (<span class=\"hljs-name\">make-interval</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> lx uy) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> lx ly)))\n\n    ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">and</span></span> (<span class=\"hljs-name\">spans-zero</span> x) (<span class=\"hljs-name\">spans-zero</span> y))\n     (<span class=\"hljs-name\">make-interval</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">min</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> ux ly) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> lx uy)) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">max</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> lx ly) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> ux uy))))\n\n    ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">and</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">></span></span> lx <span class=\"hljs-number\">0</span>) (<span class=\"hljs-name\">spans-zero</span> y))\n     (<span class=\"hljs-name\">make-interval</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> ux ly) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> ux uy)))\n\n    ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">and</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">&#x3C;</span></span> ux <span class=\"hljs-number\">0</span>) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">></span></span> ly <span class=\"hljs-number\">0</span>))\n     (<span class=\"hljs-name\">make-interval</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> lx uy) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> ux ly)))\n\n    ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">and</span></span> (<span class=\"hljs-name\">spans-zero</span> x) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">></span></span> ly <span class=\"hljs-number\">0</span>))\n     (<span class=\"hljs-name\">make-interval</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> lx uy) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> ux uy)))\n\n    ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">and</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">></span></span> lx <span class=\"hljs-number\">0</span>) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">></span></span> ly <span class=\"hljs-number\">0</span>))\n     (<span class=\"hljs-name\">make-interval</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> lx ly) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> ux uy)))\n\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">else</span></span> (<span class=\"hljs-name\">error</span> <span class=\"hljs-string\">\"impossible case\"</span>))\n  ))\n)</code></pre>\n<p>Wow this took a lot of effort. Good that they teached to use let, without it secod version of mul-interval would be huge.</p>\n<p>And this required lots of attention, but somehow my code passed the test from the first try.</p>\n<h2>Exercise 2.12</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">make-center-width</span> c w)\n  (<span class=\"hljs-name\">make-interval</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> c w) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> c w)))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">center</span> i)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> (<span class=\"hljs-name\">lower-bound</span> i) (<span class=\"hljs-name\">upper-bound</span> i)) <span class=\"hljs-number\">2</span>))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">width</span> i)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> (<span class=\"hljs-name\">upper-bound</span> i) (<span class=\"hljs-name\">lower-bound</span> i)) <span class=\"hljs-number\">2</span>))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">make-center-percent</span> c p)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">let</span></span> ((<span class=\"hljs-name\">w</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> p <span class=\"hljs-number\">0.01</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">abs</span></span> c))))\n  (<span class=\"hljs-name\">make-interval</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> c w) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> c w))))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">percent</span> i)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> <span class=\"hljs-number\">100</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> (<span class=\"hljs-name\">width</span> i) (<span class=\"hljs-name\">center</span> i)))\n)</code></pre>\n<h2>Exercise 2.13</h2>\n<p>It's approximately addition.</p>\n<h2>Exercise 2.14</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">par1</span> r1 r2)\n  (<span class=\"hljs-name\">div-interval</span> (<span class=\"hljs-name\">mul-interval</span> r1 r2)\n                (<span class=\"hljs-name\">add-interval</span> r1 r2)))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">par2</span> r1 r2)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">let</span></span> ((<span class=\"hljs-name\">one</span> (<span class=\"hljs-name\">make-interval</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">1</span>))) \n    (<span class=\"hljs-name\">div-interval</span> one\n                  (<span class=\"hljs-name\">add-interval</span> (<span class=\"hljs-name\">div-interval</span> one r1)\n                                (<span class=\"hljs-name\">div-interval</span> one r2)))))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> a (<span class=\"hljs-name\">make-center-percent</span> <span class=\"hljs-number\">100</span> <span class=\"hljs-number\">1</span>))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> b (<span class=\"hljs-name\">make-center-percent</span> <span class=\"hljs-number\">200</span> <span class=\"hljs-number\">1</span>))\n\n\n(<span class=\"hljs-name\">center</span> (<span class=\"hljs-name\">par1</span> a b))\n(<span class=\"hljs-name\">center</span> (<span class=\"hljs-name\">par2</span> a b))\n\n(<span class=\"hljs-name\">percent</span> (<span class=\"hljs-name\">par1</span> a b))\n(<span class=\"hljs-name\">percent</span> (<span class=\"hljs-name\">par2</span> a b))</code></pre>\n<h2>Exercise 2.15</h2>\n<p>Every operation on intervals with non zero width increases width of result.</p>\n<p>In par1 program does 3 operations in which both intervals have non zero widht, and par2 program does only addition, all the rest are operations with interval of zero widht.</p>\n<h2>Exercise 2.16</h2>\n<p>No I can not, because as they said, this problem is very difficult. I imagine it will require simplification of expression to some base form, before computing it.</p>"},{"id":"sicp2.1.3","title":"SICP 2.1.3 Meaning of data","date":"2020-07-10","tags":["SICP"],"excerpt":"<p>This section blows your mind by showing that data could be represented by functions. That's kid of obvious that array or assotiative array could be replaced by function that returns value by index, but here you replace with functions even the most basic data type - integer. Not for practical reasons, but I guess to achieve satory about lambda calculus.</p>","content":"<p>This section blows your mind by showing that data could be represented by functions. That's kid of obvious that array or assotiative array could be replaced by function that returns value by index, but here you replace with functions even the most basic data type - integer. Not for practical reasons, but I guess to achieve satory about lambda calculus.</p>\n<h2>Exercise 2.4</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> x y)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (m) (<span class=\"hljs-name\">m</span> x y)))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> z)\n  (<span class=\"hljs-name\">z</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (p q) p)))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> z)\n  (<span class=\"hljs-name\">z</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (p q) q)))</code></pre>\n<h2>Exercise 2.5</h2>\n<pre><code class=\"hljs language-scheme\"><span class=\"hljs-comment\">; Recursive process and linear time, could be done better</span>\n<span class=\"hljs-comment\">; but I'm to lazy to copy from previous exercises</span>\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">pow</span> x n) \n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> n <span class=\"hljs-number\">0</span>) <span class=\"hljs-number\">1</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> x (<span class=\"hljs-name\">pow</span> x (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> n <span class=\"hljs-number\">1</span>))))\n)\n\n<span class=\"hljs-comment\">; iterative linear, not sure if could be made better</span>\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">count-divisor</span> x d)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">iter</span> x count)\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">></span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">remainder</span></span> x d) <span class=\"hljs-number\">0</span>)\n        count\n        (<span class=\"hljs-name\">iter</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> x d) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> count <span class=\"hljs-number\">1</span>))\n      )\n  )\n  (<span class=\"hljs-name\">iter</span> x <span class=\"hljs-number\">0</span>)\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> x y)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> (<span class=\"hljs-name\">pow</span> <span class=\"hljs-number\">2</span> x) (<span class=\"hljs-name\">pow</span> <span class=\"hljs-number\">3</span> y))\n) \n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> z)\n  (<span class=\"hljs-name\">count-divisor</span> z <span class=\"hljs-number\">2</span>)\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> z)\n  (<span class=\"hljs-name\">count-divisor</span> z <span class=\"hljs-number\">3</span>)\n)</code></pre>\n<h2>Exercise 2.6</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> zero (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (f) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (x) x)))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">inc</span> n) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (f) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (x) (<span class=\"hljs-name\">f</span> ((<span class=\"hljs-name\">n</span> f) x)))))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> one (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (f) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (x) (<span class=\"hljs-name\">f</span> x))))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> two (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (f) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (x) (<span class=\"hljs-name\">f</span> (<span class=\"hljs-name\">f</span> x)))))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">plus</span> a b)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (f) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (x) ((<span class=\"hljs-name\">a</span> f) ((<span class=\"hljs-name\">b</span> f) x))))\n)\n\n<span class=\"hljs-comment\">; To debug if I placed parentheses correctly :)</span>\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">church-to-int</span> n)\n  ((<span class=\"hljs-name\">n</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (x) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> x <span class=\"hljs-number\">1</span>))) <span class=\"hljs-number\">0</span>)\n)\n\n(<span class=\"hljs-name\">church-to-int</span> (<span class=\"hljs-name\">plus</span> one two))\n<span class=\"hljs-comment\">;Value: 3</span></code></pre>\n<p>There is also nice video from Computerphile that explains how to build Boolean algebra from lambda calculus:\n{{&#x3C; youtube eis11j_iGMs >}}</p>"}],"pages":2,"archives":[{"url":"/month/2021-01/page/1","id":"2021-01","count":4,"title":"2021-01"},{"url":"/month/2020-12/page/1","id":"2020-12","count":1,"title":"2020-12"},{"url":"/month/2020-09/page/1","id":"2020-09","count":2,"title":"2020-09"},{"url":"/month/2020-08/page/1","id":"2020-08","count":2,"title":"2020-08"},{"url":"/month/2020-07/page/1","id":"2020-07","count":10,"title":"2020-07"},{"url":"/month/2020-06/page/1","id":"2020-06","count":7,"title":"2020-06"},{"url":"/month/2018-12/page/1","id":"2018-12","count":1,"title":"2018-12"}],"topics":[{"url":"/tag/MOOC/page/1","id":"MOOC","title":"MOOC","count":2},{"url":"/tag/SICP/page/1","id":"SICP","title":"SICP","count":20},{"url":"/tag/ideas/page/1","id":"ideas","title":"ideas","count":1},{"url":"/tag/notes/page/1","id":"notes","title":"notes","count":5},{"url":"/tag/on writing/page/1","id":"on writing","title":"on writing","count":3}],"tag":"SICP"},"__N_SSG":true}