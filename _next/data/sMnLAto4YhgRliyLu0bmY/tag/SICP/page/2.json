{"pageProps":{"pageNumber":"2","posts":[{"id":"sicp2.1.2","title":"SICP 2.1.2 Abstraction barriers","date":"2020-07-08","tags":["SICP"],"excerpt":"<p>In this section I'm starting to have strong need for types.</p>\n<p>Code in exercises becomes more verbose.</p>","content":"<p>In this section I'm starting to have strong need for types.</p>\n<p>Code in exercises becomes more verbose.</p>\n<h2>Exercise 2.2</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> make-segment cons)\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> start-segment car)\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> end-segment cdr)\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> make-point cons)\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> x-point car)\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> y-point cdr)\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">mid-segment</span> segment)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">let</span></span> (\n    (<span class=\"hljs-name\">s</span> (<span class=\"hljs-name\">start-segment</span> segment))\n    (<span class=\"hljs-name\">e</span> (<span class=\"hljs-name\">end-segment</span> segment))\n  )\n\n  (<span class=\"hljs-name\">make-point</span>\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> (<span class=\"hljs-name\">x-point</span> s) (<span class=\"hljs-name\">x-point</span> e)) <span class=\"hljs-number\">2</span>)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> (<span class=\"hljs-name\">y-point</span> s) (<span class=\"hljs-name\">y-point</span> e)) <span class=\"hljs-number\">2</span>)\n  ))\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">print-point</span> p)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">newline</span></span>)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">display</span></span> <span class=\"hljs-string\">\"(\"</span>)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">display</span></span> (<span class=\"hljs-name\">x-point</span> p))\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">display</span></span> <span class=\"hljs-string\">\",\"</span>)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">display</span></span> (<span class=\"hljs-name\">y-point</span> p))\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">display</span></span> <span class=\"hljs-string\">\")\"</span>))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> a (<span class=\"hljs-name\">make-point</span> <span class=\"hljs-number\">1.0</span> <span class=\"hljs-number\">2.0</span>))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> b (<span class=\"hljs-name\">make-point</span> <span class=\"hljs-number\">3.0</span> <span class=\"hljs-number\">4.0</span>))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> ab (<span class=\"hljs-name\">make-segment</span> a b))\n\n(<span class=\"hljs-name\">print-point</span> (<span class=\"hljs-name\">mid-segment</span> ab))</code></pre>\n<h2>Exercise 2.3</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> make-rect cons)\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">area</span> rect) \n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> (<span class=\"hljs-name\">width-rect</span> rect) (<span class=\"hljs-name\">height-rect</span> rect))\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">perimeter</span> rect) \n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> <span class=\"hljs-number\">2</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> (<span class=\"hljs-name\">width-rect</span> rect) (<span class=\"hljs-name\">height-rect</span> rect)))\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">sqr</span> x) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> x x))\n<span class=\"hljs-comment\">;; Some useful stuff for testing</span>\n\n<span class=\"hljs-comment\">;  d  c</span>\n<span class=\"hljs-comment\">;</span>\n<span class=\"hljs-comment\">;  a  b</span>\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> a (<span class=\"hljs-name\">make-point</span> <span class=\"hljs-number\">0.0</span> <span class=\"hljs-number\">0.0</span>))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> b (<span class=\"hljs-name\">make-point</span> <span class=\"hljs-number\">1.0</span> <span class=\"hljs-number\">0.0</span>))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> c (<span class=\"hljs-name\">make-point</span> <span class=\"hljs-number\">1.0</span> <span class=\"hljs-number\">1.0</span>))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> d (<span class=\"hljs-name\">make-point</span> <span class=\"hljs-number\">0.0</span> <span class=\"hljs-number\">1.0</span>))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> ab (<span class=\"hljs-name\">make-segment</span> a b))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> ad (<span class=\"hljs-name\">make-segment</span> a d))\n\n<span class=\"hljs-comment\">;;; representation 1 - adjacent sides</span>\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> rect (<span class=\"hljs-name\">make-rect</span> ab ad))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">distance</span> point-a point-b)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">sqrt</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span>\n      (<span class=\"hljs-name\">sqr</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> (<span class=\"hljs-name\">x-point</span> point-a) (<span class=\"hljs-name\">x-point</span> point-b)))\n      (<span class=\"hljs-name\">sqr</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> (<span class=\"hljs-name\">y-point</span> point-a) (<span class=\"hljs-name\">y-point</span> point-b)))\n  ))\n)\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">length</span></span> segment)\n  (<span class=\"hljs-name\">distance</span> (<span class=\"hljs-name\">start-segment</span> segment) (<span class=\"hljs-name\">end-segment</span> segment))\n)\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">width-rect</span> rect)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">length</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> rect))\n)\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">height-rect</span> rect)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">length</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> rect))\n)\n\n<span class=\"hljs-comment\">;;; representation 2 - opposite points </span>\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> rect (<span class=\"hljs-name\">make-rect</span> a c))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">width-rect</span> rect)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">abs</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span>\n    (<span class=\"hljs-name\">x-point</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> rect))\n    (<span class=\"hljs-name\">x-point</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> rect))\n  ))\n)\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">height-rect</span> rect)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">abs</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span>\n    (<span class=\"hljs-name\">y-point</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> rect))\n    (<span class=\"hljs-name\">y-point</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> rect))\n  ))\n)</code></pre>"},{"id":"sicp2.1.1","title":"SISP 2.1.1: Rational numbers","date":"2020-07-08","tags":["SICP"],"excerpt":"<h2>Exercise 2.1</h2>\n<p>Here is how you construct rational number:</p>","content":"<h2>Exercise 2.1</h2>\n<p>Here is how you construct rational number:</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">make-rat</span> n d)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">let</span></span> ((<span class=\"hljs-name\">g</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">gcd</span></span> n d))\n       (<span class=\"hljs-name\">sign</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">&#x3C;</span></span> d <span class=\"hljs-number\">0</span>) <span class=\"hljs-number\">-1</span> <span class=\"hljs-number\">1</span>)))\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> n g sign) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> d g sign))))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> numer car)\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> denom cdr)\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">print-rat</span> x)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">newline</span></span>)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">display</span></span> (<span class=\"hljs-name\">numer</span> x))\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">display</span></span> <span class=\"hljs-string\">\"/\"</span>)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">display</span></span> (<span class=\"hljs-name\">denom</span> x)))</code></pre>\n<p>That's it, change sign of both parts when denominator is negative, you could do that by multiplying or dividing by -1.</p>"},{"id":"sicp1.3.4","title":"SICP 1.3.4 Procedures as returned values","date":"2020-07-02","tags":["SICP"],"excerpt":"<p>Today I have learned that John Carmack was also challenged by SICP:</p>\n<blockquote>\n<p>100 pages into Structure and Interpretation of Computer Programs. I'm proud of myself for not skipping the Church Numerals exercise. <a href=\"https://twitter.com/ID_AA_Carmack/status/350028210551013376\">Twitter</a></p>\n</blockquote>\n<p>I still need to get so far.</p>","content":"<p>Today I have learned that John Carmack was also challenged by SICP:</p>\n<blockquote>\n<p>100 pages into Structure and Interpretation of Computer Programs. I'm proud of myself for not skipping the Church Numerals exercise. <a href=\"https://twitter.com/ID_AA_Carmack/status/350028210551013376\">Twitter</a></p>\n</blockquote>\n<p>I still need to get so far.</p>\n<h2>Exercise 1.40</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">cubic</span> a b c) \n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (x) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span>\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> x x x)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> a x x)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> b x)\n    c\n  ))\n)</code></pre>\n<h2>Exercise 1.41</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">inc</span> x) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> x <span class=\"hljs-number\">1</span>))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">double</span> f)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (x) (<span class=\"hljs-name\">f</span> (<span class=\"hljs-name\">f</span> x)))\n)</code></pre>\n<h2>Exercise 1.42</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">sqr</span> x) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> x x))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">compose</span> f g) \n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (x) (<span class=\"hljs-name\">f</span> (<span class=\"hljs-name\">g</span> x)))\n)\n\n((<span class=\"hljs-name\">compose</span> sqr inc) <span class=\"hljs-number\">6</span>)</code></pre>\n<h2>Exercise 1.43</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">repeated</span> f n) \n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> n <span class=\"hljs-number\">1</span>)\n    f\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">even?</span></span> n)\n      (<span class=\"hljs-name\">repeated</span> (<span class=\"hljs-name\">double</span> f) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> n <span class=\"hljs-number\">2</span>))\n      (<span class=\"hljs-name\">compose</span> f (<span class=\"hljs-name\">repeated</span> f (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> n <span class=\"hljs-number\">1</span>)))\n    )\n  )\n)</code></pre>\n<h2>Exercise 1.44</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> dx <span class=\"hljs-number\">0.000001</span>)\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">smooth</span> f)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (x) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span>\n    (<span class=\"hljs-name\">f</span> x)\n    (<span class=\"hljs-name\">f</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> x dx))\n    (<span class=\"hljs-name\">f</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> x dx))\n  ) <span class=\"hljs-number\">3.0</span>))\n)\n\n(<span class=\"hljs-name\">repeated</span> smooth <span class=\"hljs-number\">10</span>)</code></pre>\n<h1>Exercise 1.45</h1>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> tolerance <span class=\"hljs-number\">0.00001</span>)\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">fixed-point</span> f first-guess)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">close-enough?</span> v1 v2)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">&#x3C;</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">abs</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> v1 v2)) tolerance))\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">try</span> guess limit)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">display</span></span> guess) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">newline</span></span>)<span class=\"hljs-comment\">; to debug trace</span>\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">let</span></span> ((<span class=\"hljs-name\">next</span> (<span class=\"hljs-name\">f</span> guess)))\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> limit <span class=\"hljs-number\">0</span>)\n        (<span class=\"hljs-name\">error</span> <span class=\"hljs-string\">\"Reached iteration limit\"</span>)\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\">close-enough?</span> guess next)\n            next\n            (<span class=\"hljs-name\">try</span> next (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> limit <span class=\"hljs-number\">1</span>)))\n      )))\n  (<span class=\"hljs-name\">try</span> first-guess <span class=\"hljs-number\">1000</span>)\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">average-damp</span> f) \n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (y) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> (<span class=\"hljs-name\">f</span> y) y) <span class=\"hljs-number\">2</span>))\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">npow</span> x n)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> n <span class=\"hljs-number\">1</span>) x (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> x (<span class=\"hljs-name\">npow</span> x (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> n <span class=\"hljs-number\">1</span>)) ))\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">n-root</span> x n) \n  (<span class=\"hljs-name\">fixed-point</span>\n    ((<span class=\"hljs-name\">repeated</span> average-damp (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> n <span class=\"hljs-number\">2</span>)) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (y) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> x (<span class=\"hljs-name\">npow</span> y (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> n <span class=\"hljs-number\">1</span>)))))\n    <span class=\"hljs-number\">1</span>\n  )\n)</code></pre>\n<p>I saw on the internet solutions better than n / 2, but I would like to move on.</p>\n<h1>Exercise 1.46</h1>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">iterative-improve</span> good-enough next)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">iter</span> guess) \n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\">good-enough</span> guess)\n      guess\n      (<span class=\"hljs-name\">iter</span> (<span class=\"hljs-name\">next</span> guess))\n    )\n  )\n  iter\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">~=</span> a b) \n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">&#x3C;</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">abs</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> a b)) <span class=\"hljs-number\">0.00001</span>)\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">sqrt</span></span> x) \n  ((<span class=\"hljs-name\">iterative-improve</span>\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (y) (<span class=\"hljs-name\">~=</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> y y) x))\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (y) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> y (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> x y)) <span class=\"hljs-number\">2</span>))\n  ) <span class=\"hljs-number\">1.0</span>)\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">fixed-point</span> f first-guess)\n  ((<span class=\"hljs-name\">iterative-improve</span>\n     (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (y) (<span class=\"hljs-name\">~=</span> (<span class=\"hljs-name\">f</span> y) y))<span class=\"hljs-comment\">; not very optimal because we computing f twice </span>\n     f\n  ) first-guess)\n)</code></pre>\n<p>And I could move to the chapter about data structures.</p>"},{"id":"sicp1.3.3","title":"SICP 1.3.3 Procedures as general methods","date":"2020-06-29","tags":["SICP"],"excerpt":"<p>I'll attach solution from previous section to this post as it was the only exercise there.</p>","content":"<p>I'll attach solution from previous section to this post as it was the only exercise there.</p>\n<h2>Exercise 1.34 Runtime error with types</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">f</span> g)\n  (<span class=\"hljs-name\">g</span> <span class=\"hljs-number\">2</span>))\n(<span class=\"hljs-name\">f</span> f) -> (<span class=\"hljs-name\">f</span> <span class=\"hljs-number\">2</span>) -> (<span class=\"hljs-name\">2</span> <span class=\"hljs-number\">2</span>)</code></pre>\n<p>2 is obviously not a function, so scheme gives error when you try to apply it as function.</p>\n<h2>Exercise 1.35 Use fixed point procedure for finding golden ratio</h2>\n<p>So, let's divide both sides of equation Φ2 = Φ + 1. We get Φ  = 1 + 1/Φ - and this is exactly the formula to find fixed point for.</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> tolerance <span class=\"hljs-number\">0.00001</span>)\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">fixed-point</span> f first-guess)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">close-enough?</span> v1 v2)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">&#x3C;</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">abs</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> v1 v2)) tolerance))\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">try</span> guess)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">let</span></span> ((<span class=\"hljs-name\">next</span> (<span class=\"hljs-name\">f</span> guess)))\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\">close-enough?</span> guess next)\n          next\n          (<span class=\"hljs-name\">try</span> next))))\n  (<span class=\"hljs-name\">try</span> first-guess))\n(<span class=\"hljs-name\">fixed-point</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (x) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> <span class=\"hljs-number\">1</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> <span class=\"hljs-number\">1</span> x))) <span class=\"hljs-number\">1.0</span>)</code></pre>\n<h2>Exercise 1.36 Printing sequence of approximations</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> tolerance <span class=\"hljs-number\">0.00001</span>)\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">fixed-point</span> f first-guess)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">close-enough?</span> v1 v2)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">&#x3C;</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">abs</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> v1 v2)) tolerance))\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">try</span> guess)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">let</span></span> ((<span class=\"hljs-name\">next</span> (<span class=\"hljs-name\">f</span> guess)))\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">display</span></span> <span class=\"hljs-string\">\"Approximation: \"</span>) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">display</span></span> next)(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">newline</span></span>)\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\">close-enough?</span> guess next)\n          next\n          (<span class=\"hljs-name\">try</span> next))))\n  (<span class=\"hljs-name\">try</span> first-guess))\n(<span class=\"hljs-name\">fixed-point</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (x) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">log</span></span> <span class=\"hljs-number\">1000</span>) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">log</span></span> x))) <span class=\"hljs-number\">2.0</span>)</code></pre>\n<h2>Exercise 1.37 Golden ratio from continued fraction</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">cont-frac</span> n d k)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">iter</span> i) \n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> (<span class=\"hljs-name\">n</span> i) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> i k)\n       (<span class=\"hljs-name\">d</span> i)\n       (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> (<span class=\"hljs-name\">d</span> i) (<span class=\"hljs-name\">iter</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> i <span class=\"hljs-number\">1</span>)))\n    ))\n  )\n  (<span class=\"hljs-name\">iter</span> <span class=\"hljs-number\">1</span>)\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">golden</span> k)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> <span class=\"hljs-number\">1</span> (<span class=\"hljs-name\">cont-frac</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (i) <span class=\"hljs-number\">1.0</span>)\n           (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (i) <span class=\"hljs-number\">1.0</span>)\n           k))\n)\n\n(<span class=\"hljs-name\">golden</span> <span class=\"hljs-number\">12</span>)\n<span class=\"hljs-comment\">;Value: 1.6180555555555558</span>\n</code></pre>\n<p>Iterative continuous fraction:</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">cont-frac</span> n d k)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">iter</span> i result) \n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> i <span class=\"hljs-number\">0</span>)\n      result\n      (<span class=\"hljs-name\">iter</span>\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> i <span class=\"hljs-number\">1</span>)\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> (<span class=\"hljs-name\">n</span> i) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> (<span class=\"hljs-name\">d</span> i) result))\n      )\n    )\n  )\n  (<span class=\"hljs-name\">iter</span> k <span class=\"hljs-number\">0</span>)\n)</code></pre>\n<h2>Exercise 1.38 Euler number</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">e</span> k)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> <span class=\"hljs-number\">2</span> (<span class=\"hljs-name\">cont-frac</span>\n         (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (i) <span class=\"hljs-number\">1.0</span>)\n         (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (i)\n           (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">remainder</span></span> i <span class=\"hljs-number\">3</span>) <span class=\"hljs-number\">2</span>)\n             (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> <span class=\"hljs-number\">1</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">floor</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> i <span class=\"hljs-number\">3</span>))) <span class=\"hljs-number\">2</span>)\n             <span class=\"hljs-number\">1.0</span>\n            )\n         )\n         k\n  ))\n)\n\n(<span class=\"hljs-name\">e</span> <span class=\"hljs-number\">15</span>)\n<span class=\"hljs-comment\">;Value: 2.718281828470584</span></code></pre>\n<h2>Exercise 1.39 Continued fraction tangent</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">tan</span></span> x k)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">let</span></span> ((<span class=\"hljs-name\">n_sqr</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> <span class=\"hljs-number\">0</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> x x))))\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> x (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> <span class=\"hljs-number\">1</span> (<span class=\"hljs-name\">cont-frac</span>\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (i) n_sqr)\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (i) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> <span class=\"hljs-number\">1</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> i <span class=\"hljs-number\">2</span>)))\n        k\n      )))\n  )\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">tan</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> pi <span class=\"hljs-number\">4</span>) <span class=\"hljs-number\">100</span>)\n<span class=\"hljs-comment\">;Value: .9999999732051038</span>\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">tan</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> pi <span class=\"hljs-number\">2</span>) <span class=\"hljs-number\">1000</span>)\n<span class=\"hljs-comment\">;Value: 37320539.58514773</span>\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">tan</span></span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">100</span>)\n<span class=\"hljs-comment\">;Value: 0</span></code></pre>\n<p>Approximately so.</p>"},{"id":"sicp1.3.1","title":"SICP 1.3.1 Procedures as arguments","date":"2020-06-27","tags":["SICP"],"excerpt":"<p>Solving more exercises, trying not to skip to be able to learn next chapters better.</p>","content":"<p>Solving more exercises, trying not to skip to be able to learn next chapters better.</p>\n<h2>Exercise 1.29 Simpson rule integration</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">cube</span> x) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> x x x))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">integral</span> f a b dx)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">add-dx</span> x) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> x dx))\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> (<span class=\"hljs-name\">sum</span> f (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> a (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> dx <span class=\"hljs-number\">2.0</span>)) add-dx b)\n     dx))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">sum</span> term a next b)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">></span></span> a b)\n      <span class=\"hljs-number\">0</span>\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> (<span class=\"hljs-name\">term</span> a)\n         (<span class=\"hljs-name\">sum</span> term (<span class=\"hljs-name\">next</span> a) next b))))\n\n(<span class=\"hljs-name\">integral</span> cube <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">0.01</span>)\n<span class=\"hljs-comment\">; .24998750000000042</span>\n(<span class=\"hljs-name\">integral</span> cube <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">0.001</span>)\n<span class=\"hljs-comment\">;.249999875000001</span>\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">simpson-rule-integral</span> f a b n)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">inc</span> x) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> x <span class=\"hljs-number\">1</span>))\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">term</span> i)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cond</span></span>\n      ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> i <span class=\"hljs-number\">0</span>) (<span class=\"hljs-name\">f</span> a))\n      ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> i n) (<span class=\"hljs-name\">f</span> b))\n      ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">even?</span></span> i) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> <span class=\"hljs-number\">2</span> (<span class=\"hljs-name\">f</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> a (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> b a) n) i)))))\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">else</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> <span class=\"hljs-number\">4</span> (<span class=\"hljs-name\">f</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> a (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> b a) n) i)))))\n    )\n  )\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> (<span class=\"hljs-name\">sum</span> term <span class=\"hljs-number\">0</span> inc n)\n     (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> b a) n <span class=\"hljs-number\">3</span>))\n)\n\n(<span class=\"hljs-name\">simpson-rule-integral</span> cube <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">10</span>)\n<span class=\"hljs-comment\">;Value: 1/4</span>\n</code></pre>\n<p>Seems to work very precise. Gives rational numbers, wow. Even when try with different functions:</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">identity</span> x) x)\n(<span class=\"hljs-name\">simpson-rule-integral</span> identity <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">10</span>)\n<span class=\"hljs-comment\">;Value: 1/2</span></code></pre>\n<h2>Exercise 1.30 Iterative summation</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">sum</span> term a next b)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">iter</span> a result)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">></span></span> a b)\n        result\n        (<span class=\"hljs-name\">iter</span> (<span class=\"hljs-name\">next</span> a) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> (<span class=\"hljs-name\">term</span> a) result))))\n  (<span class=\"hljs-name\">iter</span> a <span class=\"hljs-number\">0</span>))</code></pre>\n<h2>Exercise 1.31 Product</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">product</span> term a next b)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">iter</span> a result)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">></span></span> a b)\n        result\n        (<span class=\"hljs-name\">iter</span> (<span class=\"hljs-name\">next</span> a) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> (<span class=\"hljs-name\">term</span> a) result))))\n  (<span class=\"hljs-name\">iter</span> a <span class=\"hljs-number\">1</span>))</code></pre>\n<p>Factorial:</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">inc</span> i) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> i <span class=\"hljs-number\">1</span>))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">identity</span> x) x)\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">factorial</span> n) (<span class=\"hljs-name\">product</span> identity <span class=\"hljs-number\">1</span> inc n))</code></pre>\n<p>Approximating Pi:</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">pi</span> precision) \n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">term</span> i)\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> k (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> i <span class=\"hljs-number\">2</span>))\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> k (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> k <span class=\"hljs-number\">2</span>)) (<span class=\"hljs-name\">square</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> k <span class=\"hljs-number\">1</span>)))\n    )\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> <span class=\"hljs-number\">4.0</span> (<span class=\"hljs-name\">product</span> term <span class=\"hljs-number\">1</span> inc precision))\n)\n(<span class=\"hljs-name\">pi</span> <span class=\"hljs-number\">100</span>)\n<span class=\"hljs-comment\">;Value: 3.1493784731686008</span></code></pre>\n<p>Recursive product:</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">product</span> term a next b)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">></span></span> a b)\n        <span class=\"hljs-number\">1</span>\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> (<span class=\"hljs-name\">term</span> a) (<span class=\"hljs-name\">product</span> term (<span class=\"hljs-name\">next</span> a) next b))\n    )\n)</code></pre>\n<h2>Exercise 1.32: Accumulate</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">accumulate</span> combiner null-value term a next b)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">></span></span> a b)\n    null-value\n    (<span class=\"hljs-name\">combiner</span>\n      (<span class=\"hljs-name\">term</span> a)\n      (<span class=\"hljs-name\">accumulate</span> combiner null-value term (<span class=\"hljs-name\">next</span> a) next b)\n    )\n  )\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">sum</span> term a next b)\n  (<span class=\"hljs-name\">accumulate</span> + <span class=\"hljs-number\">0</span> term a next b)\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">product</span> term a next b)\n  (<span class=\"hljs-name\">accumulate</span> * <span class=\"hljs-number\">1</span> term a next b)\n)</code></pre>\n<p>Iterative:</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">accumulate</span> combiner null-value term a next b)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">iter</span> a result)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">></span></span> a b)\n      result\n      (<span class=\"hljs-name\">iter</span> (<span class=\"hljs-name\">next</span> a) (<span class=\"hljs-name\">combiner</span> (<span class=\"hljs-name\">term</span> a) result))\n    )\n  )\n  (<span class=\"hljs-name\">iter</span> a null-value)\n)</code></pre>\n<h2>Exercise 1.33 Filtered accumulate</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">filtered-accumulate</span> combiner null-value term a next b filter)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">iter</span> a result)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">></span></span> a b)\n      result\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\">filter</span> a) \n          (<span class=\"hljs-name\">iter</span> (<span class=\"hljs-name\">next</span> a) result)\n          (<span class=\"hljs-name\">iter</span> (<span class=\"hljs-name\">next</span> a) (<span class=\"hljs-name\">combiner</span> (<span class=\"hljs-name\">term</span> a) result))\n      )\n    )\n  )\n  (<span class=\"hljs-name\">iter</span> a null-value)\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">sum-of-squares-of-primes-in-interval</span> a b)\n    (<span class=\"hljs-name\">filtered-accumulate</span> + <span class=\"hljs-number\">0</span> sqr a inc b prime?)\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">product-of-relatively-primes-to</span> n)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">!rel-prime</span> x)\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">not</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">gcd</span></span> x n) <span class=\"hljs-number\">1</span>))\n    )\n    (<span class=\"hljs-name\">filtered-accumulate</span> * <span class=\"hljs-number\">1</span> identity <span class=\"hljs-number\">1</span> inc n !rel-prime)\n)</code></pre>"},{"id":"sicp1.2.6","title":"SICP 1.2.6 Primes","date":"2020-06-21","tags":["SICP"],"excerpt":"<p>A little bit of number theory.</p>","content":"<p>A little bit of number theory.</p>\n<h2>Exercise 1.21: Smallest divisors</h2>\n<p>This is so trivial, so I'll try to rewrite example, because it's just copypaste otherwise:</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">divisor?</span> d n) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">remainder</span></span> n d) <span class=\"hljs-number\">0</span>))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">smallest-divisor</span> n)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">find-divisor</span> n d)\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cond</span></span> ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">></span></span> (<span class=\"hljs-name\">sqr</span> d) n) n)\n            ((<span class=\"hljs-name\">divisor?</span> d n) d)\n            (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">else</span></span> (<span class=\"hljs-name\">find-divisor</span> n (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> d <span class=\"hljs-number\">1</span>)))\n        )\n\n    )\n    (<span class=\"hljs-name\">find-divisor</span> n <span class=\"hljs-number\">2</span>)\n)</code></pre>\n<pre><code class=\"hljs language-scheme\"><span class=\"hljs-number\">1</span> ]=> (<span class=\"hljs-name\">smallest-divisor</span> <span class=\"hljs-number\">199</span>)\n\n<span class=\"hljs-comment\">;Value: 199</span>\n\n<span class=\"hljs-number\">1</span> ]=> (<span class=\"hljs-name\">smallest-divisor</span> <span class=\"hljs-number\">1999</span>)\n\n<span class=\"hljs-comment\">;Value: 1999</span>\n\n<span class=\"hljs-number\">1</span> ]=> (<span class=\"hljs-name\">smallest-divisor</span> <span class=\"hljs-number\">19999</span>)\n\n<span class=\"hljs-comment\">;Value: 7</span></code></pre>\n<p>Well, that was unexpected. :)</p>\n<h2>Exercise 1.22:</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">prime?</span> n)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> n (<span class=\"hljs-name\">smallest-divisor</span> n)))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">next-prime</span> n) \n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\">prime?</span> n)\n        n\n        (<span class=\"hljs-name\">next-prime</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> n <span class=\"hljs-number\">2</span>))\n    )\n)\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">timed-prime-test</span> n)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">start-prime-test</span> n start-time)\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">display</span></span> <span class=\"hljs-string\">\"next prime after \"</span>) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">display</span></span> n)\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">display</span></span> <span class=\"hljs-string\">\": \"</span>) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">display</span></span> (<span class=\"hljs-name\">next-prime</span> n)) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">newline</span></span>)\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">display</span></span> <span class=\"hljs-string\">\"Time: \"</span>) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">display</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> (<span class=\"hljs-name\">runtime</span>) start-time))\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">newline</span></span>)\n    )\n    (<span class=\"hljs-name\">start-prime-test</span> n (<span class=\"hljs-name\">runtime</span>))\n)\n(<span class=\"hljs-name\">timed-prime-test</span> <span class=\"hljs-number\">10000000001</span>)\n<span class=\"hljs-comment\">; next prime after 10000000001: 10000000019</span>\n<span class=\"hljs-comment\">; Time: .19999999999998863</span>\n(<span class=\"hljs-name\">timed-prime-test</span> <span class=\"hljs-number\">1000000000001</span>)\n<span class=\"hljs-comment\">; next prime after 1000000000001: 1000000000039</span>\n<span class=\"hljs-comment\">; Time: 1.3700000000000045</span></code></pre>\n<p>Seems to take 10 times more time for 100 times bigger number.</p>\n<h2>Exercise 1.23</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">next</span> n) \n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> n <span class=\"hljs-number\">2</span>) <span class=\"hljs-number\">3</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> n <span class=\"hljs-number\">2</span>))\n)\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">smallest-divisor</span> n)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">find-divisor</span> n d)\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cond</span></span> ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">></span></span> (<span class=\"hljs-name\">sqr</span> d) n) n)\n            ((<span class=\"hljs-name\">divisor?</span> d n) d)\n            (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">else</span></span> (<span class=\"hljs-name\">find-divisor</span> n (<span class=\"hljs-name\">next</span> d)))\n        )\n\n    )\n    (<span class=\"hljs-name\">find-divisor</span> n <span class=\"hljs-number\">2</span>)\n)\n\n(<span class=\"hljs-name\">timed-prime-test</span> <span class=\"hljs-number\">10000000001</span>)\n<span class=\"hljs-comment\">;Time: .12000000000000455</span>\n\n(<span class=\"hljs-name\">timed-prime-test</span> <span class=\"hljs-number\">1000000000001</span>)\n<span class=\"hljs-comment\">; Time: .8000000000000114</span></code></pre>\n<p>A little bit less than twice as fast. I assume this is because calling next and doing comparisons inside it takes more time than just (+ n 1)</p>\n<h2>Exercise 1.24</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">expmod</span> base exp m)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cond</span></span> ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> exp <span class=\"hljs-number\">0</span>) <span class=\"hljs-number\">1</span>)\n        ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">even?</span></span> exp)\n         (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">remainder</span></span> (<span class=\"hljs-name\">square</span> (<span class=\"hljs-name\">expmod</span> base (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> exp <span class=\"hljs-number\">2</span>) m))\n                    m))\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">else</span></span>\n         (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">remainder</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> base (<span class=\"hljs-name\">expmod</span> base (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> exp <span class=\"hljs-number\">1</span>) m))\n                    m))))        \n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">fermat-test</span> n)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">try-it</span> a)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> (<span class=\"hljs-name\">expmod</span> a n n) a))\n  (<span class=\"hljs-name\">try-it</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> <span class=\"hljs-number\">1</span> (<span class=\"hljs-name\">random</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> n <span class=\"hljs-number\">1</span>)))))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">fast-prime?</span> n times)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cond</span></span> ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> times <span class=\"hljs-number\">0</span>) true)\n        ((<span class=\"hljs-name\">fermat-test</span> n) (<span class=\"hljs-name\">fast-prime?</span> n (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> times <span class=\"hljs-number\">1</span>)))\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">else</span></span> false)))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">next-prime</span> n) \n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\">fast-prime?</span> n <span class=\"hljs-number\">10</span>)\n        n\n        (<span class=\"hljs-name\">next-prime</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> n <span class=\"hljs-number\">2</span>))\n    )\n)\n\n(<span class=\"hljs-name\">timed-prime-test</span> <span class=\"hljs-number\">1000000000001</span>)\n<span class=\"hljs-comment\">; next prime after 1000000000001: 1000000000039</span>\n<span class=\"hljs-comment\">; Time: 9.999999999990905e-3</span>\n\n(<span class=\"hljs-name\">timed-prime-test</span> <span class=\"hljs-number\">10000000000000000000001</span>)\n<span class=\"hljs-comment\">; next prime after 10000000000000000000001: 10000000000000000000009</span>\n<span class=\"hljs-comment\">; Time: 9.999999999990905e-3</span></code></pre>\n<p>Time seems to not change at all (but of course first search checked more numbers).</p>\n<h2>Exercise 1.25</h2>\n<p>That would slow down our computations tremendously, because we would need to multiply huge numbers. With millions of digits, which would take megabytes of memory.</p>\n<h2>Exercise 1.26</h2>\n<p>In correct <code>expmod</code>, every time <code>expmod</code> is recursively called with half of <code>exp</code> argument, it is called once.</p>\n<p>In Louis Reasoner implementation, when <code>expmod</code> is called with halved <code>exp</code> argument, it is called twice, so halving the argument is compensated by doubling the tree of recursion, and that's why number of calls to <code>expmod</code> is proportional to the argument.</p>\n<h2>Exercise 1.27</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">full-fermat</span> n)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">f-prime?</span> a)\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> (<span class=\"hljs-name\">expmod</span> a n n) a)\n    )\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">iter</span> a)\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> a n)\n            <span class=\"hljs-literal\">#t</span> <span class=\"hljs-comment\">; test passed</span>\n            (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\">f-prime?</span> a)\n                (<span class=\"hljs-name\">iter</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> a <span class=\"hljs-number\">1</span>))\n                <span class=\"hljs-literal\">#f</span><span class=\"hljs-comment\">; test failed</span>\n            )\n        )\n    )\n    (<span class=\"hljs-name\">iter</span> <span class=\"hljs-number\">2</span>)\n)\n\n(<span class=\"hljs-name\">full-fermat</span> <span class=\"hljs-number\">13</span>)<span class=\"hljs-comment\">; #t</span>\n(<span class=\"hljs-name\">full-fermat</span> <span class=\"hljs-number\">15</span>)<span class=\"hljs-comment\">; #f</span>\n(<span class=\"hljs-name\">full-fermat</span> <span class=\"hljs-number\">561</span>)<span class=\"hljs-comment\">; #t</span>\n(<span class=\"hljs-name\">full-fermat</span> <span class=\"hljs-number\">1105</span>)<span class=\"hljs-comment\">; #t</span>\n(<span class=\"hljs-name\">full-fermat</span> <span class=\"hljs-number\">1729</span>)<span class=\"hljs-comment\">; #t</span></code></pre>\n<h2>Exercise 1.28: Miller-Rabin test</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">!=</span> a b) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">not</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> a b))) <span class=\"hljs-comment\">; I need some Scheme reference, really. How this is not built-in?</span>\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">report</span> n m)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">display</span></span> n)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">display</span></span> <span class=\"hljs-string\">\" is a nontrivial square root of 1 modulo \"</span>)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">display</span></span> m)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">newline</span></span>)\n  <span class=\"hljs-number\">0</span>\n)\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">expmod</span> base exp m)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">squaremod-signal</span> n)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">is-root?</span> sq) \n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">and</span></span>  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> sq <span class=\"hljs-number\">1</span>) (<span class=\"hljs-name\">!=</span> n <span class=\"hljs-number\">1</span>) (<span class=\"hljs-name\">!=</span> n (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> m <span class=\"hljs-number\">1</span>)))\n            (<span class=\"hljs-name\">report</span> n m)\n            sq\n        )\n    )\n    (<span class=\"hljs-name\">is-root?</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">remainder</span></span> (<span class=\"hljs-name\">square</span> n) m))\n  )\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cond</span></span> ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> exp <span class=\"hljs-number\">0</span>) <span class=\"hljs-number\">1</span>)\n        ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">even?</span></span> exp)\n         (<span class=\"hljs-name\">squaremod-signal</span> (<span class=\"hljs-name\">expmod</span> base (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> exp <span class=\"hljs-number\">2</span>) m)))\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">else</span></span>\n         (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">remainder</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> base (<span class=\"hljs-name\">expmod</span> base (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> exp <span class=\"hljs-number\">1</span>) m))\n                    m))))        \n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">fast-prime?</span> n times)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cond</span></span> ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> times <span class=\"hljs-number\">0</span>) true)\n        ((<span class=\"hljs-name\">miller-rabin-test</span> n) (<span class=\"hljs-name\">fast-prime?</span> n (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> times <span class=\"hljs-number\">1</span>)))\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">else</span></span> false)))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">miller-rabin-test</span> n)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">try-it</span> a)\n    (<span class=\"hljs-name\">!=</span> (<span class=\"hljs-name\">expmod</span> a (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> n <span class=\"hljs-number\">1</span>) n) <span class=\"hljs-number\">0</span>)\n  )\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">even?</span></span> n)\n      <span class=\"hljs-literal\">#f</span>\n      (<span class=\"hljs-name\">try-it</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> <span class=\"hljs-number\">1</span> (<span class=\"hljs-name\">random</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> n <span class=\"hljs-number\">1</span>))))\n  )\n)\n(<span class=\"hljs-name\">fast-prime?</span> <span class=\"hljs-number\">1009</span> <span class=\"hljs-number\">30</span>)\n(<span class=\"hljs-name\">fast-prime?</span> <span class=\"hljs-number\">13</span> <span class=\"hljs-number\">30</span>)\n(<span class=\"hljs-name\">fast-prime?</span> <span class=\"hljs-number\">6601</span> <span class=\"hljs-number\">30</span>)</code></pre>\n<p>Whew! How this even work - no idea, but somehow it does. Thankfully I'm good in this technique:</p>\n<p><img src=\"/content/trying-stuff-orly.jpg\" alt=\"Trying Stuff Until it Works\" title=\"Trying Stuff Until it Works\"></p>"},{"id":"sicp1.2.4","title":"SICP 1.2.4 Exponentiation","date":"2020-06-20","tags":["SICP"],"excerpt":"","content":"<p>Today I learned that ancient mit-scheme REPL could be improved with history &#x26; tab completion. Thanks to this <a href=\"https://stackoverflow.com/a/11916365/816449\">StackOverflow answer</a>. <code>sudo apt-get install rlwrap</code>, and then run scheme as <code>rlwrap scheme</code> That answer is not very recent too, but here we are trying to learn really ancient magic.</p>\n<p>And <a href=\"https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book-Z-H-11.html#%25_sec_1.2.4\">this section</a> really starts to feel like magic. In the end, I learned that there is a way to compute n-th Fibonacci number with time complexity <code>O(log(n))</code>. And just few sections before, authors show how computing Fibonacci sequence using wrong approach could blow up exponencially.</p>\n<h2>Exercise 1.16: Fast exponentiation</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">sqr</span> x) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> x x))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">fast-exp</span> x n) \n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">iter</span> x n a) \n       (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cond</span></span>\n       ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> n <span class=\"hljs-number\">0</span>) a)\n       ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">even?</span></span> n) (<span class=\"hljs-name\">iter</span> (<span class=\"hljs-name\">sqr</span> x) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> n <span class=\"hljs-number\">2</span>) a))\n       (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">else</span></span> (<span class=\"hljs-name\">iter</span> x (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> n <span class=\"hljs-number\">1</span>) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> a x)))\n       ) \n    )\n    (<span class=\"hljs-name\">iter</span> x n <span class=\"hljs-number\">1</span>)\n)</code></pre>\n<h2>Exercise 1.17: \"Fast\" multiplication</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">double</span> x) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> x x))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">halve</span> x) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> x <span class=\"hljs-number\">2</span>))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">fast-m</span> a b) \n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cond</span></span> ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> b <span class=\"hljs-number\">1</span>) a)\n        ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">even?</span></span> b) (<span class=\"hljs-name\">fast-m</span> (<span class=\"hljs-name\">double</span> a) (<span class=\"hljs-name\">halve</span> b)))\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">else</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> a (<span class=\"hljs-name\">fast-m</span> a (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> b <span class=\"hljs-number\">1</span>)))\n    )\n)</code></pre>\n<h2>Exercise 1.18: Iterative multiplicaton</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">fast-m</span> a b) \n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">iter</span> a b p) \n       (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cond</span></span>\n       ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> b <span class=\"hljs-number\">1</span>) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> a p))\n       ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">even?</span></span> b) (<span class=\"hljs-name\">iter</span> (<span class=\"hljs-name\">double</span> a) (<span class=\"hljs-name\">halve</span> b) p))\n       (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">else</span></span> (<span class=\"hljs-name\">iter</span> a (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> b <span class=\"hljs-number\">1</span>) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> p a)))\n       ) \n    )\n    (<span class=\"hljs-name\">iter</span> a b <span class=\"hljs-number\">0</span>)\n)</code></pre>\n<h2>Exercise 1.19: Fast Fibonacci</h2>\n<p>With this exercise first, you discover that there is Fibonacci sequence inside Fibonacci formulas, and then, you figure out from where there appears exponential rise. Magical:</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">fib</span> n)\n  (<span class=\"hljs-name\">fib-iter</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">1</span> n))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">fib-iter</span> a b p q count)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cond</span></span> ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> count <span class=\"hljs-number\">0</span>) b)\n        ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">even?</span></span> count)\n         (<span class=\"hljs-name\">fib-iter</span> a\n                   b\n                   (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> p p) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> q q))   <span class=\"hljs-comment\">; compute p'</span>\n                   (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> q q) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> <span class=\"hljs-number\">2</span> p q)) <span class=\"hljs-comment\">; compute q'</span>\n                   (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> count <span class=\"hljs-number\">2</span>)))\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">else</span></span> (<span class=\"hljs-name\">fib-iter</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> b q) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> a q) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> a p))\n                        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> b p) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> a q))\n                        p\n                        q\n                        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> count <span class=\"hljs-number\">1</span>)))))</code></pre>\n<p>I not dediced yet on how to get latex in Hugo, so I'll not add here my calculations for <code>p'</code> and <code>q'</code>.</p>"},{"id":"sicp1.2.2","title":"SICP 1.2.2 Tree recursion","date":"2020-06-14","tags":["SICP"],"excerpt":"","content":"<p>I like how they did not shown yet how to work with any data structures, but wrote function that behaves like a immutable array:</p>\n<pre><code class=\"hljs language-scheme\"> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">first-denomination</span> kinds-of-coins)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cond</span></span> ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> kinds-of-coins <span class=\"hljs-number\">1</span>) <span class=\"hljs-number\">1</span>)\n        ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> kinds-of-coins <span class=\"hljs-number\">2</span>) <span class=\"hljs-number\">5</span>)\n        ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> kinds-of-coins <span class=\"hljs-number\">3</span>) <span class=\"hljs-number\">10</span>)\n        ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> kinds-of-coins <span class=\"hljs-number\">4</span>) <span class=\"hljs-number\">25</span>)\n        ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> kinds-of-coins <span class=\"hljs-number\">5</span>) <span class=\"hljs-number\">50</span>)))</code></pre>\n<h2>Exercise 1.11</h2>\n<p>Functions should produce following sequence: 1, 2, 4, 11, 25, 59, 142\n(<a href=\"https://oeis.org/A100550\">Sequence A100550</a> in the On-Line Encyclopedia of Integer Sequences)</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">next-f</span> c d e)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> e (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> <span class=\"hljs-number\">2</span> d) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> <span class=\"hljs-number\">3</span> c)))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">f</span> n) \n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">&#x3C;</span></span> n <span class=\"hljs-number\">3</span>) \n        n\n        (<span class=\"hljs-name\">next-f</span> (<span class=\"hljs-name\">f</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> n <span class=\"hljs-number\">3</span>))\n           (<span class=\"hljs-name\">f</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> n <span class=\"hljs-number\">2</span>))\n           (<span class=\"hljs-name\">f</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> n <span class=\"hljs-number\">1</span>)))))</code></pre>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">f</span> n)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">f-iter</span> a b c n)\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">&#x3C;</span></span> n <span class=\"hljs-number\">3</span>)\n            c\n            (<span class=\"hljs-name\">f-iter</span> b c (<span class=\"hljs-name\">next-f</span> a b c) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> n <span class=\"hljs-number\">1</span>))))\n    (<span class=\"hljs-name\">f-iter</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span> n))</code></pre>\n<p>Done.</p>\n<h2>Exercise 1.12. Pascal triangle</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">P</span> row col) \n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cond</span></span>\n        ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> col <span class=\"hljs-number\">1</span>) <span class=\"hljs-number\">1</span>) <span class=\"hljs-comment\">; first number in row is 1</span>\n        ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> col row) <span class=\"hljs-number\">1</span>) <span class=\"hljs-comment\">; last number is 1 too</span>\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">else</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> <span class=\"hljs-comment\">; otherwise it's sum of two number above</span>\n            (<span class=\"hljs-name\">P</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> row <span class=\"hljs-number\">1</span>) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> col <span class=\"hljs-number\">1</span>))\n            (<span class=\"hljs-name\">P</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> row <span class=\"hljs-number\">1</span>) col)))))</code></pre>\n<h2>Exercise 1.13</h2>\n<p>This is hard one for me, because I'm not so good with math. I'll skip this for now.</p>"},{"id":"sicp1.2.1","title":"SICP1.2.1 Recursion & Iteration","date":"2020-06-14","tags":["SICP"],"excerpt":"<p>Ok, second subchapter is more challenging, so I'll go by subsections.</p>\n<p>Here is <a href=\"https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book-Z-H-11.html#%25_sec_1.2.1\">link to the chapter of the book I would solve today</a></p>","content":"<p>Ok, second subchapter is more challenging, so I'll go by subsections.</p>\n<p>Here is <a href=\"https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book-Z-H-11.html#%25_sec_1.2.1\">link to the chapter of the book I would solve today</a></p>\n<h2>Exercise 1.9</h2>\n<p>This is trivial. This procedure generates recursive process:</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> a b)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> a <span class=\"hljs-number\">0</span>)\n      b\n      (<span class=\"hljs-name\">inc</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> (<span class=\"hljs-name\">dec</span> a) b))))</code></pre>\n<p>And this iterative:</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> a b)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> a <span class=\"hljs-number\">0</span>)\n      b\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> (<span class=\"hljs-name\">dec</span> a) (<span class=\"hljs-name\">inc</span> b))))</code></pre>\n<p>We could see this even without substitution model, if function returns itself in the and without any additional operation on its result - it is tail-recursive, so generates iterative process, otherwise - recursive.</p>\n<h2>Exercise 1.10 (Ackerman function)</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">A</span> x y)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cond</span></span> ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> y <span class=\"hljs-number\">0</span>) <span class=\"hljs-number\">0</span>)\n        ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> x <span class=\"hljs-number\">0</span>) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> <span class=\"hljs-number\">2</span> y))\n        ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> y <span class=\"hljs-number\">1</span>) <span class=\"hljs-number\">2</span>)\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">else</span></span> (<span class=\"hljs-name\">A</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> x <span class=\"hljs-number\">1</span>)\n                 (<span class=\"hljs-name\">A</span> x (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> y <span class=\"hljs-number\">1</span>))))))</code></pre>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\">A</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">10</span>)\n    => (<span class=\"hljs-name\">A</span> <span class=\"hljs-number\">0</span> (<span class=\"hljs-name\">A</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">9</span>))\n    => (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> <span class=\"hljs-number\">2</span> (<span class=\"hljs-name\">A</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">9</span>))\n    => (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> <span class=\"hljs-number\">2</span> (<span class=\"hljs-name\">*2</span> (<span class=\"hljs-name\">A</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">8</span>)))\n    ...\n    => (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> <span class=\"hljs-number\">2</span>^9 (<span class=\"hljs-name\">A</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">1</span>))\n    => <span class=\"hljs-number\">2</span>^<span class=\"hljs-number\">10</span></code></pre>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\">A</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">4</span>)\n    => (<span class=\"hljs-name\">A</span> <span class=\"hljs-number\">1</span> (<span class=\"hljs-name\">A</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">3</span>))\n    => <span class=\"hljs-number\">2</span>^(<span class=\"hljs-name\">A</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">3</span>)\n    <span class=\"hljs-comment\">;;; see below ;;;</span>\n    => <span class=\"hljs-number\">2</span>^<span class=\"hljs-number\">16</span></code></pre>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\">A</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">3</span>)\n    => (<span class=\"hljs-name\">A</span> <span class=\"hljs-number\">1</span> (<span class=\"hljs-name\">A</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">2</span>)) \n    => <span class=\"hljs-number\">2</span>^(<span class=\"hljs-name\">A</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">2</span>)\n    <span class=\"hljs-comment\">;;; see below ;;;</span>\n    => <span class=\"hljs-number\">2</span>^<span class=\"hljs-number\">4</span> => <span class=\"hljs-number\">16</span></code></pre>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\">A</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">2</span>)\n    => (<span class=\"hljs-name\">A</span> <span class=\"hljs-number\">1</span> (<span class=\"hljs-name\">A</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">1</span>))\n    => (<span class=\"hljs-name\">A</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span>)\n    => (<span class=\"hljs-name\">A</span> <span class=\"hljs-number\">0</span> (<span class=\"hljs-name\">A</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">1</span>)) \n    => (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">2</span>)\n    => <span class=\"hljs-number\">4</span></code></pre>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\">A</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">3</span>)\n    => (<span class=\"hljs-name\">A</span> <span class=\"hljs-number\">2</span> (<span class=\"hljs-name\">A</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">2</span>))\n    => (<span class=\"hljs-name\">A</span> <span class=\"hljs-number\">2</span> (<span class=\"hljs-name\">A</span> <span class=\"hljs-number\">2</span> (<span class=\"hljs-name\">A</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">1</span>)))\n    => (<span class=\"hljs-name\">A</span> <span class=\"hljs-number\">2</span> (<span class=\"hljs-name\">A</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">2</span>))\n    <span class=\"hljs-comment\">;;; see one above ;;;</span>\n    => (<span class=\"hljs-name\">A</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">4</span>)\n    <span class=\"hljs-comment\">;;; see 3 above ;;;</span>\n    => <span class=\"hljs-number\">2</span>^<span class=\"hljs-number\">16</span></code></pre>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">f</span> n) (<span class=\"hljs-name\">A</span> <span class=\"hljs-number\">0</span> n))</code></pre>\n<p><code>f(n) = 2n</code></p>\n<pre><code class=\"hljs language-scheme\"> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">g</span> n) (<span class=\"hljs-name\">A</span> <span class=\"hljs-number\">1</span> n))</code></pre>\n<p><code>g(n) = 2^n</code></p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">h</span> n) (<span class=\"hljs-name\">A</span> <span class=\"hljs-number\">2</span> n))</code></pre>\n<p><code>h(1) = 2</code>\n<code>h(n) = 2^(h(n-1))</code></p>"},{"id":"sicp1.1","title":"SICP 1.1 The Elements of Programming","date":"2020-06-13","tags":["SICP"],"excerpt":"<p>Decided to finally try and go through this book. Will try to keep journal with notes here.</p>","content":"<p>Decided to finally try and go through this book. Will try to keep journal with notes here.</p>\n<p>Interpreter recommended for it - MIT Scheme, could be installed in Ubuntu by installing package <code>mit-scheme</code>.</p>\n<p>Then <code>scheme</code> command starts interpreter, <code>scheme --load sqr.scm</code> loads &#x26; evaluates file <code>sqr.scm</code>.</p>\n<p>And here is my own implementation for finding the square root:</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">abs</span></span> x)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">&#x3C;</span></span> x <span class=\"hljs-number\">0</span>)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> <span class=\"hljs-number\">0</span> x)\n    x\n  ))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">~=</span> x y)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">&#x3C;</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">abs</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> x y)) <span class=\"hljs-number\">0.0001</span>))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">sqr</span> x) \n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> x x))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">avg</span> a b) \n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> a b) <span class=\"hljs-number\">2</span>))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">sqrt</span></span> x) \n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">sqrt-iter</span> guess) \n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\">~=</span> (<span class=\"hljs-name\">sqr</span> guess) x)\n      guess\n      (<span class=\"hljs-name\">sqrt-iter</span> (<span class=\"hljs-name\">avg</span> guess (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> x guess)))))\n  (<span class=\"hljs-name\">sqrt-iter</span> <span class=\"hljs-number\">1.0</span>))</code></pre>"}],"pages":2,"archives":[{"url":"/month/2021-01/page/1","id":"2021-01","count":4,"title":"2021-01"},{"url":"/month/2020-12/page/1","id":"2020-12","count":1,"title":"2020-12"},{"url":"/month/2020-09/page/1","id":"2020-09","count":2,"title":"2020-09"},{"url":"/month/2020-08/page/1","id":"2020-08","count":2,"title":"2020-08"},{"url":"/month/2020-07/page/1","id":"2020-07","count":10,"title":"2020-07"},{"url":"/month/2020-06/page/1","id":"2020-06","count":7,"title":"2020-06"},{"url":"/month/2018-12/page/1","id":"2018-12","count":1,"title":"2018-12"}],"topics":[{"url":"/tag/MOOC/page/1","id":"MOOC","title":"MOOC","count":2},{"url":"/tag/SICP/page/1","id":"SICP","title":"SICP","count":20},{"url":"/tag/ideas/page/1","id":"ideas","title":"ideas","count":1},{"url":"/tag/notes/page/1","id":"notes","title":"notes","count":5},{"url":"/tag/on writing/page/1","id":"on writing","title":"on writing","count":3}],"tag":"SICP"},"__N_SSG":true}