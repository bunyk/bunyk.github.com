{"pageProps":{"post":{"id":"sicp2.2.3","title":"SICP 2.2.3 Sequences as Conventional Interfaces","date":"2020-07-23","tags":["SICP"],"excerpt":"<p>Here we become skilled in list manipulation and build a set of useful subroutines.</p>","content":"<p>Here we become skilled in list manipulation and build a set of useful subroutines.</p>\n<h2>Exercise 2.33</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">accumulate</span> op initial sequence)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">null?</span></span> sequence)\n      initial\n      (<span class=\"hljs-name\">op</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> sequence)\n          (<span class=\"hljs-name\">accumulate</span> op initial (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> sequence)))))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">map</span></span> p sequence)\n  (<span class=\"hljs-name\">accumulate</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (x y) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> (<span class=\"hljs-name\">p</span> x) y)) nil sequence))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">map</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (x) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> <span class=\"hljs-number\">1</span> x)) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">3</span>))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">append</span></span> seq1 seq2)\n  (<span class=\"hljs-name\">accumulate</span> cons seq2 seq1))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">append</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">3</span>) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">4</span> <span class=\"hljs-number\">5</span>))\n\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">length</span></span> sequence)\n  (<span class=\"hljs-name\">accumulate</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (x y) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> <span class=\"hljs-number\">1</span> y)) <span class=\"hljs-number\">0</span> sequence))</code></pre>\n<h2>Exercise 2.34</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">horner-eval</span> x coefficient-sequence)\n  (<span class=\"hljs-name\">accumulate</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (this-coeff higher-terms) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> this-coeff (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> higher-terms x)))\n              <span class=\"hljs-number\">0</span>\n              coefficient-sequence))\n\n(<span class=\"hljs-name\">horner-eval</span> <span class=\"hljs-number\">2</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">5</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">1</span>))\n<span class=\"hljs-comment\">; 79</span></code></pre>\n<h2>Exercise 2.35</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">identity</span> x) x)\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">count-leaves</span> t)\n  (<span class=\"hljs-name\">accumulate</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (head tail)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">pair?</span></span> head) (<span class=\"hljs-name\">count-leaves</span> head) <span class=\"hljs-number\">1</span>) tail)\n  ) <span class=\"hljs-number\">0</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">map</span></span> identity t)))</code></pre>\n<p>Don't know why map is here...</p>\n<h2>Exercise 2.36</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">accumulate-n</span> op init seqs)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">null?</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> seqs))\n      nil\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> (<span class=\"hljs-name\">accumulate</span> op init (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">map</span></span> car seqs))\n            (<span class=\"hljs-name\">accumulate-n</span> op init (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">map</span></span> cdr seqs)))))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> s (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">3</span>) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">4</span> <span class=\"hljs-number\">5</span> <span class=\"hljs-number\">6</span>) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">7</span> <span class=\"hljs-number\">8</span> <span class=\"hljs-number\">9</span>) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">10</span> <span class=\"hljs-number\">11</span> <span class=\"hljs-number\">12</span>)))\n(<span class=\"hljs-name\">accumulate-n</span> + <span class=\"hljs-number\">0</span> s)</code></pre>\n<h2>Exercise 2.37</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">dot-product</span> v w)\n  (<span class=\"hljs-name\">accumulate</span> + <span class=\"hljs-number\">0</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">map</span></span> * v w)))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">matrix-*-vector</span> m v)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">map</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (m-row) (<span class=\"hljs-name\">dot-product</span> m-row v)) m))\n\n(<span class=\"hljs-name\">matrix-*-vector</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">-1</span>) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">0</span>)) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">0</span>))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">transpose</span> mat)\n  (<span class=\"hljs-name\">accumulate-n</span> cons nil mat))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">matrix-*-matrix</span> m n)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">let</span></span> ((<span class=\"hljs-name\">cols</span> (<span class=\"hljs-name\">transpose</span> n)))\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">map</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (m-row)\n           (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">map</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (n-col)\n                  (<span class=\"hljs-name\">dot-product</span> m-row n-col)\n                )\n            cols\n           )\n         ) m)))</code></pre>\n<h2>Exercise 2.38</h2>\n<p>I guess, if operation is commutative and associative, then it does not matter which fold to use, otherwise it matters.</p>\n<h2>Exercise 2.39</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">reverse</span></span> sequence)\n  (<span class=\"hljs-name\">fold-right</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (x y) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">append</span></span> y (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> x))) nil sequence))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">reverse</span></span> sequence)\n  (<span class=\"hljs-name\">fold-left</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (x y) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> y x)) nil sequence))</code></pre>\n<h1>Exercise 2.40</h1>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">enumerate-interval</span> low high)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">></span></span> low high)\n      nil\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> low (<span class=\"hljs-name\">enumerate-interval</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> low <span class=\"hljs-number\">1</span>) high))))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">flatmap</span> proc seq)\n  (<span class=\"hljs-name\">accumulate</span> append nil (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">map</span></span> proc seq)))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">unique-pairs</span> n)\n  (<span class=\"hljs-name\">flatmap</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (i)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">map</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (j) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> i j)) (<span class=\"hljs-name\">enumerate-interval</span> <span class=\"hljs-number\">1</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> i <span class=\"hljs-number\">1</span>)))\n  ) (<span class=\"hljs-name\">enumerate-interval</span> <span class=\"hljs-number\">2</span> n))\n)\n(<span class=\"hljs-name\">unique-pairs</span> <span class=\"hljs-number\">5</span>)\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">any</span> l) \n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">null?</span></span> l)\n    <span class=\"hljs-literal\">#f</span>\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> l)\n      <span class=\"hljs-literal\">#t</span>\n      (<span class=\"hljs-name\">any</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> l))\n    )\n  )\n)\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">prime?</span> n)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">divisor?</span> x) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">remainder</span></span> n x) <span class=\"hljs-number\">0</span>))\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">not</span></span> (<span class=\"hljs-name\">any</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">map</span></span> divisor? (<span class=\"hljs-name\">enumerate-interval</span> <span class=\"hljs-number\">2</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">truncate</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> n <span class=\"hljs-number\">2</span>))))))\n)\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">test-prime</span>)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">map</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (n) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> n (<span class=\"hljs-name\">prime?</span> n))) (<span class=\"hljs-name\">enumerate-interval</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">20</span>))\n)\n(<span class=\"hljs-name\">test-prime</span>)\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">prime-sum-pairs</span> n)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">prime-sum?</span> pair)\n      (<span class=\"hljs-name\">prime?</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> pair) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cadr</span></span> pair))))\n\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">make-pair-sum</span> pair)\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> pair) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cadr</span></span> pair) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> pair) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cadr</span></span> pair))))\n\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">map</span></span> make-pair-sum\n       (<span class=\"hljs-name\">filter</span> prime-sum? (<span class=\"hljs-name\">unique-pairs</span> n))))\n(<span class=\"hljs-name\">prime-sum-pairs</span> <span class=\"hljs-number\">6</span>)</code></pre>\n<h2>Exercise 2.41</h2>\n<pre><code class=\"hljs language-scheme\"><span class=\"hljs-comment\">; 1 &#x3C;= i &#x3C; j &#x3C; k &#x3C;= n</span>\n<span class=\"hljs-comment\">; i + j + k = s</span>\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">triplets</span> n s)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">build-triplet</span> i j)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">let</span></span> ((<span class=\"hljs-name\">k</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> s i j)))\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">and</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">&#x3C;</span></span> j k) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">&#x3C;=</span></span> k n))\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> i j k)\n        <span class=\"hljs-number\">0</span>\n      )\n    )\n  )\n  (<span class=\"hljs-name\">flatmap</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (i)\n    (<span class=\"hljs-name\">filter</span> pair? (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">map</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (j)\n        (<span class=\"hljs-name\">build-triplet</span> i j)\n    ) (<span class=\"hljs-name\">enumerate-interval</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> i <span class=\"hljs-number\">1</span>) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> n <span class=\"hljs-number\">1</span>)))))\n    (<span class=\"hljs-name\">enumerate-interval</span> <span class=\"hljs-number\">1</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> n <span class=\"hljs-number\">2</span>))\n  ))\n(<span class=\"hljs-name\">triplets</span> <span class=\"hljs-number\">4</span> <span class=\"hljs-number\">6</span>)</code></pre>\n<h2>Exercise 2.42</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> empty-board (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span>)) <span class=\"hljs-comment\">; or nil</span>\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">adjoin-position</span> new-row k rest-of-queens)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> new-row rest-of-queens)\n)\n<span class=\"hljs-comment\">; Check that predicate p(i, elem) is true at least for one of elements of list</span>\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">any</span> p l)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">iter</span> l i)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">null?</span></span> l) <span class=\"hljs-literal\">#f</span>\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\">p</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> l) i)\n        <span class=\"hljs-literal\">#t</span>\n        (<span class=\"hljs-name\">iter</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> l) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> i <span class=\"hljs-number\">1</span>))\n      )\n    )\n  )\n  (<span class=\"hljs-name\">iter</span> l <span class=\"hljs-number\">1</span>)\n)\n(<span class=\"hljs-name\">any</span> = (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">1</span>))\n(<span class=\"hljs-name\">any</span> = (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">4</span>))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">safe?</span> k positions)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">let</span></span> (\n    (<span class=\"hljs-name\">row</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> positions))\n    (<span class=\"hljs-name\">d1</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> positions) <span class=\"hljs-number\">1</span>))\n    (<span class=\"hljs-name\">d2</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> positions) <span class=\"hljs-number\">1</span>))\n  )\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">not</span></span> (<span class=\"hljs-name\">any</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (q i)\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">or</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> q row)\n            (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> d1 (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> q i <span class=\"hljs-number\">1</span>)) <span class=\"hljs-comment\">; i should be increased by 1 because we are in cdr of board</span>\n            (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> d2 (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> q i <span class=\"hljs-number\">1</span>))\n        )\n    ) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> positions)))\n  )\n)\n(<span class=\"hljs-name\">safe?</span> <span class=\"hljs-number\">0</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span>))\n(<span class=\"hljs-name\">safe?</span> <span class=\"hljs-number\">0</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">1</span>))\n(<span class=\"hljs-name\">safe?</span> <span class=\"hljs-number\">0</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">4</span> <span class=\"hljs-number\">2</span>))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">queens</span> board-size)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">queen-cols</span> k)  \n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> k <span class=\"hljs-number\">0</span>)\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> empty-board)\n        (<span class=\"hljs-name\">filter</span>\n         (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (positions) (<span class=\"hljs-name\">safe?</span> k positions))\n         (<span class=\"hljs-name\">flatmap</span>\n          (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (rest-of-queens)\n            (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">map</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (new-row)\n                   (<span class=\"hljs-name\">adjoin-position</span> new-row k rest-of-queens))\n                 (<span class=\"hljs-name\">enumerate-interval</span> <span class=\"hljs-number\">1</span> board-size)))\n          (<span class=\"hljs-name\">queen-cols</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> k <span class=\"hljs-number\">1</span>))))))\n  (<span class=\"hljs-name\">trace</span> queen-cols)\n  (<span class=\"hljs-name\">queen-cols</span> board-size))\n(<span class=\"hljs-name\">queens</span> <span class=\"hljs-number\">6</span>)\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">display-board</span> positions size)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">display-empty</span> n)\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">></span></span> n <span class=\"hljs-number\">0</span>) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">begin</span></span>\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">display</span></span> <span class=\"hljs-string\">\" .\"</span>)\n        (<span class=\"hljs-name\">display-empty</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> n <span class=\"hljs-number\">1</span>))\n      ))\n    )\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">display-row</span> q)\n        (<span class=\"hljs-name\">display-empty</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> q <span class=\"hljs-number\">1</span>))\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">display</span></span> <span class=\"hljs-string\">\" Q\"</span>)\n        (<span class=\"hljs-name\">display-empty</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> size q))\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">newline</span></span>)\n    )\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">for-each</span></span> display-row positions)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">newline</span></span>)\n)\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">test-queens</span> size)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">for-each</span></span>\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (b) (<span class=\"hljs-name\">display-board</span> b size))\n      (<span class=\"hljs-name\">queens</span> size)\n    )\n)\n(<span class=\"hljs-name\">test-queens</span> <span class=\"hljs-number\">6</span>)\n\n<span class=\"hljs-comment\">; Beautiful:</span>\n<span class=\"hljs-comment\">; . . . . Q .</span>\n<span class=\"hljs-comment\">; . . Q . . .</span>\n<span class=\"hljs-comment\">; Q . . . . .</span>\n<span class=\"hljs-comment\">; . . . . . Q</span>\n<span class=\"hljs-comment\">; . . . Q . .</span>\n<span class=\"hljs-comment\">; . Q . . . .</span>\n<span class=\"hljs-comment\">;</span>\n<span class=\"hljs-comment\">; . . . Q . .</span>\n<span class=\"hljs-comment\">; Q . . . . .</span>\n<span class=\"hljs-comment\">; . . . . Q .</span>\n<span class=\"hljs-comment\">; . Q . . . .</span>\n<span class=\"hljs-comment\">; . . . . . Q</span>\n<span class=\"hljs-comment\">; . . Q . . .</span>\n<span class=\"hljs-comment\">;</span>\n<span class=\"hljs-comment\">; . . Q . . .</span>\n<span class=\"hljs-comment\">; . . . . . Q</span>\n<span class=\"hljs-comment\">; . Q . . . .</span>\n<span class=\"hljs-comment\">; . . . . Q .</span>\n<span class=\"hljs-comment\">; Q . . . . .</span>\n<span class=\"hljs-comment\">; . . . Q . .</span>\n<span class=\"hljs-comment\">;</span>\n<span class=\"hljs-comment\">; . Q . . . .</span>\n<span class=\"hljs-comment\">; . . . Q . .</span>\n<span class=\"hljs-comment\">; . . . . . Q</span>\n<span class=\"hljs-comment\">; Q . . . . .</span>\n<span class=\"hljs-comment\">; . . Q . . .</span>\n<span class=\"hljs-comment\">; . . . . Q .</span></code></pre>\n<h2>Exercise 2.43</h2>\n<p>For size 0 basically running time is the same.</p>\n<p>For size 1, we call <code>(quen-cols 0)</code> once, check position 1 and return, same for Louis.</p>\n<p>For size 2, we call <code>(queen-cols 1)</code> once, check positions for next queen 1 and 2, and return. Louis calls (queen-cols 1) twice, because that is inside loop.</p>\n<p>For size 3, we call <code>(queen-cols 2)</code> once, check positions 1, 2 and 3, and return. Louis calls <code>(queens-cols 2)</code> 3 times, each of which calls <code>(queens-cols 1)</code> 2 times.</p>\n<p>So for us queens-cols is called <code>size</code> times, and for Louis <code>(factorial size)</code>. If our eight queens runs for time T, then his program will run 8!/8 T = 7! T = 5040T.</p>"},"archives":[{"url":"/month/2021-01/page/1","id":"2021-01","count":4,"title":"2021-01"},{"url":"/month/2020-12/page/1","id":"2020-12","count":1,"title":"2020-12"},{"url":"/month/2020-09/page/1","id":"2020-09","count":2,"title":"2020-09"},{"url":"/month/2020-08/page/1","id":"2020-08","count":2,"title":"2020-08"},{"url":"/month/2020-07/page/1","id":"2020-07","count":10,"title":"2020-07"},{"url":"/month/2020-06/page/1","id":"2020-06","count":7,"title":"2020-06"},{"url":"/month/2018-12/page/1","id":"2018-12","count":1,"title":"2018-12"}],"topics":[{"url":"/tag/MOOC/page/1","id":"MOOC","title":"MOOC","count":2},{"url":"/tag/SICP/page/1","id":"SICP","title":"SICP","count":20},{"url":"/tag/ideas/page/1","id":"ideas","title":"ideas","count":1},{"url":"/tag/notes/page/1","id":"notes","title":"notes","count":5},{"url":"/tag/on writing/page/1","id":"on writing","title":"on writing","count":3}]},"__N_SSG":true}