{"pageProps":{"post":{"id":"sicp1.2.1","title":"SICP1.2.1 Recursion & Iteration","date":"2020-06-14","tags":["SICP"],"excerpt":"<p>Ok, second subchapter is more challenging, so I'll go by subsections.</p>\n<p>Here is <a href=\"https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book-Z-H-11.html#%25_sec_1.2.1\">link to the chapter of the book I would solve today</a></p>","content":"<p>Ok, second subchapter is more challenging, so I'll go by subsections.</p>\n<p>Here is <a href=\"https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book-Z-H-11.html#%25_sec_1.2.1\">link to the chapter of the book I would solve today</a></p>\n<h2>Exercise 1.9</h2>\n<p>This is trivial. This procedure generates recursive process:</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> a b)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> a <span class=\"hljs-number\">0</span>)\n      b\n      (<span class=\"hljs-name\">inc</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> (<span class=\"hljs-name\">dec</span> a) b))))</code></pre>\n<p>And this iterative:</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> a b)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> a <span class=\"hljs-number\">0</span>)\n      b\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> (<span class=\"hljs-name\">dec</span> a) (<span class=\"hljs-name\">inc</span> b))))</code></pre>\n<p>We could see this even without substitution model, if function returns itself in the and without any additional operation on its result - it is tail-recursive, so generates iterative process, otherwise - recursive.</p>\n<h2>Exercise 1.10 (Ackerman function)</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">A</span> x y)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cond</span></span> ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> y <span class=\"hljs-number\">0</span>) <span class=\"hljs-number\">0</span>)\n        ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> x <span class=\"hljs-number\">0</span>) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> <span class=\"hljs-number\">2</span> y))\n        ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> y <span class=\"hljs-number\">1</span>) <span class=\"hljs-number\">2</span>)\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">else</span></span> (<span class=\"hljs-name\">A</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> x <span class=\"hljs-number\">1</span>)\n                 (<span class=\"hljs-name\">A</span> x (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> y <span class=\"hljs-number\">1</span>))))))</code></pre>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\">A</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">10</span>)\n    => (<span class=\"hljs-name\">A</span> <span class=\"hljs-number\">0</span> (<span class=\"hljs-name\">A</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">9</span>))\n    => (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> <span class=\"hljs-number\">2</span> (<span class=\"hljs-name\">A</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">9</span>))\n    => (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> <span class=\"hljs-number\">2</span> (<span class=\"hljs-name\">*2</span> (<span class=\"hljs-name\">A</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">8</span>)))\n    ...\n    => (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> <span class=\"hljs-number\">2</span>^9 (<span class=\"hljs-name\">A</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">1</span>))\n    => <span class=\"hljs-number\">2</span>^<span class=\"hljs-number\">10</span></code></pre>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\">A</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">4</span>)\n    => (<span class=\"hljs-name\">A</span> <span class=\"hljs-number\">1</span> (<span class=\"hljs-name\">A</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">3</span>))\n    => <span class=\"hljs-number\">2</span>^(<span class=\"hljs-name\">A</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">3</span>)\n    <span class=\"hljs-comment\">;;; see below ;;;</span>\n    => <span class=\"hljs-number\">2</span>^<span class=\"hljs-number\">16</span></code></pre>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\">A</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">3</span>)\n    => (<span class=\"hljs-name\">A</span> <span class=\"hljs-number\">1</span> (<span class=\"hljs-name\">A</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">2</span>)) \n    => <span class=\"hljs-number\">2</span>^(<span class=\"hljs-name\">A</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">2</span>)\n    <span class=\"hljs-comment\">;;; see below ;;;</span>\n    => <span class=\"hljs-number\">2</span>^<span class=\"hljs-number\">4</span> => <span class=\"hljs-number\">16</span></code></pre>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\">A</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">2</span>)\n    => (<span class=\"hljs-name\">A</span> <span class=\"hljs-number\">1</span> (<span class=\"hljs-name\">A</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">1</span>))\n    => (<span class=\"hljs-name\">A</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span>)\n    => (<span class=\"hljs-name\">A</span> <span class=\"hljs-number\">0</span> (<span class=\"hljs-name\">A</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">1</span>)) \n    => (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">2</span>)\n    => <span class=\"hljs-number\">4</span></code></pre>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\">A</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">3</span>)\n    => (<span class=\"hljs-name\">A</span> <span class=\"hljs-number\">2</span> (<span class=\"hljs-name\">A</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">2</span>))\n    => (<span class=\"hljs-name\">A</span> <span class=\"hljs-number\">2</span> (<span class=\"hljs-name\">A</span> <span class=\"hljs-number\">2</span> (<span class=\"hljs-name\">A</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">1</span>)))\n    => (<span class=\"hljs-name\">A</span> <span class=\"hljs-number\">2</span> (<span class=\"hljs-name\">A</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">2</span>))\n    <span class=\"hljs-comment\">;;; see one above ;;;</span>\n    => (<span class=\"hljs-name\">A</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">4</span>)\n    <span class=\"hljs-comment\">;;; see 3 above ;;;</span>\n    => <span class=\"hljs-number\">2</span>^<span class=\"hljs-number\">16</span></code></pre>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">f</span> n) (<span class=\"hljs-name\">A</span> <span class=\"hljs-number\">0</span> n))</code></pre>\n<p><code>f(n) = 2n</code></p>\n<pre><code class=\"hljs language-scheme\"> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">g</span> n) (<span class=\"hljs-name\">A</span> <span class=\"hljs-number\">1</span> n))</code></pre>\n<p><code>g(n) = 2^n</code></p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">h</span> n) (<span class=\"hljs-name\">A</span> <span class=\"hljs-number\">2</span> n))</code></pre>\n<p><code>h(1) = 2</code>\n<code>h(n) = 2^(h(n-1))</code></p>"},"archives":[{"url":"/month/2018-12/page/1","id":"2018-12","count":1,"title":"2018-12"},{"url":"/month/2020-06/page/1","id":"2020-06","count":7,"title":"2020-06"},{"url":"/month/2020-07/page/1","id":"2020-07","count":10,"title":"2020-07"},{"url":"/month/2020-08/page/1","id":"2020-08","count":2,"title":"2020-08"},{"url":"/month/2020-09/page/1","id":"2020-09","count":2,"title":"2020-09"},{"url":"/month/2020-12/page/1","id":"2020-12","count":1,"title":"2020-12"},{"url":"/month/2021-01/page/1","id":"2021-01","count":4,"title":"2021-01"}],"topics":[{"url":"/tag/MOOC/page/1","id":"MOOC","title":"MOOC","count":2},{"url":"/tag/SICP/page/1","id":"SICP","title":"SICP","count":20},{"url":"/tag/ideas/page/1","id":"ideas","title":"ideas","count":1},{"url":"/tag/notes/page/1","id":"notes","title":"notes","count":5},{"url":"/tag/on writing/page/1","id":"on writing","title":"on writing","count":3}]},"__N_SSG":true}