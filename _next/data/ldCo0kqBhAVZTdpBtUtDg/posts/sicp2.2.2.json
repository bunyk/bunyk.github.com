{"pageProps":{"post":{"id":"sicp2.2.2","title":"SICP 2.2.2 Hierarchical structures","date":"2020-07-19","tags":["SICP"],"excerpt":"<p>AKA trees. Here I learned to debug Scheme a little bit, because I wrote code that not just worked from the first try.</p>\n<p>Also here some trivial exercises are skipped, because one with drawing I done on paper and won't upload it here because it is useless, and another is \"What would interpreter print\", which I guessed, tested with interpreter and it was right. If you want to have solution - ask your interpreter.</p>","content":"<p>AKA trees. Here I learned to debug Scheme a little bit, because I wrote code that not just worked from the first try.</p>\n<p>Also here some trivial exercises are skipped, because one with drawing I done on paper and won't upload it here because it is useless, and another is \"What would interpreter print\", which I guessed, tested with interpreter and it was right. If you want to have solution - ask your interpreter.</p>\n<h2>Exercise 2.25</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> l (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">3</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">5</span> <span class=\"hljs-number\">7</span>) <span class=\"hljs-number\">9</span>))\nl\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> l)))))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> l (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">7</span>)))\nl\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> l))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> l (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">1</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">2</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">3</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">4</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">5</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">6</span> <span class=\"hljs-number\">7</span>)))))))\nl\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> l))))))))))))</code></pre>\n<h2>Exercise 2.27</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> x (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span>) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">4</span>)))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">reverse</span></span> x)\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">deep-reverse</span> l)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">rev-el</span> el)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">pair?</span></span> el)\n      (<span class=\"hljs-name\">deep-reverse</span> el)\n      el\n    )\n  )\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">iter</span> src dst)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">null?</span></span> src)\n      dst\n      (<span class=\"hljs-name\">iter</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> src) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> (<span class=\"hljs-name\">rev-el</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> src)) dst))\n    )\n  )\n  (<span class=\"hljs-name\">iter</span> l nil)\n)</code></pre>\n<h2>Exercise 2.28</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">fringe</span> t)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">iter</span> src dst)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cond</span></span>\n      ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">null?</span></span> src) dst)\n      ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">pair?</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> src)) (<span class=\"hljs-name\">iter</span>\n         (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> src)\n         (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">append</span></span> (<span class=\"hljs-name\">iter</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> src) nil) dst)\n      ))\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">else</span></span> (<span class=\"hljs-name\">iter</span>\n          (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> src)\n          (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> src) dst)\n      ))\n    )\n  )\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">reverse</span></span> (<span class=\"hljs-name\">iter</span> t nil))\n)</code></pre>\n<h2>Exercise 2.29</h2>\n<p>Constructors and selectors:</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">make-mobile</span> left right)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> left right))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">left-branch</span> mobile)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> mobile))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">right-branch</span> mobile)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> mobile)))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">make-branch</span> length structure)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> length structure))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">branch-length</span> branch)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> branch))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">branch-structure</span> branch)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> branch)))</code></pre>\n<p>Test data:</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> m1 \n  (<span class=\"hljs-name\">make-mobile</span> \n    (<span class=\"hljs-name\">make-branch</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">10</span>)\n    (<span class=\"hljs-name\">make-branch</span> <span class=\"hljs-number\">1</span> \n        (<span class=\"hljs-name\">make-mobile</span> \n            (<span class=\"hljs-name\">make-branch</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">5</span>)\n            (<span class=\"hljs-name\">make-branch</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">5</span>)\n        )\n    )\n  )\n)\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> m2 \n    (<span class=\"hljs-name\">make-mobile</span>\n        (<span class=\"hljs-name\">make-branch</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">10</span>)\n        (<span class=\"hljs-name\">make-branch</span> <span class=\"hljs-number\">1</span> m1)\n    )\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> m3\n    (<span class=\"hljs-name\">make-mobile</span>\n        (<span class=\"hljs-name\">make-branch</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">10</span>)\n        (<span class=\"hljs-name\">make-branch</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">10</span>)\n    )\n)</code></pre>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">total-weight</span> mobile) \n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">pair?</span></span> mobile)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span>\n      (<span class=\"hljs-name\">total-weight</span> (<span class=\"hljs-name\">branch-structure</span> (<span class=\"hljs-name\">left-branch</span> mobile)))\n      (<span class=\"hljs-name\">total-weight</span> (<span class=\"hljs-name\">branch-structure</span> (<span class=\"hljs-name\">right-branch</span> mobile)))\n    )\n    mobile <span class=\"hljs-comment\">; if not pair - it should be just weight</span>\n  )\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">balanced</span> mobile)\n  <span class=\"hljs-comment\">; weight-b returns weight of mobile if it is balanced, otherwise - negative value</span>\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">weight-b</span> mobile)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">pair?</span></span> mobile)\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">let</span></span> ((<span class=\"hljs-name\">lb</span> (<span class=\"hljs-name\">weight-b</span> (<span class=\"hljs-name\">branch-structure</span> (<span class=\"hljs-name\">left-branch</span> mobile))))) <span class=\"hljs-comment\">; compute left balance</span>\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">&#x3C;</span></span> lb <span class=\"hljs-number\">0</span>)\n          <span class=\"hljs-number\">-1</span> <span class=\"hljs-comment\">; left submobile is not balanced, so this mobile too</span>\n          (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">let</span></span> ((<span class=\"hljs-name\">rb</span> (<span class=\"hljs-name\">weight-b</span> (<span class=\"hljs-name\">branch-structure</span> (<span class=\"hljs-name\">right-branch</span> mobile))))) <span class=\"hljs-comment\">; compute right balance</span>\n            (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">&#x3C;</span></span> rb <span class=\"hljs-number\">0</span>)\n              <span class=\"hljs-number\">-1</span> <span class=\"hljs-comment\">; right submobile is not balanced, so this mobile too</span>\n              (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span>\n                (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> lb (<span class=\"hljs-name\">branch-length</span> (<span class=\"hljs-name\">left-branch</span> mobile)))\n                (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> rb (<span class=\"hljs-name\">branch-length</span> (<span class=\"hljs-name\">right-branch</span> mobile)))\n              )\n                (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> lb rb) <span class=\"hljs-comment\">; finally, balanced case</span>\n                <span class=\"hljs-number\">-1</span> <span class=\"hljs-comment\">; submobiles are balanced, but apply different torques in this</span>\n              )\n            )\n          )\n        )\n      )\n      mobile <span class=\"hljs-comment\">; single weight is already balanced by itself</span>\n    )\n  )\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">></span></span> (<span class=\"hljs-name\">weight-b</span> mobile) <span class=\"hljs-number\">0</span>)\n)\n(<span class=\"hljs-name\">balanced</span> m1)\n(<span class=\"hljs-name\">balanced</span> m2)\n(<span class=\"hljs-name\">balanced</span> m3)</code></pre>\n<p>With <code>balanced</code> I was stuck, too many levels of nesting. As usual, I <a href=\"https://stackoverflow.com/questions/62962576/how-to-find-where-scheme-calls-integer-less\">asked on StackOverflow</a>, went to sleep and in the morning found bug, then someone answered my very obvious question.</p>\n<p>Part d. If we have such constructors:</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">make-mobile</span> left right)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> left right))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">make-branch</span> length structure)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> length structure))</code></pre>\n<p>We only have to change such selectors:</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">right-branch</span> mobile)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> mobile))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">branch-structure</span> branch)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> branch))</code></pre>\n<p>Layers of abstraction are useful (sometimes).</p>\n<h2>Exercise 2.30</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">square-tree</span> t) \n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cond</span></span> \n    ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">null?</span></span> t) nil)\n    ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">pair?</span></span> t) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> (<span class=\"hljs-name\">square-tree</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> t)) (<span class=\"hljs-name\">square-tree</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> t))))\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">else</span></span> (<span class=\"hljs-name\">sqr</span> t))\n  )\n)\n\n(<span class=\"hljs-name\">square-tree</span>\n (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">1</span>\n       (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">2</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">4</span>) <span class=\"hljs-number\">5</span>)\n       (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">6</span> <span class=\"hljs-number\">7</span>)))</code></pre>\n<p>Version with map:</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">square-tree</span> t) \n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">pair?</span></span> t)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">map</span></span> square-tree t)\n    (<span class=\"hljs-name\">sqr</span> t)\n  )\n)</code></pre>\n<h2>Exercise 2.31</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">tree-map</span> f t) \n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">pair?</span></span> t)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">map</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (t) (<span class=\"hljs-name\">tree-map</span> f t)) t)\n    (<span class=\"hljs-name\">f</span> t)\n  )\n)\n\n(<span class=\"hljs-name\">tree-map</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (x) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> x <span class=\"hljs-number\">1</span>))\n (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">1</span>\n       (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">2</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">4</span>) <span class=\"hljs-number\">5</span>)\n       (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-number\">6</span> <span class=\"hljs-number\">7</span>)))</code></pre>\n<h2>Exercise 2.32</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">subsets</span> s)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">null?</span></span> s)\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> nil)\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">let</span></span> ((<span class=\"hljs-name\">rest</span> (<span class=\"hljs-name\">subsets</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> s))))\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">append</span></span>\n          rest\n          (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">map</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (ss) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> s) ss)) rest)\n        ))))</code></pre>\n<p>Emtpy set has only one subset - empty. Otherwise each element in the set doubles number of elements in the set of subsets - it creates subsets that are just like subsets without that element, except that they include it.</p>"},"archives":[{"url":"/month/2018-12/page/1","id":"2018-12","count":1,"title":"2018-12"},{"url":"/month/2020-06/page/1","id":"2020-06","count":7,"title":"2020-06"},{"url":"/month/2020-07/page/1","id":"2020-07","count":10,"title":"2020-07"},{"url":"/month/2020-08/page/1","id":"2020-08","count":2,"title":"2020-08"},{"url":"/month/2020-09/page/1","id":"2020-09","count":2,"title":"2020-09"},{"url":"/month/2020-12/page/1","id":"2020-12","count":1,"title":"2020-12"},{"url":"/month/2021-01/page/1","id":"2021-01","count":4,"title":"2021-01"}],"topics":[{"url":"/tag/MOOC/page/1","id":"MOOC","title":"MOOC","count":2},{"url":"/tag/SICP/page/1","id":"SICP","title":"SICP","count":20},{"url":"/tag/ideas/page/1","id":"ideas","title":"ideas","count":1},{"url":"/tag/notes/page/1","id":"notes","title":"notes","count":5},{"url":"/tag/on writing/page/1","id":"on writing","title":"on writing","count":3}]},"__N_SSG":true}