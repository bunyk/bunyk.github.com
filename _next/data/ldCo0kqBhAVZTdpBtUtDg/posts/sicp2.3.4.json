{"pageProps":{"post":{"id":"sicp2.3.4","title":"SICP 2.3.4 Huffman encoding","date":"2020-08-02","tags":["SICP"],"excerpt":"<p>Exercises to use sets and trees in practice. This topic reminds me of project in Scala course by Martin Odersky.</p>","content":"<p>Exercises to use sets and trees in practice. This topic reminds me of project in Scala course by Martin Odersky.</p>\n<h2>Exercise 2.67</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">make-leaf</span> symbol weight)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> <span class=\"hljs-symbol\">'leaf</span> symbol weight))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">leaf?</span> object)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">eq?</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> object) <span class=\"hljs-symbol\">'leaf</span>))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">symbol-leaf</span> x) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cadr</span></span> x))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">weight-leaf</span> x) (<span class=\"hljs-name\">caddr</span> x))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">make-code-tree</span> left right)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> left\n        right\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">append</span></span> (<span class=\"hljs-name\">symbols</span> left) (<span class=\"hljs-name\">symbols</span> right))\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> (<span class=\"hljs-name\">weight</span> left) (<span class=\"hljs-name\">weight</span> right))))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">left-branch</span> tree) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> tree))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">right-branch</span> tree) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cadr</span></span> tree))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">symbols</span> tree)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\">leaf?</span> tree)\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> (<span class=\"hljs-name\">symbol-leaf</span> tree))\n      (<span class=\"hljs-name\">caddr</span> tree)))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">weight</span> tree)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\">leaf?</span> tree)\n      (<span class=\"hljs-name\">weight-leaf</span> tree)\n      (<span class=\"hljs-name\">cadddr</span> tree)))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">decode</span> bits tree)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">decode-1</span> bits current-branch)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">null?</span></span> bits)\n        '()\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">let</span></span> ((<span class=\"hljs-name\">next-branch</span>\n               (<span class=\"hljs-name\">choose-branch</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> bits) current-branch)))\n          (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\">leaf?</span> next-branch)\n              (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> (<span class=\"hljs-name\">symbol-leaf</span> next-branch)\n                    (<span class=\"hljs-name\">decode-1</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> bits) tree))\n              (<span class=\"hljs-name\">decode-1</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> bits) next-branch)))))\n  (<span class=\"hljs-name\">decode-1</span> bits tree))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">choose-branch</span> bit branch)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cond</span></span> ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> bit <span class=\"hljs-number\">0</span>) (<span class=\"hljs-name\">left-branch</span> branch))\n        ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> bit <span class=\"hljs-number\">1</span>) (<span class=\"hljs-name\">right-branch</span> branch))\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">else</span></span> (<span class=\"hljs-name\">error</span> <span class=\"hljs-string\">\"bad bit -- CHOOSE-BRANCH\"</span> bit))))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">adjoin-set</span> x set)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cond</span></span> ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">null?</span></span> set) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> x))\n        ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">&#x3C;</span></span> (<span class=\"hljs-name\">weight</span> x) (<span class=\"hljs-name\">weight</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> set))) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> x set))\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">else</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> set)\n                    (<span class=\"hljs-name\">adjoin-set</span> x (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> set))))))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> sample-tree\n  (<span class=\"hljs-name\">make-code-tree</span> (<span class=\"hljs-name\">make-leaf</span> <span class=\"hljs-symbol\">'A</span> <span class=\"hljs-number\">4</span>)\n                  (<span class=\"hljs-name\">make-code-tree</span>\n                   (<span class=\"hljs-name\">make-leaf</span> <span class=\"hljs-symbol\">'B</span> <span class=\"hljs-number\">2</span>)\n                   (<span class=\"hljs-name\">make-code-tree</span> (<span class=\"hljs-name\">make-leaf</span> <span class=\"hljs-symbol\">'D</span> <span class=\"hljs-number\">1</span>)\n                                   (<span class=\"hljs-name\">make-leaf</span> <span class=\"hljs-symbol\">'C</span> <span class=\"hljs-number\">1</span>)))))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> sample-message '(<span class=\"hljs-number\">0</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">0</span>))\n\n(<span class=\"hljs-name\">decode</span> sample-message sample-tree)\n<span class=\"hljs-comment\">;Value 14: (a d a b b c a)</span></code></pre>\n<h2>Exercise 2.68</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">encode</span> message tree)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">null?</span></span> message)\n      '()\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">append</span></span> (<span class=\"hljs-name\">encode-symbol</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> message) tree)\n              (<span class=\"hljs-name\">encode</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> message) tree))))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">encode-symbol</span> sym tree)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cond</span></span> \n        ((<span class=\"hljs-name\">leaf?</span> tree) '())\n        ((<span class=\"hljs-name\">element-of-set?</span> sym (<span class=\"hljs-name\">symbols</span> (<span class=\"hljs-name\">left-branch</span> tree)))\n         (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> <span class=\"hljs-number\">0</span> (<span class=\"hljs-name\">encode-symbol</span> sym (<span class=\"hljs-name\">left-branch</span> tree))))\n        ((<span class=\"hljs-name\">element-of-set?</span> sym (<span class=\"hljs-name\">symbols</span> (<span class=\"hljs-name\">right-branch</span> tree)))\n         (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> <span class=\"hljs-number\">1</span> (<span class=\"hljs-name\">encode-symbol</span> sym (<span class=\"hljs-name\">right-branch</span> tree))))\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">else</span></span> (<span class=\"hljs-name\">error</span> <span class=\"hljs-string\">\"encode-symbol fails for symbol\"</span> sym <span class=\"hljs-string\">\" with tree \"</span> tree))\n    )\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">element-of-set?</span> x set)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cond</span></span>\n        ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">null?</span></span> set) <span class=\"hljs-literal\">#f</span>)\n        ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">equal?</span></span> x (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> set)) <span class=\"hljs-literal\">#t</span>)\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">else</span></span> (<span class=\"hljs-name\">element-of-set?</span> x (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> set)))\n    )\n)\n\n\n(<span class=\"hljs-name\">encode</span> '(a d a b b c a) sample-tree)</code></pre>\n<h2>Exercise 2.69</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">make-leaf-set</span> pairs)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">null?</span></span> pairs)\n      '()\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">let</span></span> ((<span class=\"hljs-name\">pair</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> pairs)))\n        (<span class=\"hljs-name\">adjoin-set</span> (<span class=\"hljs-name\">make-leaf</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> pair)    <span class=\"hljs-comment\">; symbol</span>\n                               (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cadr</span></span> pair))  <span class=\"hljs-comment\">; frequency</span>\n                    (<span class=\"hljs-name\">make-leaf-set</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> pairs))))))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">adjoin-set</span> x set)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cond</span></span> ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">null?</span></span> set) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">list</span></span> x))\n        ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">&#x3C;</span></span> (<span class=\"hljs-name\">weight</span> x) (<span class=\"hljs-name\">weight</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> set))) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> x set))\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">else</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cons</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> set)\n                    (<span class=\"hljs-name\">adjoin-set</span> x (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> set))))))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">generate-huffman-tree</span> pairs)\n  (<span class=\"hljs-name\">successive-merge</span> (<span class=\"hljs-name\">make-leaf-set</span> pairs)))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">successive-merge</span> forest)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">null?</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cdr</span></span> forest)) <span class=\"hljs-comment\">; single element</span>\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> forest) <span class=\"hljs-comment\">; means we merged all trees and could return the only element</span>\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">let</span></span> ( <span class=\"hljs-comment\">; othwerise let's take two smallest</span>\n            (<span class=\"hljs-name\">smallest1</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">car</span></span> forest))\n            (<span class=\"hljs-name\">smallest2</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cadr</span></span> forest))\n            (<span class=\"hljs-name\">tail</span> (<span class=\"hljs-name\">cddr</span> forest))\n        )\n            (<span class=\"hljs-name\">successive-merge</span> (<span class=\"hljs-name\">adjoin-set</span>\n                (<span class=\"hljs-name\">make-code-tree</span> smallest1 smallest2) <span class=\"hljs-comment\">; merge them</span>\n                tail <span class=\"hljs-comment\">; and add to the remaining set of trees</span>\n            ))\n        )\n    )\n)\n\n(<span class=\"hljs-name\">generate-huffman-tree</span> '((a <span class=\"hljs-number\">1</span>) (b <span class=\"hljs-number\">1</span>) (c <span class=\"hljs-number\">5</span>)))</code></pre>\n<h2>Exercise 2.70</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> rock-code (<span class=\"hljs-name\">generate-huffman-tree</span> '(\n    (A \t    <span class=\"hljs-number\">2</span>)\n    (BOOM \t<span class=\"hljs-number\">1</span>)\n    (GET \t<span class=\"hljs-number\">2</span>)\n    (JOB \t<span class=\"hljs-number\">2</span>)\n    (NA \t<span class=\"hljs-number\">16</span>)\n    (SHA \t<span class=\"hljs-number\">4</span>)\n    (YIP \t<span class=\"hljs-number\">9</span>)\n    (WAH \t<span class=\"hljs-number\">1</span>) \n)))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> rock-song '(Get a job\n\nSha na na na na na na na na\n\nGet a job\n\nSha na na na na na na na na\n\nWah yip yip yip yip yip yip yip yip yip\n\nSha boom\n))</code></pre>\n<p>How many bits are required for encoding?</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">length</span></span> (<span class=\"hljs-name\">encode</span> rock-song rock-code))\n<span class=\"hljs-comment\">;Value: 84</span></code></pre>\n<p>What is the smallest number of bits that would be needed to encode this song if we used a fixed-length code for the eight-symbol alphabet?</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> <span class=\"hljs-number\">3</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">length</span></span> rock-song))\n<span class=\"hljs-comment\">;Value: 108</span></code></pre>\n<h2>Exercise 2.71</h2>\n<p>Most frequent symbol is encoded in one bit, least frequent - in n bits.</p>\n<h2>Exercise 2.72</h2>\n<p>If search in set is linear, then for the most frequent symbol endoing is done in O(n), for the least frequent - in O(n2). If search is done in log(n) - then encoding could be done from log(n) to n*log(n)</p>"},"archives":[{"url":"/month/2018-12/page/1","id":"2018-12","count":1,"title":"2018-12"},{"url":"/month/2020-06/page/1","id":"2020-06","count":7,"title":"2020-06"},{"url":"/month/2020-07/page/1","id":"2020-07","count":10,"title":"2020-07"},{"url":"/month/2020-08/page/1","id":"2020-08","count":2,"title":"2020-08"},{"url":"/month/2020-09/page/1","id":"2020-09","count":2,"title":"2020-09"},{"url":"/month/2020-12/page/1","id":"2020-12","count":1,"title":"2020-12"},{"url":"/month/2021-01/page/1","id":"2021-01","count":4,"title":"2021-01"}],"topics":[{"url":"/tag/MOOC/page/1","id":"MOOC","title":"MOOC","count":2},{"url":"/tag/SICP/page/1","id":"SICP","title":"SICP","count":20},{"url":"/tag/ideas/page/1","id":"ideas","title":"ideas","count":1},{"url":"/tag/notes/page/1","id":"notes","title":"notes","count":5},{"url":"/tag/on writing/page/1","id":"on writing","title":"on writing","count":3}]},"__N_SSG":true}