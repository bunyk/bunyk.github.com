{"pageProps":{"id":"sicp3.3.1","title":"SICP3.3.1 Mutable list structure","date":"2022-10-31T17:19:37.000Z","tags":["SICP"],"updated_at":"","content":"<p>This chapter seems to be not about state itself, but about the weird recursive data structures that you could have when you have assignment. Like lists that contain themselves. Could you build such list without mutation? Well, I don't think so, because to add a list to a list, you should already have a list you add. And you could not do that with just one <code>cons</code>.</p>\n<p>You could think that I skipped section 3.2. I did not, but exercises there do not ask to write code, just draw some diagrams or guess output. You don't want to look at that scribbles, because they look like this:</p>\n<h2 id=\"exercise-315\">Exercise 3.15</h2>\n<p><img src=\"/content/sicp-scribble-337.png\" alt=\"My scribbles\" title=\"My Scheme environment scribbles\"></p>\n<h3 id=\"exercise-316\">Exercise 3.16</h3>\n<p>Having this procedure to count pairs in list:</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">count-pairs</span> x)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">not</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">pair?</span></span> x))\n\t<span class=\"hljs-number\">0</span>\n\t(<span class=\"hljs-name\"><span class=\"hljs-built_in\">+</span></span> (<span class=\"hljs-name\">count-pairs</span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">car</span></span> x))\n\t   (<span class=\"hljs-name\">count-pairs</span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cdr</span></span> x))\n\t   <span class=\"hljs-number\">1</span>)))</code></pre>\n<p>p3, p4, p7 and p3 again are structures made exactly from 3 pairs for which this function returns\n3, 4, 7 pairs and maximum recursion depth errors respectively.</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> p3 (<span class=\"hljs-name\"><span class=\"hljs-built_in\">list</span></span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">3</span>))\np<span class=\"hljs-number\">3</span> <span class=\"hljs-comment\">; (1 2 3)</span>\n(<span class=\"hljs-name\">count-pairs</span> p3)\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> c (<span class=\"hljs-name\"><span class=\"hljs-built_in\">list</span></span> <span class=\"hljs-number\">3</span>))\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> p4 (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cons</span></span> c (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cons</span></span> <span class=\"hljs-number\">2</span> c)))\np<span class=\"hljs-number\">4</span> <span class=\"hljs-comment\">; ((3) 2 3)</span>\n(<span class=\"hljs-name\">count-pairs</span> p4)\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> a (<span class=\"hljs-name\"><span class=\"hljs-built_in\">list</span></span> <span class=\"hljs-number\">1</span>))\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> b (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cons</span></span> a a))\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> p7 (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cons</span></span> b b))\np<span class=\"hljs-number\">7</span><span class=\"hljs-comment\">; (((1) 1) (1) 1)</span>\n(<span class=\"hljs-name\">count-pairs</span> p7)\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">set-cdr!</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cdr</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cdr</span></span> p3)) p3)\np<span class=\"hljs-number\">3</span>\n(<span class=\"hljs-name\">count-pairs</span> p3) <span class=\"hljs-comment\">; Aborting!: maximum recursion depth exceeded</span></code></pre>\n<h3 id=\"exercise-317\">Exercise 3.17</h3>\n<p>Correct <code>count-pairs</code>. Returns 3 for all the tests in previous exercise.</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">new-set</span>)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> items '())\n\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">in</span> el items) \n\t(<span class=\"hljs-name\"><span class=\"hljs-built_in\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">null?</span></span> items)\n\t  false\n\t  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">eq?</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">car</span></span> items) el)\n\t\ttrue\n\t\t(<span class=\"hljs-name\">in</span> el (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cdr</span></span> items)))))\n\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">add</span> el)\n\t(<span class=\"hljs-name\"><span class=\"hljs-built_in\">set!</span></span> items (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cons</span></span> el items)))\n\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">dispatch</span> m)\n\t(<span class=\"hljs-name\"><span class=\"hljs-built_in\">cond</span></span> \n\t  ((<span class=\"hljs-name\"><span class=\"hljs-built_in\">eq?</span></span> m <span class=\"hljs-symbol\">'add</span>) add)\n\t  ((<span class=\"hljs-name\"><span class=\"hljs-built_in\">eq?</span></span> m <span class=\"hljs-symbol\">'in</span>) (<span class=\"hljs-name\"><span class=\"hljs-built_in\">lambda</span></span> (el) (<span class=\"hljs-name\">in</span> el items)))\n\t  ((<span class=\"hljs-name\"><span class=\"hljs-built_in\">eq?</span></span> m <span class=\"hljs-symbol\">'as-list</span>) items)))\n\n  dispatch)\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">in-set?</span> set el)\n  ((<span class=\"hljs-name\">set</span> <span class=\"hljs-symbol\">'in</span>) el))\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">add-to-set</span> set el)\n  ((<span class=\"hljs-name\">set</span> <span class=\"hljs-symbol\">'add</span>) el))\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">as-list</span> set)\n  (<span class=\"hljs-name\">set</span> <span class=\"hljs-symbol\">'as-list</span>))\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> ts (<span class=\"hljs-name\">new-set</span>))<span class=\"hljs-comment\">; test set</span>\n(<span class=\"hljs-name\">as-list</span> ts)\n(<span class=\"hljs-name\">add-to-set</span> ts <span class=\"hljs-number\">1</span>)\n(<span class=\"hljs-name\">as-list</span> ts)\n(<span class=\"hljs-name\">add-to-set</span> ts <span class=\"hljs-number\">2</span>)\n(<span class=\"hljs-name\">as-list</span> ts)\n(<span class=\"hljs-name\">in-set?</span> ts <span class=\"hljs-number\">1</span>)\n(<span class=\"hljs-name\">in-set?</span> ts <span class=\"hljs-number\">3</span>)\n(<span class=\"hljs-name\">add-to-set</span> ts <span class=\"hljs-number\">3</span>)\n(<span class=\"hljs-name\">as-list</span> ts)\n(<span class=\"hljs-name\">in-set?</span> ts <span class=\"hljs-number\">3</span>)\n\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">count-pairs</span> x)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> counted (<span class=\"hljs-name\">new-set</span>))\n\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">count-uncounted</span> x)\n\t(<span class=\"hljs-name\"><span class=\"hljs-built_in\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">or</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">not</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">pair?</span></span> x)) (<span class=\"hljs-name\">in-set?</span> counted x))\n\t  <span class=\"hljs-number\">0</span>\n\t  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">begin</span></span>\n\t\t(<span class=\"hljs-name\">add-to-set</span> counted x)\n\t\t(<span class=\"hljs-name\"><span class=\"hljs-built_in\">+</span></span> <span class=\"hljs-number\">1</span>\n\t\t   (<span class=\"hljs-name\">count-uncounted</span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">car</span></span> x))\n\t\t   (<span class=\"hljs-name\">count-uncounted</span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cdr</span></span> x))\n\t\t)\n\t  )\n\t)\n  )\n\n  (<span class=\"hljs-name\">count-uncounted</span> x)\n)</code></pre>\n<h3 id=\"exercise-318\">Exercise 3.18</h3>\n<p>Detect a cycle in list. It says the only one that makes interation with <code>cdr</code> to go into infinite loop, but it's not very hard to make one that finds loops in whole graph of pairs.</p>\n<p>Wikipedia on cycles:</p>\n<blockquote>\n<p>The existence of a cycle in directed and undirected graphs can be determined by whether depth-first search (DFS) finds an edge that points to an ancestor of the current vertex (it contains a back edge).</p>\n</blockquote>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">in-list?</span> l el) \n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cond</span></span> \n\t((<span class=\"hljs-name\"><span class=\"hljs-built_in\">null?</span></span> l) false)\n\t((<span class=\"hljs-name\"><span class=\"hljs-built_in\">eq?</span></span> el (<span class=\"hljs-name\"><span class=\"hljs-built_in\">car</span></span> l)) true)\n\t(<span class=\"hljs-name\"><span class=\"hljs-built_in\">else</span></span> (<span class=\"hljs-name\">in-list?</span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cdr</span></span> l) el))\n  )\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">has-cycle?</span> l) \n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">visit</span> node path)\n\t(<span class=\"hljs-name\"><span class=\"hljs-built_in\">cond</span></span> \n\t  ((<span class=\"hljs-name\"><span class=\"hljs-built_in\">not</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">pair?</span></span> node)) false)<span class=\"hljs-comment\">; Finished DFS in this subtree</span>\n\t  ((<span class=\"hljs-name\">in-list?</span> path node) true) <span class=\"hljs-comment\">; Found back edge</span>\n\t  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">else</span></span> \n\t\t(<span class=\"hljs-name\"><span class=\"hljs-built_in\">let</span></span> ((<span class=\"hljs-name\">new-path</span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cons</span></span> node path))) <span class=\"hljs-comment\">; visit from this node</span>\n\t\t  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">or</span></span>\n\t\t\t(<span class=\"hljs-name\">visit</span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">car</span></span> node) new-path) <span class=\"hljs-comment\">; check for loops in car</span>\n\t\t\t(<span class=\"hljs-name\">visit</span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cdr</span></span> node) new-path) <span class=\"hljs-comment\">; check for loops in cdr</span>\n\t\t  )\n\t\t)\n\t  )\n\t)\n  )\n  <span class=\"hljs-comment\">; (trace visit)</span>\n  (<span class=\"hljs-name\">visit</span> l '())\n)\n\n<span class=\"hljs-comment\">; FROM PREVIOUS EXERCISE</span>\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> p3 (<span class=\"hljs-name\"><span class=\"hljs-built_in\">list</span></span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">3</span>))\np<span class=\"hljs-number\">3</span> <span class=\"hljs-comment\">; (1 2 3)</span>\n(<span class=\"hljs-name\">has-cycle?</span> p3)\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> c (<span class=\"hljs-name\"><span class=\"hljs-built_in\">list</span></span> <span class=\"hljs-number\">3</span>))\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> p4 (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cons</span></span> c (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cons</span></span> <span class=\"hljs-number\">2</span> c)))\np<span class=\"hljs-number\">4</span> <span class=\"hljs-comment\">; ((3) 2 3)</span>\n(<span class=\"hljs-name\">has-cycle?</span> p4)\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">set-cdr!</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cdr</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cdr</span></span> p3)) p3)\np<span class=\"hljs-number\">3</span>\n(<span class=\"hljs-name\">has-cycle?</span> p3)\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> p1 (<span class=\"hljs-name\"><span class=\"hljs-built_in\">list</span></span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">3</span>))\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">set-car!</span></span> p1 p1)\np<span class=\"hljs-number\">1</span>\n(<span class=\"hljs-name\">has-cycle?</span> p1)</code></pre>\n<h3 id=\"exescise-319\">Exescise 3.19</h3>\n<p>Redo Exescise 3.18 using an algorighm that takes only a constant amount of space. (This requires a very clever idea.).</p>\n<p>I know which idea, but for for this idea to work, we need to stick to definition of loop from 3.18, view the list only as a list that could loop on the end, not a graph of pairs.</p>\n<p>I know this idea because of <a href=\"https://www.youtube.com/watch?v=pKO9UjSeLew\">video \"If Programming Was An Anime\"</a>.</p>\n<blockquote>\n<p>This question is ...</p>\n<p>trivial</p>\n<p>Solving this in linear time and constant space requires Floyd's Tortoise and Hare</p>\n</blockquote>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">has-cycle?</span> l) \n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">iter</span> tortoise hare)\n\t(<span class=\"hljs-name\"><span class=\"hljs-built_in\">cond</span></span>\n\t  ((<span class=\"hljs-name\"><span class=\"hljs-built_in\">null?</span></span> hare) false) <span class=\"hljs-comment\">; hare reached finish, there is no loop</span>\n\t  ((<span class=\"hljs-name\"><span class=\"hljs-built_in\">eq?</span></span> tortoise hare) true) <span class=\"hljs-comment\">; loop race finished, there is a loop</span>\n\t  ((<span class=\"hljs-name\"><span class=\"hljs-built_in\">null?</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cdr</span></span> hare)) false) <span class=\"hljs-comment\">; hare reached finish</span>\n\t  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">else</span></span> (<span class=\"hljs-name\">iter</span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cdr</span></span> tortoise) (<span class=\"hljs-name\">cddr</span> hare))) <span class=\"hljs-comment\">; continue race</span>\n\t)\n  )\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cond</span></span>  <span class=\"hljs-comment\">; first, handle some edge cases</span>\n\t((<span class=\"hljs-name\"><span class=\"hljs-built_in\">null?</span></span> l) false) <span class=\"hljs-comment\">; empty lists have no cycles</span>\n\t((<span class=\"hljs-name\"><span class=\"hljs-built_in\">null?</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cdr</span></span> l)) false) <span class=\"hljs-comment\">; one-element lists have no cycles</span>\n  \t(<span class=\"hljs-name\"><span class=\"hljs-built_in\">else</span></span> (<span class=\"hljs-name\">iter</span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cdr</span></span> l) (<span class=\"hljs-name\">cddr</span> l))) <span class=\"hljs-comment\">; start the race</span>\n  )\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> p1 (<span class=\"hljs-name\"><span class=\"hljs-built_in\">list</span></span> <span class=\"hljs-number\">1</span>))\n(<span class=\"hljs-name\">has-cycle?</span> p1)\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">set-cdr!</span></span> p1 p1)\np<span class=\"hljs-number\">1</span>\n(<span class=\"hljs-name\">has-cycle?</span> p1)\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> p3 (<span class=\"hljs-name\"><span class=\"hljs-built_in\">list</span></span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">3</span>))\np<span class=\"hljs-number\">3</span>\n(<span class=\"hljs-name\">has-cycle?</span> p3)\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">set-cdr!</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cdr</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cdr</span></span> p3)) p3)\np<span class=\"hljs-number\">3</span>\n(<span class=\"hljs-name\">has-cycle?</span> p3)</code></pre>"},"__N_SSG":true}