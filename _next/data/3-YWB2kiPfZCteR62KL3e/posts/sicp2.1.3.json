{"pageProps":{"id":"sicp2.1.3","title":"SICP 2.1.3 Meaning of data","date":"2020-07-10T19:02:43.000Z","tags":["SICP"],"updated_at":"2021-04-20T00:38:16+02:00","content":"<p>This section blows your mind by showing that data could be represented by functions. That's kid of obvious that array or assotiative array could be replaced by function that returns value by index, but here you replace with functions even the most basic data type - integer. Not for practical reasons, but I guess to achieve satory about lambda calculus.</p>\n<h2>Exercise 2.4</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cons</span></span> x y)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">lambda</span></span> (m) (<span class=\"hljs-name\">m</span> x y)))\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">car</span></span> z)\n  (<span class=\"hljs-name\">z</span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">lambda</span></span> (p q) p)))\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cdr</span></span> z)\n  (<span class=\"hljs-name\">z</span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">lambda</span></span> (p q) q)))</code></pre>\n<h2>Exercise 2.5</h2>\n<pre><code class=\"hljs language-scheme\"><span class=\"hljs-comment\">; Recursive process and linear time, could be done better</span>\n<span class=\"hljs-comment\">; but I'm to lazy to copy from previous exercises</span>\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">pow</span> x n) \n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">=</span></span> n <span class=\"hljs-number\">0</span>) <span class=\"hljs-number\">1</span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">*</span></span> x (<span class=\"hljs-name\">pow</span> x (<span class=\"hljs-name\"><span class=\"hljs-built_in\">-</span></span> n <span class=\"hljs-number\">1</span>))))\n)\n\n<span class=\"hljs-comment\">; iterative linear, not sure if could be made better</span>\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">count-divisor</span> x d)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">iter</span> x count)\n      (<span class=\"hljs-name\"><span class=\"hljs-built_in\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">></span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">remainder</span></span> x d) <span class=\"hljs-number\">0</span>)\n        count\n        (<span class=\"hljs-name\">iter</span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">/</span></span> x d) (<span class=\"hljs-name\"><span class=\"hljs-built_in\">+</span></span> count <span class=\"hljs-number\">1</span>))\n      )\n  )\n  (<span class=\"hljs-name\">iter</span> x <span class=\"hljs-number\">0</span>)\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cons</span></span> x y)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">*</span></span> (<span class=\"hljs-name\">pow</span> <span class=\"hljs-number\">2</span> x) (<span class=\"hljs-name\">pow</span> <span class=\"hljs-number\">3</span> y))\n) \n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">car</span></span> z)\n  (<span class=\"hljs-name\">count-divisor</span> z <span class=\"hljs-number\">2</span>)\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cdr</span></span> z)\n  (<span class=\"hljs-name\">count-divisor</span> z <span class=\"hljs-number\">3</span>)\n)</code></pre>\n<h2>Exercise 2.6</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> zero (<span class=\"hljs-name\"><span class=\"hljs-built_in\">lambda</span></span> (f) (<span class=\"hljs-name\"><span class=\"hljs-built_in\">lambda</span></span> (x) x)))\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">inc</span> n) (<span class=\"hljs-name\"><span class=\"hljs-built_in\">lambda</span></span> (f) (<span class=\"hljs-name\"><span class=\"hljs-built_in\">lambda</span></span> (x) (<span class=\"hljs-name\">f</span> ((<span class=\"hljs-name\">n</span> f) x)))))\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> one (<span class=\"hljs-name\"><span class=\"hljs-built_in\">lambda</span></span> (f) (<span class=\"hljs-name\"><span class=\"hljs-built_in\">lambda</span></span> (x) (<span class=\"hljs-name\">f</span> x))))\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> two (<span class=\"hljs-name\"><span class=\"hljs-built_in\">lambda</span></span> (f) (<span class=\"hljs-name\"><span class=\"hljs-built_in\">lambda</span></span> (x) (<span class=\"hljs-name\">f</span> (<span class=\"hljs-name\">f</span> x)))))\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">plus</span> a b)\n    (<span class=\"hljs-name\"><span class=\"hljs-built_in\">lambda</span></span> (f) (<span class=\"hljs-name\"><span class=\"hljs-built_in\">lambda</span></span> (x) ((<span class=\"hljs-name\">a</span> f) ((<span class=\"hljs-name\">b</span> f) x))))\n)\n\n<span class=\"hljs-comment\">; To debug if I placed parentheses correctly :)</span>\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">church-to-int</span> n)\n  ((<span class=\"hljs-name\">n</span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">lambda</span></span> (x) (<span class=\"hljs-name\"><span class=\"hljs-built_in\">+</span></span> x <span class=\"hljs-number\">1</span>))) <span class=\"hljs-number\">0</span>)\n)\n\n(<span class=\"hljs-name\">church-to-int</span> (<span class=\"hljs-name\">plus</span> one two))\n<span class=\"hljs-comment\">;Value: 3</span></code></pre>\n<p>There is also nice video from Computerphile that explains how to build Boolean algebra from lambda calculus:\n{{&#x3C; youtube eis11j_iGMs >}}</p>"},"__N_SSG":true}