{"pageProps":{"id":"sicp3.3.4","title":"SICP3.3.4 A simulator for digital cirtuits","date":"2022-11-08T18:19:15.000Z","tags":["SICP"],"updated_at":"","content":"<p>I tried chapter 3.3.2 Representing queues, but it was easy and boring.</p>\n<p>Solution to Exercise 3.21 looks like this:</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">print-queue</span> queue)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">display</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">car</span></span> queue))\n)</code></pre>\n<p>3.3.3 is even more boring, and I even not bothered to try if it's hard or easy. So I skipped them both. Still, here we have more than enough code.</p>\n<p>But turned out that simulator of digital circuits uses queue data structure from there. And I made a bug in it's implementation, by forgetting to update the pointer at the end of the queue, which led me to a lot of debugging of circuits code, until I realized that bug is in queue code.</p>\n<p>This chapter is very interesting not only because of digital circuits emulation, but also because you build your own event system. In particular something similar to <code>setTimeout</code> in JavasScript. It's also inspiring. Now I have an itch to build graphical circuits simulator, the one similar to <a href=\"https://github.com/SebLague/Digital-Logic-Sim\">Digital-Logic-Sim</a> of Sebastian Lague. Or maybe play a game \"<a href=\"https://store.steampowered.com/app/1444480/Turing_Complete/\">Turing Complete</a>\"</p>\n<p>And I feel difference from other chapters: functions here were mostly called for side-effects, not to return values. So when you call something like full-adder, it does nothing, it just connects inputs with outputs. Then you set values for inputs, run the \"event loop\", and read values from outputs. Full-adder by itself returns nothing.</p>\n<p>Also, in this chapter you could not test your solutions until you get to it's end, because implementation of some utilities like agenda is given only after they are used. So I'll give most exercises in one listing, so it could be run in scheme interpeter.</p>\n<h2 id=\"code\">Code</h2>\n<pre><code class=\"hljs language-scheme\"><span class=\"hljs-comment\">;;;;;;;;;;;;;;;;;;;;;;;;; Wire</span>\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">make-wire</span>)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">let</span></span> (\n    (<span class=\"hljs-name\">signal-value</span> false)\n    (<span class=\"hljs-name\">action-procedures</span> '())\n  )\n\t(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">set-my-signal!</span> new-value)\n\t  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">not</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">eq?</span></span> signal-value new-value))\n\t\t(<span class=\"hljs-name\"><span class=\"hljs-built_in\">begin</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">set!</span></span> signal-value new-value)\n\t\t\t   (<span class=\"hljs-name\">call-each</span> action-procedures)\n\t\t)\n\t  )\n\t  <span class=\"hljs-symbol\">'done</span>\n\t)\n\n\t(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">accept-action-procedure!</span> proc)\n\t  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">set!</span></span> action-procedures (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cons</span></span> proc action-procedures))\n\t  (<span class=\"hljs-name\">proc</span>) <span class=\"hljs-comment\">; Exercise 3.31 asks why this is here</span>\n\t)\n\t(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">dispatch</span> m)\n\t  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cond</span></span> \n\t\t((<span class=\"hljs-name\"><span class=\"hljs-built_in\">eq?</span></span> m <span class=\"hljs-symbol\">'get-signal</span>) signal-value)\n\t\t((<span class=\"hljs-name\"><span class=\"hljs-built_in\">eq?</span></span> m <span class=\"hljs-symbol\">'set-signal!</span>) set-my-signal!)\n\t\t((<span class=\"hljs-name\"><span class=\"hljs-built_in\">eq?</span></span> m <span class=\"hljs-symbol\">'add-action!</span>) accept-action-procedure!)\n\t\t(<span class=\"hljs-name\"><span class=\"hljs-built_in\">else</span></span> (<span class=\"hljs-name\">error</span> <span class=\"hljs-string\">\"Unknown operation on wire\"</span> m))\n\t  )\n\t)\n\tdispatch\n  )\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">call-each</span> procedures)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">null?</span></span> procedures)\n\t<span class=\"hljs-symbol\">'done</span>\n\t(<span class=\"hljs-name\"><span class=\"hljs-built_in\">begin</span></span>\n\t  ((<span class=\"hljs-name\"><span class=\"hljs-built_in\">car</span></span> procedures))\n\t  (<span class=\"hljs-name\">call-each</span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cdr</span></span> procedures))\n\t)\n  )\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">get-signal</span> wire)\n  (<span class=\"hljs-name\">wire</span> <span class=\"hljs-symbol\">'get-signal</span>)\n)\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">set-signal!</span> wire new-value)\n  ((<span class=\"hljs-name\">wire</span> <span class=\"hljs-symbol\">'set-signal!</span>) new-value)\n)\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">add-action!</span> wire procedure)\n  ((<span class=\"hljs-name\">wire</span> <span class=\"hljs-symbol\">'add-action!</span>) procedure)\n)\n\n<span class=\"hljs-comment\">;;;;;;;;;;;;;;;;;;;;;;;;; Agenda</span>\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">after-delay</span> delay action)\n  (<span class=\"hljs-name\">add-to-agenda!</span>\n\t(<span class=\"hljs-name\"><span class=\"hljs-built_in\">+</span></span> delay (<span class=\"hljs-name\">current-time</span> the-agenda))\n\taction\n\tthe-agenda\n  )\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">propagate</span>)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">if</span></span> (<span class=\"hljs-name\">empty-agenda?</span> the-agenda)\n\t<span class=\"hljs-symbol\">'done</span>\n\t(<span class=\"hljs-name\"><span class=\"hljs-built_in\">let</span></span> (\n\t\t(<span class=\"hljs-name\">first-item</span> (<span class=\"hljs-name\">first-agenda-item</span> the-agenda))\n\t)\n\t  <span class=\"hljs-comment\">; (newline)</span>\n\t  <span class=\"hljs-comment\">; (display \"\\ntime:\") (display (current-time the-agenda))</span>\n\t  <span class=\"hljs-comment\">; (display \" processing \")</span>\n\t  <span class=\"hljs-comment\">; (display first-item)</span>\n\t  (<span class=\"hljs-name\">first-item</span>)\n\t  (<span class=\"hljs-name\">remove-first-agenda-item!</span> the-agenda)\n\t  <span class=\"hljs-comment\">; (display-agenda the-agenda)</span>\n\t  (<span class=\"hljs-name\">propagate</span>)\n\t)\n  )\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">probe</span> name wire)\n  (<span class=\"hljs-name\">add-action!</span> wire (<span class=\"hljs-name\"><span class=\"hljs-built_in\">lambda</span></span> ()\n\t(<span class=\"hljs-name\"><span class=\"hljs-built_in\">newline</span></span>)\n\t(<span class=\"hljs-name\"><span class=\"hljs-built_in\">display</span></span> (<span class=\"hljs-name\">current-time</span> the-agenda))\n\t(<span class=\"hljs-name\"><span class=\"hljs-built_in\">display</span></span> <span class=\"hljs-string\">\" \"</span>)\n\t(<span class=\"hljs-name\"><span class=\"hljs-built_in\">display</span></span> name)\n\t(<span class=\"hljs-name\"><span class=\"hljs-built_in\">display</span></span> <span class=\"hljs-string\">\" = \"</span>)\n\t(<span class=\"hljs-name\"><span class=\"hljs-built_in\">display</span></span> (<span class=\"hljs-name\">get-signal</span> wire))\n  ))\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> make-time-segment cons)\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> segment-time car)\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> segment-queue cdr)\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">display-segment</span> segment)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">newline</span></span>)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">display</span></span> (<span class=\"hljs-name\">segment-time</span> segment))\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">display</span></span> <span class=\"hljs-string\">\" \"</span>)\n  (<span class=\"hljs-name\">print-queue</span> (<span class=\"hljs-name\">segment-queue</span> segment))\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">make-agenda</span>)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">list</span></span> <span class=\"hljs-number\">0</span>)\n)\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> current-time car) <span class=\"hljs-comment\">; head of agenda list is current time</span>\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> set-current-time! set-car!)\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> segments cdr) <span class=\"hljs-comment\">; the rest of agenda is segments</span>\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> set-segments! set-cdr!)\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">first-segment</span> agenda)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">car</span></span> (<span class=\"hljs-name\">segments</span> agenda))\n)\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">rest-segments</span> agenda)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cdr</span></span> (<span class=\"hljs-name\">segments</span> agenda))\n)\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">empty-agenda?</span> agenda)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">null?</span></span> (<span class=\"hljs-name\">segments</span> agenda))\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">display-agenda</span> agenda) \n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">newline</span></span>)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">display</span></span> <span class=\"hljs-string\">\"Time: \"</span>)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">display</span></span> (<span class=\"hljs-name\">current-time</span> agenda))\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">display</span></span> <span class=\"hljs-string\">\"\\nSegments:\"</span>)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">display-segments</span> segments)\n\t(<span class=\"hljs-name\"><span class=\"hljs-built_in\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">null?</span></span> segments)\n\t  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">display</span></span> <span class=\"hljs-string\">\"\\nend.\\n\"</span>)\n\t  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">begin</span></span> \n\t\t(<span class=\"hljs-name\">display-segment</span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">car</span></span> segments))\n\t\t(<span class=\"hljs-name\">display-segments</span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cdr</span></span> segments))\n\t  )\n\t)\n  )\n  (<span class=\"hljs-name\">display-segments</span> (<span class=\"hljs-name\">segments</span> agenda))\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">load</span></span> <span class=\"hljs-string\">\"queue.scm\"</span>)\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">add-to-agenda!</span> time action agenda)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">belongs-before?</span> segments)\n\t(<span class=\"hljs-name\"><span class=\"hljs-built_in\">or</span></span>\n\t  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">null?</span></span> segments)\n\t  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">&#x3C;</span></span> time (<span class=\"hljs-name\">segment-time</span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">car</span></span> segments)))\n\t)\n  )\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">make-new-time-segment</span> time action)\n\t(<span class=\"hljs-name\"><span class=\"hljs-built_in\">let</span></span> ((<span class=\"hljs-name\">q</span> (<span class=\"hljs-name\">make-queue</span>)))\n\t  (<span class=\"hljs-name\">insert-queue!</span> q action)\n\t  (<span class=\"hljs-name\">make-time-segment</span> time q)\n\t)\n  )\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">add-to-segments!</span> segments)\n\t(<span class=\"hljs-name\"><span class=\"hljs-built_in\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">=</span></span> (<span class=\"hljs-name\">segment-time</span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">car</span></span> segments)) time)\n\t  (<span class=\"hljs-name\">insert-queue!</span> (<span class=\"hljs-name\">segment-queue</span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">car</span></span> segments)) action)\n\t  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">let</span></span> ((<span class=\"hljs-name\">rest</span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cdr</span></span> segments)))\n\t\t(<span class=\"hljs-name\"><span class=\"hljs-built_in\">if</span></span> (<span class=\"hljs-name\">belongs-before?</span> rest)\n\t\t  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">set-cdr!</span></span> segments\n\t\t\t(<span class=\"hljs-name\"><span class=\"hljs-built_in\">cons</span></span> (<span class=\"hljs-name\">make-new-time-segment</span> time action) rest)\n\t\t  )\n\t\t  (<span class=\"hljs-name\">add-to-segments!</span> rest)\n\t\t)\n\t  )\n\t)\n  )\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">let</span></span> ((<span class=\"hljs-name\">segments</span> (<span class=\"hljs-name\">segments</span> agenda)))\n\t(<span class=\"hljs-name\"><span class=\"hljs-built_in\">if</span></span> (<span class=\"hljs-name\">belongs-before?</span> segments)\n\t  (<span class=\"hljs-name\">set-segments!</span>\n\t\tagenda\n\t\t(<span class=\"hljs-name\"><span class=\"hljs-built_in\">cons</span></span> (<span class=\"hljs-name\">make-new-time-segment</span> time action) segments)\n\t  )\n\t  (<span class=\"hljs-name\">add-to-segments!</span> segments)\n\t)\n  )\n  <span class=\"hljs-comment\">; (display-agenda agenda)</span>\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">remove-first-agenda-item!</span> agenda)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">let</span></span> ((<span class=\"hljs-name\">q</span> (<span class=\"hljs-name\">segment-queue</span> (<span class=\"hljs-name\">first-segment</span> agenda))))\n\t(<span class=\"hljs-name\">delete-queue!</span> q)\n\t(<span class=\"hljs-name\"><span class=\"hljs-built_in\">if</span></span> (<span class=\"hljs-name\">empty-queue?</span> q)\n\t  (<span class=\"hljs-name\">set-segments!</span> agenda (<span class=\"hljs-name\">rest-segments</span> agenda))\n\t)\n  )\n  <span class=\"hljs-comment\">; (display-agenda agenda)</span>\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">first-agenda-item</span> agenda)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">if</span></span> (<span class=\"hljs-name\">empty-agenda?</span> agenda)\n\t(<span class=\"hljs-name\">error</span> <span class=\"hljs-string\">\"No first-agenda-item in empty agenda\"</span>)\n\t(<span class=\"hljs-name\"><span class=\"hljs-built_in\">let</span></span> ((<span class=\"hljs-name\">first-seg</span> (<span class=\"hljs-name\">first-segment</span> agenda)))\n\t  (<span class=\"hljs-name\">set-current-time!</span> agenda (<span class=\"hljs-name\">segment-time</span> first-seg))\n\t  (<span class=\"hljs-name\">front-queue</span> (<span class=\"hljs-name\">segment-queue</span> first-seg))\n\t)\n  )\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> the-agenda (<span class=\"hljs-name\">make-agenda</span>))\n\n<span class=\"hljs-comment\">;;;;;;;;;;;;;;;;;;;;;;;;; Gates</span>\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> inverter-delay <span class=\"hljs-number\">2</span>)\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> and-gate-delay <span class=\"hljs-number\">3</span>)\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> or-gate-delay <span class=\"hljs-number\">5</span>)\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">inverter</span> input output)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">invert-input</span>) \n\t(<span class=\"hljs-name\"><span class=\"hljs-built_in\">let</span></span> ((<span class=\"hljs-name\">new-value</span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">not</span></span> (<span class=\"hljs-name\">get-signal</span> input))))\n\t  (<span class=\"hljs-name\">after-delay</span> inverter-delay\n\t\t\t(<span class=\"hljs-name\"><span class=\"hljs-built_in\">lambda</span></span> () (<span class=\"hljs-name\">set-signal!</span> output new-value)))\n\t)\n  )\n  (<span class=\"hljs-name\">add-action!</span> input invert-input)\n  <span class=\"hljs-symbol\">'ok</span>\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">and-gate</span> a1 a2 output)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">action-procedure</span>) \n\t(<span class=\"hljs-name\"><span class=\"hljs-built_in\">let</span></span> (\n\t\t(<span class=\"hljs-name\">new-value</span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">and</span></span> (<span class=\"hljs-name\">get-signal</span> a1) (<span class=\"hljs-name\">get-signal</span> a2)))\n\t)\n\t  \t(<span class=\"hljs-name\">after-delay</span> and-gate-delay\n\t\t\t(<span class=\"hljs-name\"><span class=\"hljs-built_in\">lambda</span></span> () (<span class=\"hljs-name\">set-signal!</span> output new-value)))\n\t)\n  )\n  (<span class=\"hljs-name\">add-action!</span> a1 action-procedure)\n  (<span class=\"hljs-name\">add-action!</span> a2 action-procedure)\n  <span class=\"hljs-symbol\">'ok</span>\n)\n\n<span class=\"hljs-comment\">; Exercise 3.28</span>\n<span class=\"hljs-comment\">; (define (or-gate a1 a2 output)</span>\n<span class=\"hljs-comment\">;   (define (action-procedure) </span>\n<span class=\"hljs-comment\">; \t(let (</span>\n<span class=\"hljs-comment\">; \t\t(new-value (or (get-signal a1) (get-signal a2)))</span>\n<span class=\"hljs-comment\">; \t)</span>\n<span class=\"hljs-comment\">; \t  \t(after-delay or-gate-delay</span>\n<span class=\"hljs-comment\">; \t\t\t(lambda () (set-signal! output new-value)))</span>\n<span class=\"hljs-comment\">; \t)</span>\n<span class=\"hljs-comment\">;   )</span>\n<span class=\"hljs-comment\">;   (add-action! a1 action-procedure)</span>\n<span class=\"hljs-comment\">;   (add-action! a2 action-procedure)</span>\n<span class=\"hljs-comment\">;   'ok</span>\n<span class=\"hljs-comment\">; )</span>\n\n<span class=\"hljs-comment\">; Exercise 3.29</span>\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">or-gate</span> a1 a2 output) \n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">let</span></span> (\n\t(<span class=\"hljs-name\">na1</span> (<span class=\"hljs-name\">make-wire</span>))\n\t(<span class=\"hljs-name\">na2</span> (<span class=\"hljs-name\">make-wire</span>))\n\t(<span class=\"hljs-name\">no</span> (<span class=\"hljs-name\">make-wire</span>))\n  )\n\t(<span class=\"hljs-name\">inverter</span> a1 na1)\n\t(<span class=\"hljs-name\">inverter</span> a2 na2)\n\t(<span class=\"hljs-name\">and-gate</span> na1 na2 no)\n\t(<span class=\"hljs-name\">inverter</span> no output)\n  )\n  <span class=\"hljs-symbol\">'ok</span>\n)\n<span class=\"hljs-comment\">; delay should be 2 * inverter-delay + and-gate-delay</span>\n\n<span class=\"hljs-comment\">;;;;;;;;;;;;;;;;;;;;; Testing or-gate:</span>\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> input1 (<span class=\"hljs-name\">make-wire</span>))\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> input2 (<span class=\"hljs-name\">make-wire</span>))\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">check-inputs</span> i1 i2)\n  (<span class=\"hljs-name\">set-signal!</span> input1 i1)\n  (<span class=\"hljs-name\">set-signal!</span> input2 i2)\n  (<span class=\"hljs-name\">propagate</span>)\n)\n<span class=\"hljs-comment\">; </span>\n<span class=\"hljs-comment\">; (define or-output (make-wire))</span>\n<span class=\"hljs-comment\">; (or-gate input1 input2 or-output)</span>\n<span class=\"hljs-comment\">; (probe 'or or-output)</span>\n<span class=\"hljs-comment\">; </span>\n<span class=\"hljs-comment\">; (check-inputs false false)</span>\n<span class=\"hljs-comment\">; (check-inputs true false)</span>\n<span class=\"hljs-comment\">; (check-inputs false true)</span>\n<span class=\"hljs-comment\">; (check-inputs true true)</span>\n\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">half-adder</span> a b s c)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">let</span></span> (\n\t\t(<span class=\"hljs-name\">d</span> (<span class=\"hljs-name\">make-wire</span>))\n\t\t(<span class=\"hljs-name\">e</span> (<span class=\"hljs-name\">make-wire</span>)))\n\t(<span class=\"hljs-name\">or-gate</span> a b d)\n\t(<span class=\"hljs-name\">and-gate</span> a b c)\n\t(<span class=\"hljs-name\">inverter</span> c e)\n\t(<span class=\"hljs-name\">and-gate</span> d e s)\n  )\n  <span class=\"hljs-symbol\">'ok</span>\n) <span class=\"hljs-comment\">; Delay should be max(or-gate-delay, and-gate-delay + inverter-delay) + and-gate-delay</span>\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">full-adder</span> a b c-in sum c-out)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">let</span></span> (\n\t(<span class=\"hljs-name\">s</span> (<span class=\"hljs-name\">make-wire</span>))\n\t(<span class=\"hljs-name\">c1</span> (<span class=\"hljs-name\">make-wire</span>))\n\t(<span class=\"hljs-name\">c2</span> (<span class=\"hljs-name\">make-wire</span>))\n  )\n\t(<span class=\"hljs-name\">half-adder</span> b c-in s c1)\n\t(<span class=\"hljs-name\">half-adder</span> a s sum c2)\n\t(<span class=\"hljs-name\">or-gate</span> c1 c2 c-out)\n  )\n  <span class=\"hljs-symbol\">'ok</span>\n)\n) <span class=\"hljs-comment\">; Delay should be max(or-gate-delay, and-gate-delay + inverter-delay) + and-gate-delay + or-gate-delay</span>\n\n<span class=\"hljs-comment\">; Exercise 3.30</span>\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">ripple-carry-adder</span> A B S c)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">null?</span></span> A) \n\t(<span class=\"hljs-name\">set-signal!</span> c false) <span class=\"hljs-comment\">; Carry adder of 0 bits returns 0 carry</span>\n\t(<span class=\"hljs-name\"><span class=\"hljs-built_in\">let</span></span> (\n\t  (<span class=\"hljs-name\">nc</span> (<span class=\"hljs-name\">make-wire</span>))\n\t)\n\t  (<span class=\"hljs-name\">ripple-carry-adder</span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cdr</span></span> A) (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cdr</span></span> B) (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cdr</span></span> S) nc)\n\t  (<span class=\"hljs-name\">full-adder</span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">car</span></span> a) (<span class=\"hljs-name\"><span class=\"hljs-built_in\">car</span></span> b) nc (<span class=\"hljs-name\"><span class=\"hljs-built_in\">car</span></span> S) c)\n\t)\n  )\n)\n) <span class=\"hljs-comment\">; Delay should be (max(or-gate-delay, and-gate-delay + inverter-delay) + and-gate-delay + or-gate-delay) * number of bits</span>\n\n<span class=\"hljs-comment\">;;;;;;;;;;;;;;;;;;;;;;;;; Testing ripple-carry-adder</span>\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">make-bus</span> bits) \n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">=</span></span> bits <span class=\"hljs-number\">0</span>)\n\t'()\n\t(<span class=\"hljs-name\"><span class=\"hljs-built_in\">cons</span></span> (<span class=\"hljs-name\">make-wire</span>) (<span class=\"hljs-name\">make-bus</span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">-</span></span> bits <span class=\"hljs-number\">1</span>)))\n  )\n)\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">get-signals</span> bus)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">map</span></span> get-signal bus)\n)\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">set-signals!</span> bus signals)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">map</span></span> set-signal! bus signals)\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> A (<span class=\"hljs-name\">make-bus</span> <span class=\"hljs-number\">4</span>))\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> B (<span class=\"hljs-name\">make-bus</span> <span class=\"hljs-number\">4</span>))\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> S (<span class=\"hljs-name\">make-bus</span> <span class=\"hljs-number\">4</span>))\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> c (<span class=\"hljs-name\">make-wire</span>))\n(<span class=\"hljs-name\">ripple-carry-adder</span> A B S c)\n\n(<span class=\"hljs-name\">set-signals!</span> A (<span class=\"hljs-name\"><span class=\"hljs-built_in\">list</span></span> false false true true)) <span class=\"hljs-comment\">; A = 3</span>\n(<span class=\"hljs-name\">set-signals!</span> B (<span class=\"hljs-name\"><span class=\"hljs-built_in\">list</span></span> false true false true)) <span class=\"hljs-comment\">; B = 5</span>\n(<span class=\"hljs-name\">propagate</span>)\n(<span class=\"hljs-name\">get-signals</span> S) <span class=\"hljs-comment\">; S = 8 t f f f</span>\n(<span class=\"hljs-name\">get-signal</span> c)\n\n(<span class=\"hljs-name\">set-signals!</span> A (<span class=\"hljs-name\"><span class=\"hljs-built_in\">list</span></span> true true true false)) <span class=\"hljs-comment\">; A = 14</span>\n(<span class=\"hljs-name\">set-signals!</span> B (<span class=\"hljs-name\"><span class=\"hljs-built_in\">list</span></span> false false true false)) <span class=\"hljs-comment\">; B = 2</span>\n(<span class=\"hljs-name\">propagate</span>)\n(<span class=\"hljs-name\">get-signals</span> S) <span class=\"hljs-comment\">; S = 0</span>\n(<span class=\"hljs-name\">get-signal</span> c) <span class=\"hljs-comment\">; c = 1</span></code></pre>\n<h2 id=\"exercise-331\">Exercise 3.31</h2>\n<p>So, if we remove <code>proc</code> call from <code>accept-action-procedure!</code> and test half-adder, it returns wrong results for <code>false true</code>, and <code>true false</code> arguments.</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> sum (<span class=\"hljs-name\">make-wire</span>))\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> carry (<span class=\"hljs-name\">make-wire</span>))\n(<span class=\"hljs-name\">half-adder</span> input1 input2 sum carry)\n(<span class=\"hljs-name\">probe</span> <span class=\"hljs-symbol\">'sum</span> sum)\n(<span class=\"hljs-name\">probe</span> <span class=\"hljs-symbol\">'carry</span> carry)\n\n(<span class=\"hljs-name\">check-inputs</span> false false)\n(<span class=\"hljs-name\">check-inputs</span> true false)\n(<span class=\"hljs-name\">check-inputs</span> false true)\n(<span class=\"hljs-name\">check-inputs</span> true true)\n(<span class=\"hljs-name\">check-inputs</span> false true)</code></pre>\n<p>It is because inverter inside it does not return inverted signal, while it should. It waits for input to first change, and then recalculates the signal.\nThat happens only after true true is given. For the inverter to work correctly with default wire signals, we need to set output signal when inverter is connected\nThis also applies to other gates. Since we could already have inverter or something else connected to a wire, that wire could have any value, so it's better to reevaluate output values.</p>\n<h2 id=\"exercise-332\">Exercise 3.32</h2>\n<p>So, in and-gate, for each input wire we have added action that computes a new value that is logical and of both values, and after delay changes state of output wire.</p>\n<p>Initially singals on wires are 0, 1, output is 0. Now we change first signal to 1.</p>\n<p>Action is called, and new value is 1, because both wires are 1. We add to agenda function to set signal to 1</p>\n<p>Then second value changes to 0. new-value is computed as 0, and new agenda function in queue will set signal to 0.</p>\n<p>WITH FIFO, first signal is 1, but then 0, which is correct.</p>\n<p>With LIFO, first signal changed to 0 (because that is last added value) and then to 1, so final state is not correct.</p>\n<h2 id=\"code-for-queuescm\">Code for queue.scm</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">make-queue</span>)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cons</span></span> '() '())\n)\n\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">empty-queue?</span> queue)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">null?</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">car</span></span> queue))\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">insert-queue!</span> queue item)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">let</span></span> ((<span class=\"hljs-name\">new-pair</span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cons</span></span> item '())))\n\t(<span class=\"hljs-name\"><span class=\"hljs-built_in\">cond</span></span>\n\t  ((<span class=\"hljs-name\">empty-queue?</span> queue)\n\t   \t(<span class=\"hljs-name\"><span class=\"hljs-built_in\">set-car!</span></span> queue new-pair)\n\t   \t(<span class=\"hljs-name\"><span class=\"hljs-built_in\">set-cdr!</span></span> queue new-pair)\n\t  )\n\t  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">else</span></span>\n\t    (<span class=\"hljs-name\"><span class=\"hljs-built_in\">set-cdr!</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cdr</span></span> queue) new-pair)\n\t\t(<span class=\"hljs-name\"><span class=\"hljs-built_in\">set-cdr!</span></span> queue new-pair)\n\t  )\n\t)\n\tqueue\n  )\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">delete-queue!</span> queue)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cond</span></span>\n\t((<span class=\"hljs-name\">empty-queue?</span> queue) (<span class=\"hljs-name\">error</span> <span class=\"hljs-string\">\"delete called with empty queue\"</span>))\n\t(<span class=\"hljs-name\"><span class=\"hljs-built_in\">else</span></span>\n\t  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">set-car!</span></span> queue (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cdr</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">car</span></span> queue)))\n\t  queue\n\t)\n  )\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">front-queue</span> queue)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">if</span></span> (<span class=\"hljs-name\">empty-queue?</span> queue)\n\t(<span class=\"hljs-name\">error</span> <span class=\"hljs-string\">\"No front-queue for empty queue\"</span>)\n\t(<span class=\"hljs-name\"><span class=\"hljs-built_in\">car</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">car</span></span> queue)) <span class=\"hljs-comment\">; first element of front pointer</span>\n  )\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">print-queue</span> queue)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">display</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">car</span></span> queue))\n)</code></pre>"},"__N_SSG":true}