{"pageProps":{"id":"sicp3.1","title":"SICP3.1 Assignment and local state","date":"2022-10-25T19:13:22.000Z","tags":["SICP"],"updated_at":"","content":"<p>So, it have been a huge pause with working on this book, but I have a dream to get at least to building a simulator of digital circuits, part, so I'll restart from the beginning of chapter 3.</p>\n<p>I just like how clearly this book explains some ideas I myself would have hard time to explain. State, for example:</p>\n<blockquote>\n<p>An object is said to \"have state\" if its behavior is influenced by its history. A bank account, for example, has state in that the answer to the question \"Can I withdraw $100?\" depends upon the history of deposit and withdrawal transactions.</p>\n</blockquote>\n<h2 id=\"311-local-state-variables\">3.1.1 Local state variables</h2>\n<h3 id=\"exercise-31\">Exercise 3.1</h3>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">make-accumulator</span> sum)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">acc</span> amount) \n\t(<span class=\"hljs-name\"><span class=\"hljs-built_in\">set!</span></span> sum (<span class=\"hljs-name\"><span class=\"hljs-built_in\">+</span></span> sum amount))\n\tsum\n  )\n  acc\n)</code></pre>\n<h3 id=\"exercise-32\">Exercise 3.2</h3>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">make-monitored</span> f)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> calls <span class=\"hljs-number\">0</span>)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">monitored</span> arg)\n\t(<span class=\"hljs-name\"><span class=\"hljs-built_in\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">eq?</span></span> arg <span class=\"hljs-symbol\">'how-many-calls?</span>)\n\t  calls\n\t  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">begin</span></span>\n\t\t(<span class=\"hljs-name\"><span class=\"hljs-built_in\">set!</span></span> calls (<span class=\"hljs-name\"><span class=\"hljs-built_in\">+</span></span> calls <span class=\"hljs-number\">1</span>))\n\t\t(<span class=\"hljs-name\">f</span> arg)\n\t  )\n\t)\n  )\n  monitored\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> s (<span class=\"hljs-name\">make-monitored</span> sqrt))\n(<span class=\"hljs-name\">s</span> <span class=\"hljs-number\">100</span>)\n(<span class=\"hljs-name\">s</span> <span class=\"hljs-symbol\">'how-many-calls?</span>)</code></pre>\n<h3 id=\"exercise-33\">Exercise 3.3</h3>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">make-account</span> balance password)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">withdraw</span> amount)\n\t(<span class=\"hljs-name\"><span class=\"hljs-built_in\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">>=</span></span> balance amount)\n\t  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">begin</span></span>\n\t\t(<span class=\"hljs-name\"><span class=\"hljs-built_in\">set!</span></span> balance (<span class=\"hljs-name\"><span class=\"hljs-built_in\">-</span></span> balance amount))\n\t\tbalance\n\t  )\n\t  <span class=\"hljs-string\">\"Insufficient funds!\"</span>\n\t)\n  )\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">deposit</span> amount)\n\t(<span class=\"hljs-name\"><span class=\"hljs-built_in\">set!</span></span> balance (<span class=\"hljs-name\"><span class=\"hljs-built_in\">+</span></span> balance amount))\n\tbalance\n  )\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">dispatch</span> pass m)\n\t(<span class=\"hljs-name\"><span class=\"hljs-built_in\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">eq?</span></span> pass password)\n\t\t(<span class=\"hljs-name\"><span class=\"hljs-built_in\">cond</span></span> ((<span class=\"hljs-name\"><span class=\"hljs-built_in\">eq?</span></span> m <span class=\"hljs-symbol\">'withdraw</span>) withdraw)\n\t\t\t  ((<span class=\"hljs-name\"><span class=\"hljs-built_in\">eq?</span></span> m <span class=\"hljs-symbol\">'deposit</span>) deposit)\n\t\t\t  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">else</span></span> (<span class=\"hljs-name\">error</span> <span class=\"hljs-string\">\"Unknown request - make-account\"</span> m))\n\t\t)\n\t\t<span class=\"hljs-string\">\"Incorrect password!\"</span>\n\t)\n  )\n  dispatch\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> acc (<span class=\"hljs-name\">make-account</span> <span class=\"hljs-number\">100</span> <span class=\"hljs-symbol\">'secret</span>))\n((<span class=\"hljs-name\">acc</span> <span class=\"hljs-symbol\">'wrong-secret</span> <span class=\"hljs-symbol\">'withdraw</span>) <span class=\"hljs-number\">50</span>)\n((<span class=\"hljs-name\">acc</span> <span class=\"hljs-symbol\">'secret</span> <span class=\"hljs-symbol\">'withdraw</span>) <span class=\"hljs-number\">50</span>)\n((<span class=\"hljs-name\">acc</span> <span class=\"hljs-symbol\">'secret</span> <span class=\"hljs-symbol\">'withdraw</span>) <span class=\"hljs-number\">60</span>)\n((<span class=\"hljs-name\">acc</span> <span class=\"hljs-symbol\">'secret</span> <span class=\"hljs-symbol\">'deposit</span>) <span class=\"hljs-number\">40</span>)\n((<span class=\"hljs-name\">acc</span> <span class=\"hljs-symbol\">'secret</span> <span class=\"hljs-symbol\">'withdraw</span>) <span class=\"hljs-number\">60</span>)</code></pre>\n<h3 id=\"exercise-34\">Exercise 3.4</h3>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">make-account</span> balance password)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">withdraw</span> amount)\n\t(<span class=\"hljs-name\"><span class=\"hljs-built_in\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">>=</span></span> balance amount)\n\t  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">begin</span></span>\n\t\t(<span class=\"hljs-name\"><span class=\"hljs-built_in\">set!</span></span> balance (<span class=\"hljs-name\"><span class=\"hljs-built_in\">-</span></span> balance amount))\n\t\tbalance\n\t  )\n\t  <span class=\"hljs-string\">\"Insufficient funds!\"</span>\n\t)\n  )\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">deposit</span> amount)\n\t(<span class=\"hljs-name\"><span class=\"hljs-built_in\">set!</span></span> balance (<span class=\"hljs-name\"><span class=\"hljs-built_in\">+</span></span> balance amount))\n\tbalance\n  )\n\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">call-the-cops</span>)\n\t(<span class=\"hljs-name\"><span class=\"hljs-built_in\">display</span></span> <span class=\"hljs-string\">\"Hey cops! Somebody is trying to rob bank account!\\n\"</span>)\n  )\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> failed-accesses <span class=\"hljs-number\">0</span>)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">dispatch</span> pass m)\n\t(<span class=\"hljs-name\"><span class=\"hljs-built_in\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">eq?</span></span> pass password)\n\t  \t(<span class=\"hljs-name\"><span class=\"hljs-built_in\">begin</span></span> \n\t\t  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">set!</span></span> failed-accesses <span class=\"hljs-number\">0</span>)\n\t\t  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cond</span></span> ((<span class=\"hljs-name\"><span class=\"hljs-built_in\">eq?</span></span> m <span class=\"hljs-symbol\">'withdraw</span>) withdraw)\n\t\t  \t    ((<span class=\"hljs-name\"><span class=\"hljs-built_in\">eq?</span></span> m <span class=\"hljs-symbol\">'deposit</span>) deposit)\n\t\t  \t    (<span class=\"hljs-name\"><span class=\"hljs-built_in\">else</span></span> (<span class=\"hljs-name\">error</span> <span class=\"hljs-string\">\"Unknown request - make-account\"</span> m))\n\t\t  )\n\t\t)\n\t\t(<span class=\"hljs-name\"><span class=\"hljs-built_in\">begin</span></span>\n\t\t  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">set!</span></span> failed-accesses (<span class=\"hljs-name\"><span class=\"hljs-built_in\">+</span></span> failed-accesses <span class=\"hljs-number\">1</span>))\n\t\t  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">></span></span> failed-accesses <span class=\"hljs-number\">7</span>)\n\t\t\t(<span class=\"hljs-name\">call-the-cops</span>)\n\t\t\t<span class=\"hljs-string\">\"Incorrect password!\"</span>\n\t\t  )\n\t\t)\n\t)\n  )\n  dispatch\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> acc (<span class=\"hljs-name\">make-account</span> <span class=\"hljs-number\">100</span> <span class=\"hljs-symbol\">'secret</span>))\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">map</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">lambda</span></span> (a) (<span class=\"hljs-name\">acc</span> <span class=\"hljs-symbol\">'wrong-secret</span> <span class=\"hljs-symbol\">'withdraw</span>)) '(<span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">4</span> <span class=\"hljs-number\">5</span> <span class=\"hljs-number\">6</span> <span class=\"hljs-number\">7</span>))\n((<span class=\"hljs-name\">acc</span> <span class=\"hljs-symbol\">'secret</span> <span class=\"hljs-symbol\">'withdraw</span>) <span class=\"hljs-number\">50</span>)\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">map</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">lambda</span></span> (a) (<span class=\"hljs-name\">acc</span> <span class=\"hljs-symbol\">'wrong-secret</span> <span class=\"hljs-symbol\">'withdraw</span>)) '(<span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">4</span> <span class=\"hljs-number\">5</span> <span class=\"hljs-number\">6</span> <span class=\"hljs-number\">8</span>))</code></pre>\n<h2 id=\"312-the-benefits-of-introducing-assignment\">3.1.2 The Benefits of Introducing Assignment</h2>\n<h3 id=\"exercise-35-monte-carlo-integration\">Exercise 3.5 Monte Carlo integration</h3>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">random-in-range</span> low high)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">let</span></span> ((<span class=\"hljs-name\">range</span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">-</span></span> high low)))\n\t(<span class=\"hljs-name\"><span class=\"hljs-built_in\">+</span></span> low (<span class=\"hljs-name\">random</span> range)))\n)\n\n(<span class=\"hljs-name\">random-in-range</span> <span class=\"hljs-number\">1.5</span> <span class=\"hljs-number\">10.0</span>)\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">monte-carlo</span> trials experiment)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">iter</span> trials-remaining trials-passed)\n\t(<span class=\"hljs-name\"><span class=\"hljs-built_in\">cond</span></span> \n\t  ((<span class=\"hljs-name\"><span class=\"hljs-built_in\">=</span></span> trials-remaining <span class=\"hljs-number\">0</span>)\n\t\t   (<span class=\"hljs-name\"><span class=\"hljs-built_in\">/</span></span> trials-passed trials))\n\t  ((<span class=\"hljs-name\">experiment</span>)\n\t   \t\t(<span class=\"hljs-name\">iter</span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">-</span></span> trials-remaining <span class=\"hljs-number\">1</span>) (<span class=\"hljs-name\"><span class=\"hljs-built_in\">+</span></span> trials-passed <span class=\"hljs-number\">1</span>)))\n\t  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">else</span></span>\n\t\t\t(<span class=\"hljs-name\">iter</span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">-</span></span> trials-remaining <span class=\"hljs-number\">1</span>) trials-passed))\n\t)\n  )\n  (<span class=\"hljs-name\">iter</span> trials <span class=\"hljs-number\">0</span>)\n)\n\n<span class=\"hljs-comment\">; (monte-carlo 100 (lambda () (&#x3C; (random 10) 5)))</span>\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">estimate-integral</span> P x1 y1 x2 y2 trials)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">integral-test</span>)\n\t(<span class=\"hljs-name\">P</span> (<span class=\"hljs-name\">random-in-range</span> x1 x2)\n\t   (<span class=\"hljs-name\">random-in-range</span> y1 y2)\n\t)\n  )\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">*</span></span> (<span class=\"hljs-name\">rectangle-area</span> x1 y1 x2 y2)\n     (<span class=\"hljs-name\">monte-carlo</span> trials integral-test)\n  )\n)\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">rectangle-area</span> x1 y1 x2 y2) \n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">*</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">abs</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">-</span></span> x1 x2)) (<span class=\"hljs-name\"><span class=\"hljs-built_in\">abs</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">-</span></span> y1 y2)))\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">in-unit-circle</span> x y)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">&#x3C;</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">+</span></span> (<span class=\"hljs-name\">sqr</span> x) (<span class=\"hljs-name\">sqr</span> y)) <span class=\"hljs-number\">1.0</span>)\n)\n\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">sqr</span> x) (<span class=\"hljs-name\"><span class=\"hljs-built_in\">*</span></span> x x))\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> pi (<span class=\"hljs-name\">estimate-integral</span> in-unit-circle <span class=\"hljs-number\">-1.0</span> <span class=\"hljs-number\">-1.0</span> <span class=\"hljs-number\">1.0</span> <span class=\"hljs-number\">1.0</span> <span class=\"hljs-number\">100000</span>))\n\npi</code></pre>\n<h3 id=\"exercise-36\">Exercise 3.6</h3>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">rand-update</span> val) (<span class=\"hljs-name\"><span class=\"hljs-built_in\">+</span></span> val <span class=\"hljs-number\">1</span>))\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> seed (<span class=\"hljs-name\">rand-update</span> <span class=\"hljs-number\">0</span>))\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">rand</span> m)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cond</span></span>\n\t((<span class=\"hljs-name\"><span class=\"hljs-built_in\">eq?</span></span> m <span class=\"hljs-symbol\">'reset</span>)\n\t (<span class=\"hljs-name\"><span class=\"hljs-built_in\">lambda</span></span> (val) (<span class=\"hljs-name\"><span class=\"hljs-built_in\">set!</span></span> seed val)))\n\t((<span class=\"hljs-name\"><span class=\"hljs-built_in\">eq?</span></span> m <span class=\"hljs-symbol\">'generate</span>)\n\t  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">begin</span></span>\n\t   \t(<span class=\"hljs-name\"><span class=\"hljs-built_in\">set!</span></span> seed (<span class=\"hljs-name\">rand-update</span> seed))\n\t\tseed\n\t  )\n\t)\n  )\n)\n\n\n\n(<span class=\"hljs-name\">rand</span> <span class=\"hljs-symbol\">'generate</span>)\n(<span class=\"hljs-name\">rand</span> <span class=\"hljs-symbol\">'generate</span>)\n\n((<span class=\"hljs-name\">rand</span> <span class=\"hljs-symbol\">'reset</span>) <span class=\"hljs-number\">100</span>)\n(<span class=\"hljs-name\">rand</span> <span class=\"hljs-symbol\">'generate</span>)</code></pre>\n<h2 id=\"313-the-costs-for-introducing-assignment\">3.1.3 The costs for introducing assignment</h2>\n<p>In this section we learn about referential transparency. Expression in which equals can be substituted for equals without changing it's value is called referentially transparent. <a href=\"https://stackoverflow.com/questions/210835/what-is-referential-transparency/9859966#9859966\">This SO answer explains the term in more details</a>, and is one of the best answers I saw there.</p>\n<h3 id=\"exercise-37\">Exercise 3.7</h3>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">make-joint</span> other-acc other-pass new-pass) \n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">dispatch</span> pass m)\n\t(<span class=\"hljs-name\"><span class=\"hljs-built_in\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">eq?</span></span> pass new-pass)\n\t  (<span class=\"hljs-name\">other-acc</span> other-pass m)\n\t  <span class=\"hljs-string\">\"Incorrect password!\"</span>\n\t)\n  )\n  dispatch\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> my-account (<span class=\"hljs-name\">make-account</span> <span class=\"hljs-number\">100</span> <span class=\"hljs-symbol\">'my-pass</span>))\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> wife-account (<span class=\"hljs-name\">make-joint</span> my-account <span class=\"hljs-symbol\">'my-pass</span> <span class=\"hljs-symbol\">'wife-pass</span>))\n\n((<span class=\"hljs-name\">wife-account</span> <span class=\"hljs-symbol\">'wife-pass</span> <span class=\"hljs-symbol\">'withdraw</span>) <span class=\"hljs-number\">200</span>)\n((<span class=\"hljs-name\">my-account</span> <span class=\"hljs-symbol\">'my-pass</span> <span class=\"hljs-symbol\">'deposit</span>) <span class=\"hljs-number\">1000</span>)\n((<span class=\"hljs-name\">wife-account</span> <span class=\"hljs-symbol\">'wife-pass</span> <span class=\"hljs-symbol\">'withdraw</span>) <span class=\"hljs-number\">200</span>)\n((<span class=\"hljs-name\">my-account</span> <span class=\"hljs-symbol\">'my-pass</span> <span class=\"hljs-symbol\">'withdraw</span>) <span class=\"hljs-number\">100</span>)</code></pre>\n<h3 id=\"exercise-38\">Exercise 3.8</h3>\n<pre><code class=\"hljs language-scheme\"><span class=\"hljs-comment\">; (+ (f 0) (f 1)) should return 0 if arguments are evaluated left to right, or 1 if right to left</span>\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> state <span class=\"hljs-number\">1</span>)\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">f</span> a)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">eq?</span></span> a <span class=\"hljs-number\">0</span>)\n\t(<span class=\"hljs-name\"><span class=\"hljs-built_in\">set!</span></span> state <span class=\"hljs-number\">0</span>)\n  )\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">eq?</span></span> state <span class=\"hljs-number\">0</span>)\n  \t<span class=\"hljs-number\">0</span>\n\ta\n  )\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">+</span></span> (<span class=\"hljs-name\">f</span> <span class=\"hljs-number\">0</span>) (<span class=\"hljs-name\">f</span> <span class=\"hljs-number\">1</span>))\n<span class=\"hljs-comment\">; mit-scheme seems to be right to left</span></code></pre>"},"__N_SSG":true}