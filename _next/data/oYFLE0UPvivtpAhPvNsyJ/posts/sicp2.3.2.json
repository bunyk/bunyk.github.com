{"pageProps":{"id":"sicp2.3.2","title":"SICP 2.3.2 Symbolic differentiation","date":"2020-07-26T07:00:47.000Z","tags":["SICP"],"updated_at":"2022-10-10T22:49:27+02:00","content":"<p>I decided to skip picture language, because of technical reasons. Also, 2.3.1 I'll do in this post, because it was just to short. Here we get one step clother to build interpreter, not yet for programming language, but at least for mathematical expressions.</p>\n<p>And now we are in the middle of second chapter.</p>\n<h2 id=\"exercise-254\">Exercise 2.54</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">equal?</span></span> l1 l2)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">pair?</span></span> l1)\n    (<span class=\"hljs-name\"><span class=\"hljs-built_in\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">pair?</span></span> l2)\n      (<span class=\"hljs-name\"><span class=\"hljs-built_in\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">equal?</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">car</span></span> l1) (<span class=\"hljs-name\"><span class=\"hljs-built_in\">car</span></span> l2))\n        (<span class=\"hljs-name\"><span class=\"hljs-built_in\">equal?</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cdr</span></span> l1) (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cdr</span></span> l2))\n        <span class=\"hljs-literal\">#f</span>\n      )\n      <span class=\"hljs-literal\">#f</span>\n    )\n    (<span class=\"hljs-name\"><span class=\"hljs-built_in\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">pair?</span></span> l2)\n      <span class=\"hljs-literal\">#f</span>\n      (<span class=\"hljs-name\"><span class=\"hljs-built_in\">eq?</span></span> l1 l2) \n    )\n  )\n)\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">equal?</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">list</span></span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span>) '(<span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span>))\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">equal?</span></span> '() '())\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">equal?</span></span> <span class=\"hljs-symbol\">'a</span> <span class=\"hljs-symbol\">'a</span>)\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">equal?</span></span> <span class=\"hljs-symbol\">'a</span> <span class=\"hljs-symbol\">'b</span>)\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">equal?</span></span> '(<span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span>) '(list <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span>))</code></pre>\n<h2 id=\"exercise-255\">Exercise 2.55</h2>\n<p><code>''abracadabra</code> is actually a <code>(quote (quote abracadabra))</code> which has value <code>(quote abracadabra)</code>, and <code>car</code> of it is <code>quote</code>.</p>\n<h2 id=\"exercise-256\">Exercise 2.56</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">variable?</span> x) (<span class=\"hljs-name\"><span class=\"hljs-built_in\">symbol?</span></span> x))\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">same-variable?</span> v1 v2)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">and</span></span> (<span class=\"hljs-name\">variable?</span> v1) (<span class=\"hljs-name\">variable?</span> v2) (<span class=\"hljs-name\"><span class=\"hljs-built_in\">eq?</span></span> v1 v2)))\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">=number?</span> exp num)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">and</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">number?</span></span> exp) (<span class=\"hljs-name\"><span class=\"hljs-built_in\">=</span></span> exp num)))\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">make-sum</span> a1 a2)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cond</span></span> ((<span class=\"hljs-name\">=number?</span> a1 <span class=\"hljs-number\">0</span>) a2)\n        ((<span class=\"hljs-name\">=number?</span> a2 <span class=\"hljs-number\">0</span>) a1)\n        ((<span class=\"hljs-name\"><span class=\"hljs-built_in\">and</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">number?</span></span> a1) (<span class=\"hljs-name\"><span class=\"hljs-built_in\">number?</span></span> a2)) (<span class=\"hljs-name\"><span class=\"hljs-built_in\">+</span></span> a1 a2))\n        (<span class=\"hljs-name\"><span class=\"hljs-built_in\">else</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">list</span></span> <span class=\"hljs-symbol\">'+</span> a1 a2))))\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">make-product</span> m1 m2)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cond</span></span> ((<span class=\"hljs-name\"><span class=\"hljs-built_in\">or</span></span> (<span class=\"hljs-name\">=number?</span> m1 <span class=\"hljs-number\">0</span>) (<span class=\"hljs-name\">=number?</span> m2 <span class=\"hljs-number\">0</span>)) <span class=\"hljs-number\">0</span>)\n        ((<span class=\"hljs-name\">=number?</span> m1 <span class=\"hljs-number\">1</span>) m2)\n        ((<span class=\"hljs-name\">=number?</span> m2 <span class=\"hljs-number\">1</span>) m1)\n        ((<span class=\"hljs-name\"><span class=\"hljs-built_in\">and</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">number?</span></span> m1) (<span class=\"hljs-name\"><span class=\"hljs-built_in\">number?</span></span> m2)) (<span class=\"hljs-name\"><span class=\"hljs-built_in\">*</span></span> m1 m2))\n        (<span class=\"hljs-name\"><span class=\"hljs-built_in\">else</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">list</span></span> <span class=\"hljs-symbol\">'*</span> m1 m2))))\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">sum?</span> x)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">and</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">pair?</span></span> x) (<span class=\"hljs-name\"><span class=\"hljs-built_in\">eq?</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">car</span></span> x) <span class=\"hljs-symbol\">'+</span>)))\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">addend</span> s) (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cadr</span></span> s))\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">augend</span> s) (<span class=\"hljs-name\">caddr</span> s))\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">product?</span> x)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">and</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">pair?</span></span> x) (<span class=\"hljs-name\"><span class=\"hljs-built_in\">eq?</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">car</span></span> x) <span class=\"hljs-symbol\">'*</span>)))\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">multiplier</span> p) (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cadr</span></span> p))\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">multiplicand</span> p) (<span class=\"hljs-name\">caddr</span> p))\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">exponentiation?</span> x)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">and</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">pair?</span></span> x) (<span class=\"hljs-name\"><span class=\"hljs-built_in\">eq?</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">car</span></span> x) <span class=\"hljs-symbol\">'**</span>)))\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">base</span> e) (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cadr</span></span> e))\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">exponent</span> e) (<span class=\"hljs-name\">caddr</span> e))\n \n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">make-exponentiation</span> base e)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cond</span></span> ((<span class=\"hljs-name\">=number?</span> e <span class=\"hljs-number\">0</span>) <span class=\"hljs-number\">1</span>)\n        ((<span class=\"hljs-name\">=number?</span> e <span class=\"hljs-number\">1</span>) base)\n        (<span class=\"hljs-name\"><span class=\"hljs-built_in\">else</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">list</span></span> <span class=\"hljs-symbol\">'**</span> base e))))\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">deriv</span> exp var)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cond</span></span> ((<span class=\"hljs-name\"><span class=\"hljs-built_in\">number?</span></span> exp) <span class=\"hljs-number\">0</span>)\n        ((<span class=\"hljs-name\">variable?</span> exp)\n         (<span class=\"hljs-name\"><span class=\"hljs-built_in\">if</span></span> (<span class=\"hljs-name\">same-variable?</span> exp var) <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">0</span>))\n        ((<span class=\"hljs-name\">sum?</span> exp)\n         (<span class=\"hljs-name\">make-sum</span> (<span class=\"hljs-name\">deriv</span> (<span class=\"hljs-name\">addend</span> exp) var)\n                   (<span class=\"hljs-name\">deriv</span> (<span class=\"hljs-name\">augend</span> exp) var)))\n        ((<span class=\"hljs-name\">product?</span> exp)\n         (<span class=\"hljs-name\">make-sum</span>\n           (<span class=\"hljs-name\">make-product</span> (<span class=\"hljs-name\">multiplier</span> exp)\n                         (<span class=\"hljs-name\">deriv</span> (<span class=\"hljs-name\">multiplicand</span> exp) var))\n           (<span class=\"hljs-name\">make-product</span> (<span class=\"hljs-name\">deriv</span> (<span class=\"hljs-name\">multiplier</span> exp) var)\n                         (<span class=\"hljs-name\">multiplicand</span> exp))))\n        ((<span class=\"hljs-name\">exponentiation?</span> exp)\n         (<span class=\"hljs-name\">make-product</span> (<span class=\"hljs-name\">exponent</span> exp) (<span class=\"hljs-name\">make-exponentiation</span> \n                (<span class=\"hljs-name\">base</span> exp)\n                (<span class=\"hljs-name\"><span class=\"hljs-built_in\">-</span></span> (<span class=\"hljs-name\">exponent</span> exp) <span class=\"hljs-number\">1</span>)\n            )))\n        (<span class=\"hljs-name\"><span class=\"hljs-built_in\">else</span></span>\n         (<span class=\"hljs-name\">error</span> <span class=\"hljs-string\">\"unknown expression type -- DERIV\"</span> exp))))\n\n\n(<span class=\"hljs-name\">deriv</span> '(+ (** x <span class=\"hljs-number\">3</span>) (** x <span class=\"hljs-number\">2</span>)) <span class=\"hljs-symbol\">'x</span>)</code></pre>\n<h2 id=\"exercise-257\">Exercise 2.57</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">make-sum</span> a1 a2)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cond</span></span> ((<span class=\"hljs-name\">=number?</span> a1 <span class=\"hljs-number\">0</span>) a2)\n        ((<span class=\"hljs-name\">=number?</span> a2 <span class=\"hljs-number\">0</span>) a1)\n        ((<span class=\"hljs-name\"><span class=\"hljs-built_in\">and</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">number?</span></span> a1) (<span class=\"hljs-name\"><span class=\"hljs-built_in\">number?</span></span> a2)) (<span class=\"hljs-name\"><span class=\"hljs-built_in\">+</span></span> a1 a2))\n        ((<span class=\"hljs-name\">sum?</span> a2) (<span class=\"hljs-name\"><span class=\"hljs-built_in\">append</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">list</span></span> <span class=\"hljs-symbol\">'+</span> a1) (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cdr</span></span> a2)))\n        (<span class=\"hljs-name\"><span class=\"hljs-built_in\">else</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">list</span></span> <span class=\"hljs-symbol\">'+</span> a1 a2))))\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">addend</span> s) (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cadr</span></span> s))\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">augend</span> s) \n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">null?</span></span> (<span class=\"hljs-name\">cdddr</span> s))\n    (<span class=\"hljs-name\">caddr</span> s)\n    (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cons</span></span> <span class=\"hljs-symbol\">'+</span> (<span class=\"hljs-name\">cddr</span> s))))\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">make-product</span> m1 m2)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cond</span></span> ((<span class=\"hljs-name\"><span class=\"hljs-built_in\">or</span></span> (<span class=\"hljs-name\">=number?</span> m1 <span class=\"hljs-number\">0</span>) (<span class=\"hljs-name\">=number?</span> m2 <span class=\"hljs-number\">0</span>)) <span class=\"hljs-number\">0</span>)\n        ((<span class=\"hljs-name\">=number?</span> m1 <span class=\"hljs-number\">1</span>) m2)\n        ((<span class=\"hljs-name\">=number?</span> m2 <span class=\"hljs-number\">1</span>) m1)\n        ((<span class=\"hljs-name\"><span class=\"hljs-built_in\">and</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">number?</span></span> m1) (<span class=\"hljs-name\"><span class=\"hljs-built_in\">number?</span></span> m2)) (<span class=\"hljs-name\"><span class=\"hljs-built_in\">*</span></span> m1 m2))\n        ((<span class=\"hljs-name\">product?</span> m2) (<span class=\"hljs-name\"><span class=\"hljs-built_in\">append</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">list</span></span> <span class=\"hljs-symbol\">'*</span> m1) (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cdr</span></span> m2)))\n        (<span class=\"hljs-name\"><span class=\"hljs-built_in\">else</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">list</span></span> <span class=\"hljs-symbol\">'*</span> m1 m2))))\n\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">multiplier</span> p) (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cadr</span></span> p))\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">multiplicand</span> s) \n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">null?</span></span> (<span class=\"hljs-name\">cdddr</span> s))\n    (<span class=\"hljs-name\">caddr</span> s)\n    (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cons</span></span> <span class=\"hljs-symbol\">'*</span> (<span class=\"hljs-name\">cddr</span> s))))\n\n(<span class=\"hljs-name\">deriv</span> '(+ x (* x x x) (** x <span class=\"hljs-number\">3</span>)) <span class=\"hljs-symbol\">'x</span>)\n<span class=\"hljs-comment\">;Value 30: (+ 1 (+ (* x (+ x x)) (* x x)) (* 3 (** x 2)))</span></code></pre>\n<h2 id=\"exercise-258\">Exercise 2.58</h2>\n<p>So, we want this to work:</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\">deriv</span> '(x + x**2 + <span class=\"hljs-number\">3</span> * x**3) <span class=\"hljs-symbol\">'x</span>)</code></pre>\n<p>At first I wanted to add some parsing step that converts this to lisp, and then reread requirements, and found this: \"Can you design appropriate predicates, selectors, and constructors for this notation such that our derivative program still works?\"</p>\n<p>So, no transformation, this should be the format of data, and we need to change functions that work with it.</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">priority</span> sym)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cond</span></span> \n    ((<span class=\"hljs-name\"><span class=\"hljs-built_in\">eq?</span></span> sym <span class=\"hljs-symbol\">'+</span>) <span class=\"hljs-number\">1</span>)\n    ((<span class=\"hljs-name\"><span class=\"hljs-built_in\">eq?</span></span> sym <span class=\"hljs-symbol\">'*</span>) <span class=\"hljs-number\">2</span>)\n    ((<span class=\"hljs-name\"><span class=\"hljs-built_in\">eq?</span></span> sym <span class=\"hljs-symbol\">'**</span>) <span class=\"hljs-number\">3</span>)\n    ((<span class=\"hljs-name\"><span class=\"hljs-built_in\">number?</span></span> sym) <span class=\"hljs-number\">4</span>)\n    ((<span class=\"hljs-name\">variable?</span> sym) <span class=\"hljs-number\">4</span>)\n    ((<span class=\"hljs-name\"><span class=\"hljs-built_in\">pair?</span></span> sym) <span class=\"hljs-number\">4</span>)\n    (<span class=\"hljs-name\"><span class=\"hljs-built_in\">else</span></span> (<span class=\"hljs-name\">error</span> <span class=\"hljs-string\">\"unknown symbol --priority\"</span> sym))\n  )\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">least-priority-operation</span> exp)\n    (<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">iter</span> op min-pr exp)\n        (<span class=\"hljs-name\"><span class=\"hljs-built_in\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">null?</span></span> exp)\n            op\n            (<span class=\"hljs-name\"><span class=\"hljs-built_in\">let</span></span> ((<span class=\"hljs-name\">np</span> (<span class=\"hljs-name\">priority</span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">car</span></span> exp))))\n                (<span class=\"hljs-name\"><span class=\"hljs-built_in\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">&#x3C;</span></span> np min-pr)\n                    (<span class=\"hljs-name\">iter</span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">car</span></span> exp) np (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cdr</span></span> exp))\n                    (<span class=\"hljs-name\">iter</span> op min-pr (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cdr</span></span> exp))\n                )\n            )\n        )\n    )\n    (<span class=\"hljs-name\">iter</span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">car</span></span> exp) (<span class=\"hljs-name\">priority</span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">car</span></span> exp)) (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cdr</span></span> exp))\n)\n\n(<span class=\"hljs-name\">least-priority-operation</span> '(x + x**2 + <span class=\"hljs-number\">3</span> * x**3))\n(<span class=\"hljs-name\">least-priority-operation</span> '(x * y ** <span class=\"hljs-number\">2</span>))\n(<span class=\"hljs-name\">least-priority-operation</span> '(y ** <span class=\"hljs-number\">2</span>))\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">unwrap</span> val) \n    (<span class=\"hljs-name\"><span class=\"hljs-built_in\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">and</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">pair?</span></span> val) (<span class=\"hljs-name\"><span class=\"hljs-built_in\">null?</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cdr</span></span> val)))\n        (<span class=\"hljs-name\"><span class=\"hljs-built_in\">car</span></span> val)\n        val\n    )\n)\n\n<span class=\"hljs-comment\">; Return part of expression before first appearance of given symbol</span>\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">before</span> sym exp)\n    (<span class=\"hljs-name\"><span class=\"hljs-built_in\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">or</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">null?</span></span> exp) (<span class=\"hljs-name\"><span class=\"hljs-built_in\">eq?</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">car</span></span> exp) sym))\n        '()\n        (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cons</span></span>\n            (<span class=\"hljs-name\"><span class=\"hljs-built_in\">car</span></span> exp)\n            (<span class=\"hljs-name\">before</span> sym (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cdr</span></span> exp))\n        )\n    )\n)\n\n(<span class=\"hljs-name\">before</span> <span class=\"hljs-symbol\">'+</span> '(y ** <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">3</span>))\n\n<span class=\"hljs-comment\">; Return part of expression after symbol</span>\n<span class=\"hljs-comment\">; BTW, for division to work properly we need to take last occurence here, but </span>\n<span class=\"hljs-comment\">; as we don't have division - I'll leave it with first</span>\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">after</span> sym exp)\n    (<span class=\"hljs-name\"><span class=\"hljs-built_in\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">null?</span></span> exp)\n        '()\n        (<span class=\"hljs-name\"><span class=\"hljs-built_in\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">eq?</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">car</span></span> exp) sym)\n            (<span class=\"hljs-name\">unwrap</span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cdr</span></span> exp))\n            (<span class=\"hljs-name\">after</span> sym (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cdr</span></span> exp))\n        )\n    )\n)\n\n(<span class=\"hljs-name\">after</span> <span class=\"hljs-symbol\">'+</span> '(y ** <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">3</span>))\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">make-sum</span> a1 a2)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cond</span></span> ((<span class=\"hljs-name\">=number?</span> a1 <span class=\"hljs-number\">0</span>) a2)\n        ((<span class=\"hljs-name\">=number?</span> a2 <span class=\"hljs-number\">0</span>) a1)\n        ((<span class=\"hljs-name\"><span class=\"hljs-built_in\">and</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">number?</span></span> a1) (<span class=\"hljs-name\"><span class=\"hljs-built_in\">number?</span></span> a2)) (<span class=\"hljs-name\"><span class=\"hljs-built_in\">+</span></span> a1 a2))\n        (<span class=\"hljs-name\"><span class=\"hljs-built_in\">else</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">list</span></span> a1 <span class=\"hljs-symbol\">'+</span> a2))))\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">make-product</span> m1 m2)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cond</span></span> ((<span class=\"hljs-name\"><span class=\"hljs-built_in\">or</span></span> (<span class=\"hljs-name\">=number?</span> m1 <span class=\"hljs-number\">0</span>) (<span class=\"hljs-name\">=number?</span> m2 <span class=\"hljs-number\">0</span>)) <span class=\"hljs-number\">0</span>)\n        ((<span class=\"hljs-name\">=number?</span> m1 <span class=\"hljs-number\">1</span>) m2)\n        ((<span class=\"hljs-name\">=number?</span> m2 <span class=\"hljs-number\">1</span>) m1)\n        ((<span class=\"hljs-name\"><span class=\"hljs-built_in\">and</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">number?</span></span> m1) (<span class=\"hljs-name\"><span class=\"hljs-built_in\">number?</span></span> m2)) (<span class=\"hljs-name\"><span class=\"hljs-built_in\">*</span></span> m1 m2))\n        (<span class=\"hljs-name\"><span class=\"hljs-built_in\">else</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">list</span></span> m1 <span class=\"hljs-symbol\">'*</span> m2))))\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">sum?</span> x)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">and</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">pair?</span></span> x) (<span class=\"hljs-name\"><span class=\"hljs-built_in\">eq?</span></span> (<span class=\"hljs-name\">least-priority-operation</span> x) <span class=\"hljs-symbol\">'+</span>)))\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">addend</span> s) (<span class=\"hljs-name\">unwrap</span> (<span class=\"hljs-name\">before</span> <span class=\"hljs-symbol\">'+</span> s)))\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">augend</span> s) (<span class=\"hljs-name\">after</span> <span class=\"hljs-symbol\">'+</span> s))\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">product?</span> x)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">and</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">pair?</span></span> x) (<span class=\"hljs-name\"><span class=\"hljs-built_in\">eq?</span></span> (<span class=\"hljs-name\">least-priority-operation</span> x) <span class=\"hljs-symbol\">'*</span>)))\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">multiplier</span> p) (<span class=\"hljs-name\">unwrap</span> (<span class=\"hljs-name\">before</span> <span class=\"hljs-symbol\">'*</span> p)))\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">multiplicand</span> p) (<span class=\"hljs-name\">after</span> <span class=\"hljs-symbol\">'*</span> p))\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">exponentiation?</span> x)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">and</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">pair?</span></span> x) (<span class=\"hljs-name\"><span class=\"hljs-built_in\">eq?</span></span> (<span class=\"hljs-name\">least-priority-operation</span> x) <span class=\"hljs-symbol\">'**</span>)))\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">base</span> e) (<span class=\"hljs-name\">unwrap</span> (<span class=\"hljs-name\">before</span> <span class=\"hljs-symbol\">'**</span> e)))\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">exponent</span> e) (<span class=\"hljs-name\">after</span> <span class=\"hljs-symbol\">'**</span> e))\n \n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">make-exponentiation</span> base e)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cond</span></span> ((<span class=\"hljs-name\">=number?</span> e <span class=\"hljs-number\">0</span>) <span class=\"hljs-number\">1</span>)\n        ((<span class=\"hljs-name\">=number?</span> e <span class=\"hljs-number\">1</span>) base)\n        (<span class=\"hljs-name\"><span class=\"hljs-built_in\">else</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">list</span></span> base <span class=\"hljs-symbol\">'**</span> e))))\n\n(<span class=\"hljs-name\">deriv</span> '(x + x ** <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">3</span> * x ** <span class=\"hljs-number\">3</span>) <span class=\"hljs-symbol\">'x</span>)</code></pre>\n<p>This is rather ugly (I don't like <code>before</code>, <code>after</code>, <code>unwrap</code> etc., it does not seem very performant to use them), but I see we will have another example Symbolic Algebra later, maybe there will be a chance to make it better.</p>"},"__N_SSG":true}