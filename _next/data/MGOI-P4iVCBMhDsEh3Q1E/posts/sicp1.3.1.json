{"pageProps":{"id":"sicp1.3.1","title":"SICP 1.3.1 Procedures as arguments","date":"2020-06-27","tags":["SICP"],"content":"<p>Solving more exercises, trying not to skip to be able to learn next chapters better.</p>\n<h2>Exercise 1.29 Simpson rule integration</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">cube</span> x) (<span class=\"hljs-name\"><span class=\"hljs-built_in\">*</span></span> x x x))\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">integral</span> f a b dx)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">add-dx</span> x) (<span class=\"hljs-name\"><span class=\"hljs-built_in\">+</span></span> x dx))\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">*</span></span> (<span class=\"hljs-name\">sum</span> f (<span class=\"hljs-name\"><span class=\"hljs-built_in\">+</span></span> a (<span class=\"hljs-name\"><span class=\"hljs-built_in\">/</span></span> dx <span class=\"hljs-number\">2.0</span>)) add-dx b)\n     dx))\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">sum</span> term a next b)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">></span></span> a b)\n      <span class=\"hljs-number\">0</span>\n      (<span class=\"hljs-name\"><span class=\"hljs-built_in\">+</span></span> (<span class=\"hljs-name\">term</span> a)\n         (<span class=\"hljs-name\">sum</span> term (<span class=\"hljs-name\">next</span> a) next b))))\n\n(<span class=\"hljs-name\">integral</span> cube <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">0.01</span>)\n<span class=\"hljs-comment\">; .24998750000000042</span>\n(<span class=\"hljs-name\">integral</span> cube <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">0.001</span>)\n<span class=\"hljs-comment\">;.249999875000001</span>\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">simpson-rule-integral</span> f a b n)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">inc</span> x) (<span class=\"hljs-name\"><span class=\"hljs-built_in\">+</span></span> x <span class=\"hljs-number\">1</span>))\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">term</span> i)\n    (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cond</span></span>\n      ((<span class=\"hljs-name\"><span class=\"hljs-built_in\">=</span></span> i <span class=\"hljs-number\">0</span>) (<span class=\"hljs-name\">f</span> a))\n      ((<span class=\"hljs-name\"><span class=\"hljs-built_in\">=</span></span> i n) (<span class=\"hljs-name\">f</span> b))\n      ((<span class=\"hljs-name\"><span class=\"hljs-built_in\">even?</span></span> i) (<span class=\"hljs-name\"><span class=\"hljs-built_in\">*</span></span> <span class=\"hljs-number\">2</span> (<span class=\"hljs-name\">f</span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">+</span></span> a (<span class=\"hljs-name\"><span class=\"hljs-built_in\">*</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">/</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">-</span></span> b a) n) i)))))\n      (<span class=\"hljs-name\"><span class=\"hljs-built_in\">else</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">*</span></span> <span class=\"hljs-number\">4</span> (<span class=\"hljs-name\">f</span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">+</span></span> a (<span class=\"hljs-name\"><span class=\"hljs-built_in\">*</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">/</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">-</span></span> b a) n) i)))))\n    )\n  )\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">*</span></span> (<span class=\"hljs-name\">sum</span> term <span class=\"hljs-number\">0</span> inc n)\n     (<span class=\"hljs-name\"><span class=\"hljs-built_in\">/</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">-</span></span> b a) n <span class=\"hljs-number\">3</span>))\n)\n\n(<span class=\"hljs-name\">simpson-rule-integral</span> cube <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">10</span>)\n<span class=\"hljs-comment\">;Value: 1/4</span>\n</code></pre>\n<p>Seems to work very precise. Gives rational numbers, wow. Even when try with different functions:</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">identity</span> x) x)\n(<span class=\"hljs-name\">simpson-rule-integral</span> identity <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">10</span>)\n<span class=\"hljs-comment\">;Value: 1/2</span></code></pre>\n<h2>Exercise 1.30 Iterative summation</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">sum</span> term a next b)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">iter</span> a result)\n    (<span class=\"hljs-name\"><span class=\"hljs-built_in\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">></span></span> a b)\n        result\n        (<span class=\"hljs-name\">iter</span> (<span class=\"hljs-name\">next</span> a) (<span class=\"hljs-name\"><span class=\"hljs-built_in\">+</span></span> (<span class=\"hljs-name\">term</span> a) result))))\n  (<span class=\"hljs-name\">iter</span> a <span class=\"hljs-number\">0</span>))</code></pre>\n<h2>Exercise 1.31 Product</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">product</span> term a next b)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">iter</span> a result)\n    (<span class=\"hljs-name\"><span class=\"hljs-built_in\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">></span></span> a b)\n        result\n        (<span class=\"hljs-name\">iter</span> (<span class=\"hljs-name\">next</span> a) (<span class=\"hljs-name\"><span class=\"hljs-built_in\">*</span></span> (<span class=\"hljs-name\">term</span> a) result))))\n  (<span class=\"hljs-name\">iter</span> a <span class=\"hljs-number\">1</span>))</code></pre>\n<p>Factorial:</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">inc</span> i) (<span class=\"hljs-name\"><span class=\"hljs-built_in\">+</span></span> i <span class=\"hljs-number\">1</span>))\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">identity</span> x) x)\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">factorial</span> n) (<span class=\"hljs-name\">product</span> identity <span class=\"hljs-number\">1</span> inc n))</code></pre>\n<p>Approximating Pi:</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">pi</span> precision) \n    (<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">term</span> i)\n        (<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> k (<span class=\"hljs-name\"><span class=\"hljs-built_in\">*</span></span> i <span class=\"hljs-number\">2</span>))\n        (<span class=\"hljs-name\"><span class=\"hljs-built_in\">/</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">*</span></span> k (<span class=\"hljs-name\"><span class=\"hljs-built_in\">+</span></span> k <span class=\"hljs-number\">2</span>)) (<span class=\"hljs-name\">square</span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">+</span></span> k <span class=\"hljs-number\">1</span>)))\n    )\n    (<span class=\"hljs-name\"><span class=\"hljs-built_in\">*</span></span> <span class=\"hljs-number\">4.0</span> (<span class=\"hljs-name\">product</span> term <span class=\"hljs-number\">1</span> inc precision))\n)\n(<span class=\"hljs-name\">pi</span> <span class=\"hljs-number\">100</span>)\n<span class=\"hljs-comment\">;Value: 3.1493784731686008</span></code></pre>\n<p>Recursive product:</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">product</span> term a next b)\n    (<span class=\"hljs-name\"><span class=\"hljs-built_in\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">></span></span> a b)\n        <span class=\"hljs-number\">1</span>\n        (<span class=\"hljs-name\"><span class=\"hljs-built_in\">*</span></span> (<span class=\"hljs-name\">term</span> a) (<span class=\"hljs-name\">product</span> term (<span class=\"hljs-name\">next</span> a) next b))\n    )\n)</code></pre>\n<h2>Exercise 1.32: Accumulate</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">accumulate</span> combiner null-value term a next b)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">></span></span> a b)\n    null-value\n    (<span class=\"hljs-name\">combiner</span>\n      (<span class=\"hljs-name\">term</span> a)\n      (<span class=\"hljs-name\">accumulate</span> combiner null-value term (<span class=\"hljs-name\">next</span> a) next b)\n    )\n  )\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">sum</span> term a next b)\n  (<span class=\"hljs-name\">accumulate</span> + <span class=\"hljs-number\">0</span> term a next b)\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">product</span> term a next b)\n  (<span class=\"hljs-name\">accumulate</span> * <span class=\"hljs-number\">1</span> term a next b)\n)</code></pre>\n<p>Iterative:</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">accumulate</span> combiner null-value term a next b)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">iter</span> a result)\n    (<span class=\"hljs-name\"><span class=\"hljs-built_in\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">></span></span> a b)\n      result\n      (<span class=\"hljs-name\">iter</span> (<span class=\"hljs-name\">next</span> a) (<span class=\"hljs-name\">combiner</span> (<span class=\"hljs-name\">term</span> a) result))\n    )\n  )\n  (<span class=\"hljs-name\">iter</span> a null-value)\n)</code></pre>\n<h2>Exercise 1.33 Filtered accumulate</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">filtered-accumulate</span> combiner null-value term a next b filter)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">iter</span> a result)\n    (<span class=\"hljs-name\"><span class=\"hljs-built_in\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">></span></span> a b)\n      result\n      (<span class=\"hljs-name\"><span class=\"hljs-built_in\">if</span></span> (<span class=\"hljs-name\">filter</span> a) \n          (<span class=\"hljs-name\">iter</span> (<span class=\"hljs-name\">next</span> a) result)\n          (<span class=\"hljs-name\">iter</span> (<span class=\"hljs-name\">next</span> a) (<span class=\"hljs-name\">combiner</span> (<span class=\"hljs-name\">term</span> a) result))\n      )\n    )\n  )\n  (<span class=\"hljs-name\">iter</span> a null-value)\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">sum-of-squares-of-primes-in-interval</span> a b)\n    (<span class=\"hljs-name\">filtered-accumulate</span> + <span class=\"hljs-number\">0</span> sqr a inc b prime?)\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">product-of-relatively-primes-to</span> n)\n    (<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">!rel-prime</span> x)\n      (<span class=\"hljs-name\"><span class=\"hljs-built_in\">not</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">=</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">gcd</span></span> x n) <span class=\"hljs-number\">1</span>))\n    )\n    (<span class=\"hljs-name\">filtered-accumulate</span> * <span class=\"hljs-number\">1</span> identity <span class=\"hljs-number\">1</span> inc n !rel-prime)\n)</code></pre>"},"__N_SSG":true}