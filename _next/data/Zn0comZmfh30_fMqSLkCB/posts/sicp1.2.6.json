{"pageProps":{"post":{"id":"sicp1.2.6","title":"SICP 1.2.6 Primes","date":"2020-06-21","tags":["SICP"],"excerpt":"<p>A little bit of number theory.</p>","content":"<p>A little bit of number theory.</p>\n<h2>Exercise 1.21: Smallest divisors</h2>\n<p>This is so trivial, so I'll try to rewrite example, because it's just copypaste otherwise:</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">divisor?</span> d n) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">remainder</span></span> n d) <span class=\"hljs-number\">0</span>))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">smallest-divisor</span> n)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">find-divisor</span> n d)\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cond</span></span> ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">></span></span> (<span class=\"hljs-name\">sqr</span> d) n) n)\n            ((<span class=\"hljs-name\">divisor?</span> d n) d)\n            (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">else</span></span> (<span class=\"hljs-name\">find-divisor</span> n (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> d <span class=\"hljs-number\">1</span>)))\n        )\n\n    )\n    (<span class=\"hljs-name\">find-divisor</span> n <span class=\"hljs-number\">2</span>)\n)</code></pre>\n<pre><code class=\"hljs language-scheme\"><span class=\"hljs-number\">1</span> ]=> (<span class=\"hljs-name\">smallest-divisor</span> <span class=\"hljs-number\">199</span>)\n\n<span class=\"hljs-comment\">;Value: 199</span>\n\n<span class=\"hljs-number\">1</span> ]=> (<span class=\"hljs-name\">smallest-divisor</span> <span class=\"hljs-number\">1999</span>)\n\n<span class=\"hljs-comment\">;Value: 1999</span>\n\n<span class=\"hljs-number\">1</span> ]=> (<span class=\"hljs-name\">smallest-divisor</span> <span class=\"hljs-number\">19999</span>)\n\n<span class=\"hljs-comment\">;Value: 7</span></code></pre>\n<p>Well, that was unexpected. :)</p>\n<h2>Exercise 1.22:</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">prime?</span> n)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> n (<span class=\"hljs-name\">smallest-divisor</span> n)))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">next-prime</span> n) \n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\">prime?</span> n)\n        n\n        (<span class=\"hljs-name\">next-prime</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> n <span class=\"hljs-number\">2</span>))\n    )\n)\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">timed-prime-test</span> n)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">start-prime-test</span> n start-time)\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">display</span></span> <span class=\"hljs-string\">\"next prime after \"</span>) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">display</span></span> n)\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">display</span></span> <span class=\"hljs-string\">\": \"</span>) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">display</span></span> (<span class=\"hljs-name\">next-prime</span> n)) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">newline</span></span>)\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">display</span></span> <span class=\"hljs-string\">\"Time: \"</span>) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">display</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> (<span class=\"hljs-name\">runtime</span>) start-time))\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">newline</span></span>)\n    )\n    (<span class=\"hljs-name\">start-prime-test</span> n (<span class=\"hljs-name\">runtime</span>))\n)\n(<span class=\"hljs-name\">timed-prime-test</span> <span class=\"hljs-number\">10000000001</span>)\n<span class=\"hljs-comment\">; next prime after 10000000001: 10000000019</span>\n<span class=\"hljs-comment\">; Time: .19999999999998863</span>\n(<span class=\"hljs-name\">timed-prime-test</span> <span class=\"hljs-number\">1000000000001</span>)\n<span class=\"hljs-comment\">; next prime after 1000000000001: 1000000000039</span>\n<span class=\"hljs-comment\">; Time: 1.3700000000000045</span></code></pre>\n<p>Seems to take 10 times more time for 100 times bigger number.</p>\n<h2>Exercise 1.23</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">next</span> n) \n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> n <span class=\"hljs-number\">2</span>) <span class=\"hljs-number\">3</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> n <span class=\"hljs-number\">2</span>))\n)\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">smallest-divisor</span> n)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">find-divisor</span> n d)\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cond</span></span> ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">></span></span> (<span class=\"hljs-name\">sqr</span> d) n) n)\n            ((<span class=\"hljs-name\">divisor?</span> d n) d)\n            (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">else</span></span> (<span class=\"hljs-name\">find-divisor</span> n (<span class=\"hljs-name\">next</span> d)))\n        )\n\n    )\n    (<span class=\"hljs-name\">find-divisor</span> n <span class=\"hljs-number\">2</span>)\n)\n\n(<span class=\"hljs-name\">timed-prime-test</span> <span class=\"hljs-number\">10000000001</span>)\n<span class=\"hljs-comment\">;Time: .12000000000000455</span>\n\n(<span class=\"hljs-name\">timed-prime-test</span> <span class=\"hljs-number\">1000000000001</span>)\n<span class=\"hljs-comment\">; Time: .8000000000000114</span></code></pre>\n<p>A little bit less than twice as fast. I assume this is because calling next and doing comparisons inside it takes more time than just (+ n 1)</p>\n<h2>Exercise 1.24</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">expmod</span> base exp m)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cond</span></span> ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> exp <span class=\"hljs-number\">0</span>) <span class=\"hljs-number\">1</span>)\n        ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">even?</span></span> exp)\n         (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">remainder</span></span> (<span class=\"hljs-name\">square</span> (<span class=\"hljs-name\">expmod</span> base (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> exp <span class=\"hljs-number\">2</span>) m))\n                    m))\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">else</span></span>\n         (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">remainder</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> base (<span class=\"hljs-name\">expmod</span> base (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> exp <span class=\"hljs-number\">1</span>) m))\n                    m))))        \n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">fermat-test</span> n)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">try-it</span> a)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> (<span class=\"hljs-name\">expmod</span> a n n) a))\n  (<span class=\"hljs-name\">try-it</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> <span class=\"hljs-number\">1</span> (<span class=\"hljs-name\">random</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> n <span class=\"hljs-number\">1</span>)))))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">fast-prime?</span> n times)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cond</span></span> ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> times <span class=\"hljs-number\">0</span>) true)\n        ((<span class=\"hljs-name\">fermat-test</span> n) (<span class=\"hljs-name\">fast-prime?</span> n (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> times <span class=\"hljs-number\">1</span>)))\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">else</span></span> false)))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">next-prime</span> n) \n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\">fast-prime?</span> n <span class=\"hljs-number\">10</span>)\n        n\n        (<span class=\"hljs-name\">next-prime</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> n <span class=\"hljs-number\">2</span>))\n    )\n)\n\n(<span class=\"hljs-name\">timed-prime-test</span> <span class=\"hljs-number\">1000000000001</span>)\n<span class=\"hljs-comment\">; next prime after 1000000000001: 1000000000039</span>\n<span class=\"hljs-comment\">; Time: 9.999999999990905e-3</span>\n\n(<span class=\"hljs-name\">timed-prime-test</span> <span class=\"hljs-number\">10000000000000000000001</span>)\n<span class=\"hljs-comment\">; next prime after 10000000000000000000001: 10000000000000000000009</span>\n<span class=\"hljs-comment\">; Time: 9.999999999990905e-3</span></code></pre>\n<p>Time seems to not change at all (but of course first search checked more numbers).</p>\n<h2>Exercise 1.25</h2>\n<p>That would slow down our computations tremendously, because we would need to multiply huge numbers. With millions of digits, which would take megabytes of memory.</p>\n<h2>Exercise 1.26</h2>\n<p>In correct <code>expmod</code>, every time <code>expmod</code> is recursively called with half of <code>exp</code> argument, it is called once.</p>\n<p>In Louis Reasoner implementation, when <code>expmod</code> is called with halved <code>exp</code> argument, it is called twice, so halving the argument is compensated by doubling the tree of recursion, and that's why number of calls to <code>expmod</code> is proportional to the argument.</p>\n<h2>Exercise 1.27</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">full-fermat</span> n)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">f-prime?</span> a)\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> (<span class=\"hljs-name\">expmod</span> a n n) a)\n    )\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">iter</span> a)\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> a n)\n            <span class=\"hljs-literal\">#t</span> <span class=\"hljs-comment\">; test passed</span>\n            (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\">f-prime?</span> a)\n                (<span class=\"hljs-name\">iter</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> a <span class=\"hljs-number\">1</span>))\n                <span class=\"hljs-literal\">#f</span><span class=\"hljs-comment\">; test failed</span>\n            )\n        )\n    )\n    (<span class=\"hljs-name\">iter</span> <span class=\"hljs-number\">2</span>)\n)\n\n(<span class=\"hljs-name\">full-fermat</span> <span class=\"hljs-number\">13</span>)<span class=\"hljs-comment\">; #t</span>\n(<span class=\"hljs-name\">full-fermat</span> <span class=\"hljs-number\">15</span>)<span class=\"hljs-comment\">; #f</span>\n(<span class=\"hljs-name\">full-fermat</span> <span class=\"hljs-number\">561</span>)<span class=\"hljs-comment\">; #t</span>\n(<span class=\"hljs-name\">full-fermat</span> <span class=\"hljs-number\">1105</span>)<span class=\"hljs-comment\">; #t</span>\n(<span class=\"hljs-name\">full-fermat</span> <span class=\"hljs-number\">1729</span>)<span class=\"hljs-comment\">; #t</span></code></pre>\n<h2>Exercise 1.28: Miller-Rabin test</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">!=</span> a b) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">not</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> a b))) <span class=\"hljs-comment\">; I need some Scheme reference, really. How this is not built-in?</span>\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">report</span> n m)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">display</span></span> n)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">display</span></span> <span class=\"hljs-string\">\" is a nontrivial square root of 1 modulo \"</span>)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">display</span></span> m)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">newline</span></span>)\n  <span class=\"hljs-number\">0</span>\n)\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">expmod</span> base exp m)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">squaremod-signal</span> n)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">is-root?</span> sq) \n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">and</span></span>  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> sq <span class=\"hljs-number\">1</span>) (<span class=\"hljs-name\">!=</span> n <span class=\"hljs-number\">1</span>) (<span class=\"hljs-name\">!=</span> n (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> m <span class=\"hljs-number\">1</span>)))\n            (<span class=\"hljs-name\">report</span> n m)\n            sq\n        )\n    )\n    (<span class=\"hljs-name\">is-root?</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">remainder</span></span> (<span class=\"hljs-name\">square</span> n) m))\n  )\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cond</span></span> ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> exp <span class=\"hljs-number\">0</span>) <span class=\"hljs-number\">1</span>)\n        ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">even?</span></span> exp)\n         (<span class=\"hljs-name\">squaremod-signal</span> (<span class=\"hljs-name\">expmod</span> base (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> exp <span class=\"hljs-number\">2</span>) m)))\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">else</span></span>\n         (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">remainder</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> base (<span class=\"hljs-name\">expmod</span> base (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> exp <span class=\"hljs-number\">1</span>) m))\n                    m))))        \n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">fast-prime?</span> n times)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cond</span></span> ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> times <span class=\"hljs-number\">0</span>) true)\n        ((<span class=\"hljs-name\">miller-rabin-test</span> n) (<span class=\"hljs-name\">fast-prime?</span> n (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> times <span class=\"hljs-number\">1</span>)))\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">else</span></span> false)))\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">miller-rabin-test</span> n)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">try-it</span> a)\n    (<span class=\"hljs-name\">!=</span> (<span class=\"hljs-name\">expmod</span> a (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> n <span class=\"hljs-number\">1</span>) n) <span class=\"hljs-number\">0</span>)\n  )\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">even?</span></span> n)\n      <span class=\"hljs-literal\">#f</span>\n      (<span class=\"hljs-name\">try-it</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> <span class=\"hljs-number\">1</span> (<span class=\"hljs-name\">random</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> n <span class=\"hljs-number\">1</span>))))\n  )\n)\n(<span class=\"hljs-name\">fast-prime?</span> <span class=\"hljs-number\">1009</span> <span class=\"hljs-number\">30</span>)\n(<span class=\"hljs-name\">fast-prime?</span> <span class=\"hljs-number\">13</span> <span class=\"hljs-number\">30</span>)\n(<span class=\"hljs-name\">fast-prime?</span> <span class=\"hljs-number\">6601</span> <span class=\"hljs-number\">30</span>)</code></pre>\n<p>Whew! How this even work - no idea, but somehow it does. Thankfully I'm good in this technique:</p>\n<p><img src=\"/content/trying-stuff-orly.jpg\" alt=\"Trying Stuff Until it Works\" title=\"Trying Stuff Until it Works\"></p>"},"archives":[{"url":"/month/2018-12/page/1","id":"2018-12","count":1,"title":"2018-12"},{"url":"/month/2020-06/page/1","id":"2020-06","count":7,"title":"2020-06"},{"url":"/month/2020-07/page/1","id":"2020-07","count":10,"title":"2020-07"},{"url":"/month/2020-08/page/1","id":"2020-08","count":2,"title":"2020-08"},{"url":"/month/2020-09/page/1","id":"2020-09","count":2,"title":"2020-09"},{"url":"/month/2020-12/page/1","id":"2020-12","count":1,"title":"2020-12"},{"url":"/month/2021-01/page/1","id":"2021-01","count":4,"title":"2021-01"}],"topics":[{"url":"/tag/MOOC/page/1","id":"MOOC","title":"MOOC","count":2},{"url":"/tag/SICP/page/1","id":"SICP","title":"SICP","count":20},{"url":"/tag/ideas/page/1","id":"ideas","title":"ideas","count":1},{"url":"/tag/notes/page/1","id":"notes","title":"notes","count":5},{"url":"/tag/on writing/page/1","id":"on writing","title":"on writing","count":3}]},"__N_SSG":true}