{"pageProps":{"post":{"id":"sicp1.3.3","title":"SICP 1.3.3 Procedures as general methods","date":"2020-06-29","tags":["SICP"],"excerpt":"<p>I'll attach solution from previous section to this post as it was the only exercise there.</p>","content":"<p>I'll attach solution from previous section to this post as it was the only exercise there.</p>\n<h2>Exercise 1.34 Runtime error with types</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">f</span> g)\n  (<span class=\"hljs-name\">g</span> <span class=\"hljs-number\">2</span>))\n(<span class=\"hljs-name\">f</span> f) -> (<span class=\"hljs-name\">f</span> <span class=\"hljs-number\">2</span>) -> (<span class=\"hljs-name\">2</span> <span class=\"hljs-number\">2</span>)</code></pre>\n<p>2 is obviously not a function, so scheme gives error when you try to apply it as function.</p>\n<h2>Exercise 1.35 Use fixed point procedure for finding golden ratio</h2>\n<p>So, let's divide both sides of equation Φ2 = Φ + 1. We get Φ  = 1 + 1/Φ - and this is exactly the formula to find fixed point for.</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> tolerance <span class=\"hljs-number\">0.00001</span>)\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">fixed-point</span> f first-guess)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">close-enough?</span> v1 v2)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">&#x3C;</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">abs</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> v1 v2)) tolerance))\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">try</span> guess)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">let</span></span> ((<span class=\"hljs-name\">next</span> (<span class=\"hljs-name\">f</span> guess)))\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\">close-enough?</span> guess next)\n          next\n          (<span class=\"hljs-name\">try</span> next))))\n  (<span class=\"hljs-name\">try</span> first-guess))\n(<span class=\"hljs-name\">fixed-point</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (x) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> <span class=\"hljs-number\">1</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> <span class=\"hljs-number\">1</span> x))) <span class=\"hljs-number\">1.0</span>)</code></pre>\n<h2>Exercise 1.36 Printing sequence of approximations</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> tolerance <span class=\"hljs-number\">0.00001</span>)\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">fixed-point</span> f first-guess)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">close-enough?</span> v1 v2)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">&#x3C;</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">abs</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> v1 v2)) tolerance))\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">try</span> guess)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">let</span></span> ((<span class=\"hljs-name\">next</span> (<span class=\"hljs-name\">f</span> guess)))\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">display</span></span> <span class=\"hljs-string\">\"Approximation: \"</span>) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">display</span></span> next)(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">newline</span></span>)\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\">close-enough?</span> guess next)\n          next\n          (<span class=\"hljs-name\">try</span> next))))\n  (<span class=\"hljs-name\">try</span> first-guess))\n(<span class=\"hljs-name\">fixed-point</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (x) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">log</span></span> <span class=\"hljs-number\">1000</span>) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">log</span></span> x))) <span class=\"hljs-number\">2.0</span>)</code></pre>\n<h2>Exercise 1.37 Golden ratio from continued fraction</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">cont-frac</span> n d k)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">iter</span> i) \n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> (<span class=\"hljs-name\">n</span> i) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> i k)\n       (<span class=\"hljs-name\">d</span> i)\n       (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> (<span class=\"hljs-name\">d</span> i) (<span class=\"hljs-name\">iter</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> i <span class=\"hljs-number\">1</span>)))\n    ))\n  )\n  (<span class=\"hljs-name\">iter</span> <span class=\"hljs-number\">1</span>)\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">golden</span> k)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> <span class=\"hljs-number\">1</span> (<span class=\"hljs-name\">cont-frac</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (i) <span class=\"hljs-number\">1.0</span>)\n           (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (i) <span class=\"hljs-number\">1.0</span>)\n           k))\n)\n\n(<span class=\"hljs-name\">golden</span> <span class=\"hljs-number\">12</span>)\n<span class=\"hljs-comment\">;Value: 1.6180555555555558</span>\n</code></pre>\n<p>Iterative continuous fraction:</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">cont-frac</span> n d k)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">iter</span> i result) \n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> i <span class=\"hljs-number\">0</span>)\n      result\n      (<span class=\"hljs-name\">iter</span>\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> i <span class=\"hljs-number\">1</span>)\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> (<span class=\"hljs-name\">n</span> i) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> (<span class=\"hljs-name\">d</span> i) result))\n      )\n    )\n  )\n  (<span class=\"hljs-name\">iter</span> k <span class=\"hljs-number\">0</span>)\n)</code></pre>\n<h2>Exercise 1.38 Euler number</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">e</span> k)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> <span class=\"hljs-number\">2</span> (<span class=\"hljs-name\">cont-frac</span>\n         (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (i) <span class=\"hljs-number\">1.0</span>)\n         (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (i)\n           (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">remainder</span></span> i <span class=\"hljs-number\">3</span>) <span class=\"hljs-number\">2</span>)\n             (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> <span class=\"hljs-number\">1</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">floor</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> i <span class=\"hljs-number\">3</span>))) <span class=\"hljs-number\">2</span>)\n             <span class=\"hljs-number\">1.0</span>\n            )\n         )\n         k\n  ))\n)\n\n(<span class=\"hljs-name\">e</span> <span class=\"hljs-number\">15</span>)\n<span class=\"hljs-comment\">;Value: 2.718281828470584</span></code></pre>\n<h2>Exercise 1.39 Continued fraction tangent</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">tan</span></span> x k)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">let</span></span> ((<span class=\"hljs-name\">n_sqr</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> <span class=\"hljs-number\">0</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> x x))))\n      (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> x (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> <span class=\"hljs-number\">1</span> (<span class=\"hljs-name\">cont-frac</span>\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (i) n_sqr)\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">lambda</span></span> (i) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> <span class=\"hljs-number\">1</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> i <span class=\"hljs-number\">2</span>)))\n        k\n      )))\n  )\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">tan</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> pi <span class=\"hljs-number\">4</span>) <span class=\"hljs-number\">100</span>)\n<span class=\"hljs-comment\">;Value: .9999999732051038</span>\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">tan</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">/</span></span> pi <span class=\"hljs-number\">2</span>) <span class=\"hljs-number\">1000</span>)\n<span class=\"hljs-comment\">;Value: 37320539.58514773</span>\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">tan</span></span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">100</span>)\n<span class=\"hljs-comment\">;Value: 0</span></code></pre>\n<p>Approximately so.</p>"},"archives":[{"url":"/month/2021-10/page/1","id":"2021-10","count":2,"title":"2021-10"},{"url":"/month/2021-01/page/1","id":"2021-01","count":4,"title":"2021-01"},{"url":"/month/2020-12/page/1","id":"2020-12","count":1,"title":"2020-12"},{"url":"/month/2020-09/page/1","id":"2020-09","count":2,"title":"2020-09"},{"url":"/month/2020-08/page/1","id":"2020-08","count":2,"title":"2020-08"},{"url":"/month/2020-07/page/1","id":"2020-07","count":10,"title":"2020-07"},{"url":"/month/2020-06/page/1","id":"2020-06","count":7,"title":"2020-06"},{"url":"/month/2018-12/page/1","id":"2018-12","count":1,"title":"2018-12"}],"topics":[{"url":"/tag/MOOC/page/1","id":"MOOC","title":"MOOC","count":2},{"url":"/tag/SICP/page/1","id":"SICP","title":"SICP","count":20},{"url":"/tag/asm/page/1","id":"asm","title":"asm","count":2},{"url":"/tag/ideas/page/1","id":"ideas","title":"ideas","count":1},{"url":"/tag/notes/page/1","id":"notes","title":"notes","count":7},{"url":"/tag/on writing/page/1","id":"on writing","title":"on writing","count":3}]},"__N_SSG":true}