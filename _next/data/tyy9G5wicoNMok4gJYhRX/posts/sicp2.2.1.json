{"pageProps":{"id":"sicp2.2.1","title":"SICP 2.2.1 Sequences","date":"2020-07-16T21:39:38.000Z","tags":["SICP"],"updated_at":"2021-04-20T00:38:16+02:00","content":"<p>Finally, the thing Lisp was named after.</p>\n<p>Fix MIT Scheme to be like SICP scheme using this:</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> nil '())</code></pre>\n<h2>Exercise 2.17</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">last-pair</span> l)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">null?</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cdr</span></span> l))\n    l\n    (<span class=\"hljs-name\">last-pair</span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cdr</span></span> l))\n  )\n)\n(<span class=\"hljs-name\">last-pair</span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">list</span></span> <span class=\"hljs-number\">23</span> <span class=\"hljs-number\">72</span> <span class=\"hljs-number\">149</span> <span class=\"hljs-number\">34</span>))</code></pre>\n<h2>Exercise 2.18</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">reverse</span></span> l)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">iter</span> src dst)\n    (<span class=\"hljs-name\"><span class=\"hljs-built_in\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">null?</span></span> src)\n      dst\n      (<span class=\"hljs-name\">iter</span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cdr</span></span> src) (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cons</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">car</span></span> src) dst))\n    )\n  )\n  (<span class=\"hljs-name\">iter</span> l nil)\n)\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">reverse</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">list</span></span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">4</span>))</code></pre>\n<h2>Exercise 2.19</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> us-coins (<span class=\"hljs-name\"><span class=\"hljs-built_in\">list</span></span> <span class=\"hljs-number\">50</span> <span class=\"hljs-number\">25</span> <span class=\"hljs-number\">10</span> <span class=\"hljs-number\">5</span> <span class=\"hljs-number\">1</span>))\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> uk-coins (<span class=\"hljs-name\"><span class=\"hljs-built_in\">list</span></span> <span class=\"hljs-number\">100</span> <span class=\"hljs-number\">50</span> <span class=\"hljs-number\">20</span> <span class=\"hljs-number\">10</span> <span class=\"hljs-number\">5</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">0.5</span>))\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">cc</span> amount coin-values)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cond</span></span> ((<span class=\"hljs-name\"><span class=\"hljs-built_in\">=</span></span> amount <span class=\"hljs-number\">0</span>) <span class=\"hljs-number\">1</span>)\n        ((<span class=\"hljs-name\"><span class=\"hljs-built_in\">or</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">&#x3C;</span></span> amount <span class=\"hljs-number\">0</span>) (<span class=\"hljs-name\">no-more?</span> coin-values)) <span class=\"hljs-number\">0</span>)\n        (<span class=\"hljs-name\"><span class=\"hljs-built_in\">else</span></span>\n         (<span class=\"hljs-name\"><span class=\"hljs-built_in\">+</span></span> (<span class=\"hljs-name\">cc</span> amount\n                (<span class=\"hljs-name\">except-first-denomination</span> coin-values))\n            (<span class=\"hljs-name\">cc</span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">-</span></span> amount\n                   (<span class=\"hljs-name\">first-denomination</span> coin-values))\n                coin-values)))))</code></pre>\n<p>Answer:</p>\n<pre><code class=\"hljs language-scheme\">  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> no-more? null?)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> except-first-denomination cdr)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> first-denomination car)</code></pre>\n<p>Order does not matter, because we just sum amount without each element, and with.</p>\n<h2>Exercise 2.20</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">same-parity</span> n . l)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">matches</span> x) \n    (<span class=\"hljs-name\"><span class=\"hljs-built_in\">=</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">remainder</span></span> n <span class=\"hljs-number\">2</span>) (<span class=\"hljs-name\"><span class=\"hljs-built_in\">remainder</span></span> x <span class=\"hljs-number\">2</span>))\n  )\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">iter</span> l) \n    (<span class=\"hljs-name\"><span class=\"hljs-built_in\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">null?</span></span> l)\n      nil\n      (<span class=\"hljs-name\"><span class=\"hljs-built_in\">if</span></span> (<span class=\"hljs-name\">matches</span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">car</span></span> l))\n        (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cons</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">car</span></span> l) (<span class=\"hljs-name\">iter</span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cdr</span></span> l)))\n        (<span class=\"hljs-name\">iter</span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cdr</span></span> l))\n      )\n    )\n  )\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cons</span></span> n (<span class=\"hljs-name\">iter</span> l))\n)</code></pre>\n<h2>Exercise 2.21</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">sqr</span> x) (<span class=\"hljs-name\"><span class=\"hljs-built_in\">*</span></span> x x))\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">square-list</span> items)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">null?</span></span> items)\n      nil\n      (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cons</span></span> (<span class=\"hljs-name\">sqr</span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">car</span></span> items)) (<span class=\"hljs-name\">square-list</span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cdr</span></span> items)))))\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">square-list</span> items)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">map</span></span> sqr items))</code></pre>\n<h2>Exercise 2.22</h2>\n<p>What is <code>cons</code>-ed into list first will be at the end of list.</p>\n<p>If we swap arguments to cons, then we will have the same hierarchy (what was consed first is at deepest pair), just link to the next pair is first element of pair, and value is second. To work with such structure properly, we will have to swap  car and cdr.</p>\n<h2>Exercise 2.23</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">for-each</span></span> f items)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">null?</span></span> items)\n    <span class=\"hljs-number\">0</span>\n    ((<span class=\"hljs-name\"><span class=\"hljs-built_in\">lambda</span></span> () <span class=\"hljs-comment\">; Need some proper way to write blocks of code in if</span>\n      (<span class=\"hljs-name\">f</span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">car</span></span> items))\n      (<span class=\"hljs-name\"><span class=\"hljs-built_in\">for-each</span></span> f (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cdr</span></span> items))\n    ))\n  )\n)\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">for-each</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">lambda</span></span> (x) (<span class=\"hljs-name\"><span class=\"hljs-built_in\">newline</span></span>) (<span class=\"hljs-name\"><span class=\"hljs-built_in\">display</span></span> x))\n          (<span class=\"hljs-name\"><span class=\"hljs-built_in\">list</span></span> <span class=\"hljs-number\">57</span> <span class=\"hljs-number\">321</span> <span class=\"hljs-number\">88</span>))</code></pre>"},"__N_SSG":true}