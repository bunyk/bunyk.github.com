{"pageProps":{"post":{"id":"sicp1.2.2","title":"SICP 1.2.2 Tree recursion","date":"2020-06-14","tags":["SICP"],"excerpt":"","content":"<p>I like how they did not shown yet how to work with any data structures, but wrote function that behaves like a immutable array:</p>\n<pre><code class=\"hljs language-scheme\"> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">first-denomination</span> kinds-of-coins)\n  (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cond</span></span> ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> kinds-of-coins <span class=\"hljs-number\">1</span>) <span class=\"hljs-number\">1</span>)\n        ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> kinds-of-coins <span class=\"hljs-number\">2</span>) <span class=\"hljs-number\">5</span>)\n        ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> kinds-of-coins <span class=\"hljs-number\">3</span>) <span class=\"hljs-number\">10</span>)\n        ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> kinds-of-coins <span class=\"hljs-number\">4</span>) <span class=\"hljs-number\">25</span>)\n        ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> kinds-of-coins <span class=\"hljs-number\">5</span>) <span class=\"hljs-number\">50</span>)))</code></pre>\n<h2>Exercise 1.11</h2>\n<p>Functions should produce following sequence: 1, 2, 4, 11, 25, 59, 142\n(<a href=\"https://oeis.org/A100550\">Sequence A100550</a> in the On-Line Encyclopedia of Integer Sequences)</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">next-f</span> c d e)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> e (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> <span class=\"hljs-number\">2</span> d) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">*</span></span> <span class=\"hljs-number\">3</span> c)))\n\n(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">f</span> n) \n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">&#x3C;</span></span> n <span class=\"hljs-number\">3</span>) \n        n\n        (<span class=\"hljs-name\">next-f</span> (<span class=\"hljs-name\">f</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> n <span class=\"hljs-number\">3</span>))\n           (<span class=\"hljs-name\">f</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> n <span class=\"hljs-number\">2</span>))\n           (<span class=\"hljs-name\">f</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> n <span class=\"hljs-number\">1</span>)))))</code></pre>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">f</span> n)\n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">f-iter</span> a b c n)\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">if</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">&#x3C;</span></span> n <span class=\"hljs-number\">3</span>)\n            c\n            (<span class=\"hljs-name\">f-iter</span> b c (<span class=\"hljs-name\">next-f</span> a b c) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> n <span class=\"hljs-number\">1</span>))))\n    (<span class=\"hljs-name\">f-iter</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span> n))</code></pre>\n<p>Done.</p>\n<h2>Exercise 1.12. Pascal triangle</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">define</span></span> (<span class=\"hljs-name\">P</span> row col) \n    (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">cond</span></span>\n        ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> col <span class=\"hljs-number\">1</span>) <span class=\"hljs-number\">1</span>) <span class=\"hljs-comment\">; first number in row is 1</span>\n        ((<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">=</span></span> col row) <span class=\"hljs-number\">1</span>) <span class=\"hljs-comment\">; last number is 1 too</span>\n        (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">else</span></span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">+</span></span> <span class=\"hljs-comment\">; otherwise it's sum of two number above</span>\n            (<span class=\"hljs-name\">P</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> row <span class=\"hljs-number\">1</span>) (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> col <span class=\"hljs-number\">1</span>))\n            (<span class=\"hljs-name\">P</span> (<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">-</span></span> row <span class=\"hljs-number\">1</span>) col)))))</code></pre>\n<h2>Exercise 1.13</h2>\n<p>This is hard one for me, because I'm not so good with math. I'll skip this for now.</p>"},"archives":[{"url":"/month/2021-10/page/1","id":"2021-10","count":1,"title":"2021-10"},{"url":"/month/2021-01/page/1","id":"2021-01","count":4,"title":"2021-01"},{"url":"/month/2020-12/page/1","id":"2020-12","count":1,"title":"2020-12"},{"url":"/month/2020-09/page/1","id":"2020-09","count":2,"title":"2020-09"},{"url":"/month/2020-08/page/1","id":"2020-08","count":2,"title":"2020-08"},{"url":"/month/2020-07/page/1","id":"2020-07","count":10,"title":"2020-07"},{"url":"/month/2020-06/page/1","id":"2020-06","count":7,"title":"2020-06"},{"url":"/month/2018-12/page/1","id":"2018-12","count":1,"title":"2018-12"}],"topics":[{"url":"/tag/MOOC/page/1","id":"MOOC","title":"MOOC","count":2},{"url":"/tag/SICP/page/1","id":"SICP","title":"SICP","count":20},{"url":"/tag/asm/page/1","id":"asm","title":"asm","count":1},{"url":"/tag/ideas/page/1","id":"ideas","title":"ideas","count":1},{"url":"/tag/notes/page/1","id":"notes","title":"notes","count":6},{"url":"/tag/on writing/page/1","id":"on writing","title":"on writing","count":3}]},"__N_SSG":true}