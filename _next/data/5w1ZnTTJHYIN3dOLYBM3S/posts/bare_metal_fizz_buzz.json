{"pageProps":{"id":"bare_metal_fizz_buzz","title":"Bare metal \"Fizz Buzz\"","date":"2021-10-31T18:45:07.000Z","tags":["notes","asm"],"updated_at":"2021-10-31T19:56:45+01:00","content":"<p>Being able to write <a href=\"http://bunyk.github.io/posts/bare_metal_hello_world\">hello world</a> would not get you a job. To be able to get a job, you need to at least be able to write program called \"<a href=\"https://en.wikipedia.org/wiki/Fizz_buzz#Programming\">fizz buzz</a>\". Yes, really, on one interview I was asked to write such program.</p>\n<p>It's hard to design such a program without subroutines to print different strings and numbers, so we would need to learn how to add subroutines to assembler.</p>\n<h2>New way to jump around</h2>\n<p>To have subroutines we need just two instructions, <code>call</code>, and <code>ret</code>.</p>\n<p>Call is almost the same as <code>jmp</code>, but in addition it writes the address of next instruction to the stack, so <code>ret</code> knows where to return. We could return also by using <code>jmp</code>, but if we call our subroutine from two different places, <code>jmp</code> would not know where to jump.</p>\n<p>There is special register called <code>ip</code>, that has address of instruction currently executed, but we could not read or manipulate it directly (on <code>x86</code> processors).</p>\n<p>Additionally, it is nice behaviour for the subroutines to <code>push</code> values of the registers they will mess with to the stack, and then <code>pop</code> them before return, so code that calls subroutines, could use that registers for other computations.</p>\n<p>So, knowing all this, routine to print a string could look like this:</p>\n<pre><code class=\"hljs language-x86asm\"><span class=\"hljs-comment\">; println routine prints null-terminated string to which bx points</span>\n<span class=\"hljs-symbol\">println:</span>\n\t<span class=\"hljs-keyword\">push</span> <span class=\"hljs-built_in\">ax</span> <span class=\"hljs-comment\">; save ax, and bx, since their values will be changed</span>\n\t<span class=\"hljs-keyword\">push</span> <span class=\"hljs-built_in\">bx</span>\n\n\t<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-number\">ah</span>, <span class=\"hljs-number\">0x0e</span><span class=\"hljs-comment\">; teletype mode</span>\n<span class=\"hljs-symbol\">\n\tprint_loop:</span> \n\t\t<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">al</span>, [<span class=\"hljs-built_in\">bx</span>] <span class=\"hljs-comment\">; prepare to print character to which bx points now</span>\n\n\t\t<span class=\"hljs-keyword\">cmp</span> <span class=\"hljs-built_in\">al</span>, <span class=\"hljs-number\">0</span>    <span class=\"hljs-comment\">; is it 0?</span>\n\t\t<span class=\"hljs-keyword\">je</span> finish_print    <span class=\"hljs-comment\">; if yes - jump to finish_print</span>\n\n\t\t<span class=\"hljs-keyword\">int</span> <span class=\"hljs-number\">0x10</span> \t <span class=\"hljs-comment\">; print current character</span>\n\n\t\t<span class=\"hljs-keyword\">inc</span> <span class=\"hljs-built_in\">bx</span> \t\t <span class=\"hljs-comment\">; go to next byte</span>\n\t<span class=\"hljs-keyword\">jmp</span> print_loop\n<span class=\"hljs-symbol\">\n\tfinish_print:</span>\n\t<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">al</span>, <span class=\"hljs-number\">13</span> <span class=\"hljs-comment\">; print \\r, moves to beginning of line</span>\n\t<span class=\"hljs-keyword\">int</span> <span class=\"hljs-number\">0x10</span>\n\t<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">al</span>, <span class=\"hljs-number\">10</span> <span class=\"hljs-comment\">; print \\n, moves to new line</span>\n\t<span class=\"hljs-keyword\">int</span> <span class=\"hljs-number\">0x10</span>\n\n\t<span class=\"hljs-keyword\">pop</span> <span class=\"hljs-built_in\">bx</span> <span class=\"hljs-comment\">; restore values of registers</span>\n\t<span class=\"hljs-keyword\">pop</span> <span class=\"hljs-built_in\">ax</span>\n<span class=\"hljs-keyword\">ret</span> <span class=\"hljs-comment\">; return to caller</span></code></pre>\n<p>Having this subroutine, to print two different lines, we just write this code:</p>\n<pre><code class=\"hljs language-x86asm\"><span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">bx</span>, msg <span class=\"hljs-comment\">; put address of message to bx</span>\n<span class=\"hljs-keyword\">call</span> println <span class=\"hljs-comment\">; print what bx points to</span>\n\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">bx</span>, msg2  <span class=\"hljs-comment\">; print msg2</span>\n<span class=\"hljs-keyword\">call</span> println\n\n<span class=\"hljs-keyword\">jmp</span> $ <span class=\"hljs-comment\">; loop forever</span>\n<span class=\"hljs-symbol\">\nmsg:</span> \n<span class=\"hljs-built_in\">db</span> <span class=\"hljs-string\">\"Fizz\"</span>,<span class=\"hljs-number\">0</span>\n<span class=\"hljs-symbol\">\nmsg2:</span> \n<span class=\"hljs-built_in\">db</span> <span class=\"hljs-string\">\"Buzz!\"</span>,<span class=\"hljs-number\">0</span></code></pre>\n<h2>Arithmetic's</h2>\n<p>To print number, we need to know it's digits, and to know it's digits, we need to be able to divide and find a remainder of division.</p>\n<p>That is tricky to do in assembly, since <code>div</code> instruction has no parameters like <code>div z, x, y ; same as z = x/y</code> that I imagined.</p>\n<p>Turns out it has single argument, and that argument could not be a constant, it should be register, or address of memory. And size of that argument defines how <code>div</code> would behave. For 16 bit register, div will divide <code>dx:ax</code> by that register, and after this <code>ax</code> will store the result of division, <code>dx</code> will store the remainder.</p>\n<p>So, if we want to check if some 16 bit integer is divisible by 3, we need to do this:</p>\n<ol>\n<li>Put it into <code>ax</code></li>\n<li>Put 0 into <code>dx</code>, to make sure value from there does not influence result.</li>\n<li>Put 3 into <code>bx</code> (or <code>cx</code>)</li>\n<li>Finally, call <code>div bx</code> (or <code>div cx</code>)</li>\n<li>Now check if value in <code>dx</code> is 0, and jump depending on that.</li>\n</ol>\n<p>Using this, section of code that prints string addressed by label <code>fizzbuzz</code>, if <code>ax</code> is divisible by 15 looks like this:</p>\n<pre><code class=\"hljs language-x86asm\">\t<span class=\"hljs-keyword\">push</span> <span class=\"hljs-built_in\">ax</span> <span class=\"hljs-comment\">; store ax, because it will be modified</span>\n\n\t<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">dx</span>, <span class=\"hljs-number\">0</span>  <span class=\"hljs-comment\">; div, divides dx:ax number by it's argument, but we want only ax</span>\n\t<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">bx</span>, <span class=\"hljs-number\">15</span> <span class=\"hljs-comment\">; div is not able to work with constants, so use bx to store 15</span>\n\t<span class=\"hljs-keyword\">div</span> <span class=\"hljs-built_in\">bx</span>     <span class=\"hljs-comment\">; divide dx:ax by bx. After this ax = ax / bx; dx = ax % bx;</span>\n\n\t<span class=\"hljs-keyword\">pop</span> <span class=\"hljs-built_in\">ax</span><span class=\"hljs-comment\">; restore ax</span>\n\n\t<span class=\"hljs-keyword\">cmp</span> <span class=\"hljs-built_in\">dx</span>, <span class=\"hljs-number\">0</span>  <span class=\"hljs-comment\">; was it divisible by 15 ? </span>\n\t<span class=\"hljs-keyword\">jne</span> check_fizz <span class=\"hljs-comment\">; if not - try with 5</span>\n\n\t<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">bx</span>, fizzbuzz <span class=\"hljs-comment\">; if yes - print fizzbuzz</span>\n\t<span class=\"hljs-keyword\">call</span> println</code></pre>\n<p>While programming in assembly, I feel like I need more registers, and a way to give them better names than just two letters. I miss variables.</p>\n<p>Maybe people who actually know assembly know how to use memory addresses as variables, I'm instead trying to stick to this 4 general purpose registers.</p>\n<h2>Printing decimals</h2>\n<p>Ok, now we are able to print any string by it's address, and we are able to do division. The only thing left is to print decimal numbers.</p>\n<p>For that - we just loop over all the digits, and print each. The only hard thing is that it is hard to know with which digit the number starts. It is easier to know with which digit it ends, because it's the remainder of division by 10. The digit that ends our number divided by 10 - is the second digit, etc... We could divide by 10 in each iteration, and get digits in reverse.</p>\n<p>But we could push all of them to the stack, and then just pop and print, that would print them in normal order.</p>\n<p>My decimal number printing code looks like this:</p>\n<pre><code class=\"hljs language-x86asm\"><span class=\"hljs-comment\">; print_decimal routine prints number stored in ax</span>\n<span class=\"hljs-symbol\">print_decimal:</span>\n\t<span class=\"hljs-keyword\">push</span> <span class=\"hljs-built_in\">ax</span> <span class=\"hljs-comment\">; store values of registers that will change</span>\n\t<span class=\"hljs-keyword\">push</span> <span class=\"hljs-built_in\">bx</span>\n\t<span class=\"hljs-keyword\">push</span> <span class=\"hljs-built_in\">cx</span>\n\t<span class=\"hljs-keyword\">push</span> <span class=\"hljs-built_in\">dx</span>\n\n\t<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">cx</span>, <span class=\"hljs-number\">0</span> <span class=\"hljs-comment\">; cx will hold number of digits, initially 0</span>\n\n\t<span class=\"hljs-keyword\">cmp</span> <span class=\"hljs-built_in\">ax</span>, <span class=\"hljs-number\">0</span> <span class=\"hljs-comment\">; is number we want to print 0? </span>\n\t<span class=\"hljs-keyword\">jne</span> push_last_digit <span class=\"hljs-comment\">; if not - proceed to pushing last digit of it</span>\n\t<span class=\"hljs-keyword\">push</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-comment\">; digit is 0</span>\n\t<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">cx</span>, <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">; number of digits in stack is 1</span>\n\t<span class=\"hljs-keyword\">jmp</span> print_from_stack <span class=\"hljs-comment\">; and print this</span>\n<span class=\"hljs-symbol\">\n\tpush_last_digit:</span>\n\t\t<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">dx</span>, <span class=\"hljs-number\">0</span>  <span class=\"hljs-comment\">; div, divides dx:ax number by it's argument, but we want only ax</span>\n\t\t<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">bx</span>, <span class=\"hljs-number\">10</span> <span class=\"hljs-comment\">; div is not able to work with constants, so use bx to store 10</span>\n\t\t<span class=\"hljs-keyword\">div</span> <span class=\"hljs-built_in\">bx</span>     <span class=\"hljs-comment\">; divide dx:ax by bx. After this ax = ax / bx; dx = ax % bx;</span>\n\n\t\t<span class=\"hljs-keyword\">push</span> <span class=\"hljs-built_in\">dx</span>   <span class=\"hljs-comment\">; dx is last digit, put it in stack</span>\n\t\t<span class=\"hljs-keyword\">inc</span> <span class=\"hljs-built_in\">cx</span>    <span class=\"hljs-comment\">; we have one more digit to print</span>\n\n\t<span class=\"hljs-keyword\">cmp</span> <span class=\"hljs-built_in\">ax</span>, <span class=\"hljs-number\">0</span> <span class=\"hljs-comment\">; do we still have numbers?</span>\n\t<span class=\"hljs-keyword\">jne</span> push_last_digit <span class=\"hljs-comment\">; if yes - push that again</span>\n<span class=\"hljs-symbol\">\n\tprint_from_stack:</span>\n\t\t<span class=\"hljs-keyword\">cmp</span> <span class=\"hljs-built_in\">cx</span>, <span class=\"hljs-number\">0</span> <span class=\"hljs-comment\">; are there numbers to print?</span>\n\t\t<span class=\"hljs-keyword\">je</span> exit_print_decimal<span class=\"hljs-comment\">; if no - finish subroutine</span>\n\n\t\t<span class=\"hljs-keyword\">pop</span> <span class=\"hljs-built_in\">bx</span>  <span class=\"hljs-comment\">; put number to print into bx</span>\n\t\t<span class=\"hljs-keyword\">add</span> <span class=\"hljs-built_in\">bx</span>, <span class=\"hljs-string\">'0'</span> <span class=\"hljs-comment\">; add to bx ASCII code of 0</span>\n\t\t<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">al</span>, <span class=\"hljs-built_in\">bl</span>  <span class=\"hljs-comment\">; put that code to AL</span>\n\n\t\t<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-number\">ah</span>, <span class=\"hljs-number\">0x0e</span><span class=\"hljs-comment\">; teletype mode</span>\n\t\t<span class=\"hljs-keyword\">int</span> <span class=\"hljs-number\">0x10</span> \t <span class=\"hljs-comment\">; print current digit</span>\n\n\t\t<span class=\"hljs-keyword\">dec</span> <span class=\"hljs-built_in\">cx</span> <span class=\"hljs-comment\">; and now we have one less digit to print</span>\n\t<span class=\"hljs-keyword\">jmp</span> print_from_stack\n<span class=\"hljs-symbol\">\n\texit_print_decimal:</span>\n\n\t<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">al</span>, <span class=\"hljs-number\">13</span> <span class=\"hljs-comment\">; print \\r, moves to beginning of line</span>\n\t<span class=\"hljs-keyword\">int</span> <span class=\"hljs-number\">0x10</span>\n\t<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">al</span>, <span class=\"hljs-number\">10</span> <span class=\"hljs-comment\">; print \\n, moves to new line</span>\n\t<span class=\"hljs-keyword\">int</span> <span class=\"hljs-number\">0x10</span>\n\n\t<span class=\"hljs-keyword\">pop</span> <span class=\"hljs-built_in\">dx</span> <span class=\"hljs-comment\">; restore registers</span>\n\t<span class=\"hljs-keyword\">pop</span> <span class=\"hljs-built_in\">cx</span> \n\t<span class=\"hljs-keyword\">pop</span> <span class=\"hljs-built_in\">bx</span> \n\t<span class=\"hljs-keyword\">pop</span> <span class=\"hljs-built_in\">ax</span>\n<span class=\"hljs-keyword\">ret</span></code></pre>\n<h2>Slowing down</h2>\n<p>And our FizzBuzz runs so fast that it's impossible to read anything, I found out how to ask BIOS to wait for some time:</p>\n<pre><code class=\"hljs language-x86asm\"><span class=\"hljs-comment\">; sleep about cx/15 seconds</span>\n<span class=\"hljs-comment\">; CX:DX = interval in microseconds, if we don't set dx - one cx is ~65536A microseconds, or 1/15 of second</span>\n<span class=\"hljs-symbol\">sleep:</span>\n\t<span class=\"hljs-keyword\">push</span> <span class=\"hljs-built_in\">ax</span>\n\n\t<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">al</span>, <span class=\"hljs-number\">0</span>\n\t<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-number\">ah</span>, <span class=\"hljs-number\">0x86</span>\n\t<span class=\"hljs-keyword\">int</span> <span class=\"hljs-number\">0x15</span>\n\n\t<span class=\"hljs-keyword\">pop</span> <span class=\"hljs-built_in\">ax</span>\n<span class=\"hljs-keyword\">ret</span></code></pre>\n<h2>Main FizzBuzz loop</h2>\n<p>Having all that subroutines in place, FizzBuzz looks like this:</p>\n<pre><code class=\"hljs language-x86asm\"><span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">ax</span>, <span class=\"hljs-number\">0</span> <span class=\"hljs-comment\">; loop counter</span>\n<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">cx</span>, <span class=\"hljs-number\">5</span> <span class=\"hljs-comment\">; how long to sleep in 1/15th of second</span>\n<span class=\"hljs-symbol\">\nloop:</span>\n\t<span class=\"hljs-keyword\">inc</span> <span class=\"hljs-built_in\">ax</span>\n\t<span class=\"hljs-keyword\">call</span> sleep\n\n\t<span class=\"hljs-keyword\">push</span> <span class=\"hljs-built_in\">ax</span> <span class=\"hljs-comment\">; store ax, because it will be modified</span>\n\n\t<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">dx</span>, <span class=\"hljs-number\">0</span>  <span class=\"hljs-comment\">; div, divides dx:ax number by it's argument, but we want only ax</span>\n\t<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">bx</span>, <span class=\"hljs-number\">15</span> <span class=\"hljs-comment\">; div is not able to work with constants, so use bx to store 15</span>\n\t<span class=\"hljs-keyword\">div</span> <span class=\"hljs-built_in\">bx</span>     <span class=\"hljs-comment\">; divide dx:ax by bx. After this ax = ax / bx; dx = ax % bx;</span>\n\n\t<span class=\"hljs-keyword\">pop</span> <span class=\"hljs-built_in\">ax</span><span class=\"hljs-comment\">; restore ax</span>\n\n\t<span class=\"hljs-keyword\">cmp</span> <span class=\"hljs-built_in\">dx</span>, <span class=\"hljs-number\">0</span>  <span class=\"hljs-comment\">; was it divisible by 15 ? </span>\n\t<span class=\"hljs-keyword\">jne</span> check_fizz <span class=\"hljs-comment\">; if not - try with 5</span>\n\n\t<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">bx</span>, fizzbuzz <span class=\"hljs-comment\">; if yes - print fizzbuzz</span>\n\t<span class=\"hljs-keyword\">call</span> println\n\t<span class=\"hljs-keyword\">jmp</span> <span class=\"hljs-keyword\">loop</span> <span class=\"hljs-comment\">; continue with next iteration</span>\n<span class=\"hljs-symbol\">\n\tcheck_fizz:</span>\n\t<span class=\"hljs-keyword\">push</span> <span class=\"hljs-built_in\">ax</span>\n\n\t<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">dx</span>, <span class=\"hljs-number\">0</span>\n\t<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">bx</span>, <span class=\"hljs-number\">5</span>\n\t<span class=\"hljs-keyword\">div</span> <span class=\"hljs-built_in\">bx</span>\n\n\t<span class=\"hljs-keyword\">pop</span> <span class=\"hljs-built_in\">ax</span>\n\n\t<span class=\"hljs-keyword\">cmp</span> <span class=\"hljs-built_in\">dx</span>, <span class=\"hljs-number\">0</span>  <span class=\"hljs-comment\">; was it divisible by 5 ? </span>\n\t<span class=\"hljs-keyword\">jne</span> check_buzz <span class=\"hljs-comment\">; if not - try with 3</span>\n\n\t<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">bx</span>, fizz <span class=\"hljs-comment\">; if yes - print fizz</span>\n\t<span class=\"hljs-keyword\">call</span> println\n\n\t<span class=\"hljs-keyword\">jmp</span> <span class=\"hljs-keyword\">loop</span> <span class=\"hljs-comment\">; and move to next number</span>\n<span class=\"hljs-symbol\">\n\tcheck_buzz:</span>\n\t<span class=\"hljs-keyword\">push</span> <span class=\"hljs-built_in\">ax</span>\n\n\t<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">dx</span>, <span class=\"hljs-number\">0</span>\n\t<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">bx</span>, <span class=\"hljs-number\">3</span>\n\t<span class=\"hljs-keyword\">div</span> <span class=\"hljs-built_in\">bx</span>\n\n\t<span class=\"hljs-keyword\">pop</span> <span class=\"hljs-built_in\">ax</span>\n\n\t<span class=\"hljs-keyword\">cmp</span> <span class=\"hljs-built_in\">dx</span>, <span class=\"hljs-number\">0</span>  <span class=\"hljs-comment\">; was it divisible by 3 ? </span>\n\t<span class=\"hljs-keyword\">jne</span> integer <span class=\"hljs-comment\">; not - proceed to printing</span>\n\n\t<span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">bx</span>, buzz <span class=\"hljs-comment\">; if yes - print fizz</span>\n\t<span class=\"hljs-keyword\">call</span> println\n\n\t<span class=\"hljs-keyword\">jmp</span> <span class=\"hljs-keyword\">loop</span>\n<span class=\"hljs-symbol\">\n\tinteger:</span>\n\t<span class=\"hljs-keyword\">call</span> print_decimal\n<span class=\"hljs-keyword\">jmp</span> <span class=\"hljs-keyword\">loop</span></code></pre>\n<p>Overall code with all the subroutines, constants, and comments takes me 172 lines. A lot for a FizzBuzz, but in Python you would not write two \"print\" functions for two data types from scratch.</p>\n<p>If I remove padding with zeroes, it no longer runs, but binary has just a little over 200 bytes. So, even with my poor assembly skills FizzBuzz could fit into 512 bytes bootsector twice.</p>"},"__N_SSG":true}