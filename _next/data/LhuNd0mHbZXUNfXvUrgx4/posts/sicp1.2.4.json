{"pageProps":{"id":"sicp1.2.4","title":"SICP 1.2.4 Exponentiation","date":"2020-06-20T17:04:58.000Z","tags":["SICP"],"updated_at":"2021-04-20T00:38:16+02:00","content":"<p>Today I learned that ancient mit-scheme REPL could be improved with history &#x26; tab completion. Thanks to this <a href=\"https://stackoverflow.com/a/11916365/816449\">StackOverflow answer</a>. <code>sudo apt-get install rlwrap</code>, and then run scheme as <code>rlwrap scheme</code> That answer is not very recent too, but here we are trying to learn really ancient magic.</p>\n<p>And <a href=\"https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book-Z-H-11.html#%25_sec_1.2.4\">this section</a> really starts to feel like magic. In the end, I learned that there is a way to compute n-th Fibonacci number with time complexity <code>O(log(n))</code>. And just few sections before, authors show how computing Fibonacci sequence using wrong approach could blow up exponencially.</p>\n<h2 id=\"exercise-116-fast-exponentiation\">Exercise 1.16: Fast exponentiation</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">sqr</span> x) (<span class=\"hljs-name\"><span class=\"hljs-built_in\">*</span></span> x x))\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">fast-exp</span> x n) \n    (<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">iter</span> x n a) \n       (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cond</span></span>\n       ((<span class=\"hljs-name\"><span class=\"hljs-built_in\">=</span></span> n <span class=\"hljs-number\">0</span>) a)\n       ((<span class=\"hljs-name\"><span class=\"hljs-built_in\">even?</span></span> n) (<span class=\"hljs-name\">iter</span> (<span class=\"hljs-name\">sqr</span> x) (<span class=\"hljs-name\"><span class=\"hljs-built_in\">/</span></span> n <span class=\"hljs-number\">2</span>) a))\n       (<span class=\"hljs-name\"><span class=\"hljs-built_in\">else</span></span> (<span class=\"hljs-name\">iter</span> x (<span class=\"hljs-name\"><span class=\"hljs-built_in\">-</span></span> n <span class=\"hljs-number\">1</span>) (<span class=\"hljs-name\"><span class=\"hljs-built_in\">*</span></span> a x)))\n       ) \n    )\n    (<span class=\"hljs-name\">iter</span> x n <span class=\"hljs-number\">1</span>)\n)</code></pre>\n<h2 id=\"exercise-117-fast-multiplication\">Exercise 1.17: \"Fast\" multiplication</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">double</span> x) (<span class=\"hljs-name\"><span class=\"hljs-built_in\">+</span></span> x x))\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">halve</span> x) (<span class=\"hljs-name\"><span class=\"hljs-built_in\">/</span></span> x <span class=\"hljs-number\">2</span>))\n\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">fast-m</span> a b) \n    (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cond</span></span> ((<span class=\"hljs-name\"><span class=\"hljs-built_in\">=</span></span> b <span class=\"hljs-number\">1</span>) a)\n        ((<span class=\"hljs-name\"><span class=\"hljs-built_in\">even?</span></span> b) (<span class=\"hljs-name\">fast-m</span> (<span class=\"hljs-name\">double</span> a) (<span class=\"hljs-name\">halve</span> b)))\n        (<span class=\"hljs-name\"><span class=\"hljs-built_in\">else</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">+</span></span> a (<span class=\"hljs-name\">fast-m</span> a (<span class=\"hljs-name\"><span class=\"hljs-built_in\">-</span></span> b <span class=\"hljs-number\">1</span>)))\n    )\n)</code></pre>\n<h2 id=\"exercise-118-iterative-multiplicaton\">Exercise 1.18: Iterative multiplicaton</h2>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">fast-m</span> a b) \n    (<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">iter</span> a b p) \n       (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cond</span></span>\n       ((<span class=\"hljs-name\"><span class=\"hljs-built_in\">=</span></span> b <span class=\"hljs-number\">1</span>) (<span class=\"hljs-name\"><span class=\"hljs-built_in\">+</span></span> a p))\n       ((<span class=\"hljs-name\"><span class=\"hljs-built_in\">even?</span></span> b) (<span class=\"hljs-name\">iter</span> (<span class=\"hljs-name\">double</span> a) (<span class=\"hljs-name\">halve</span> b) p))\n       (<span class=\"hljs-name\"><span class=\"hljs-built_in\">else</span></span> (<span class=\"hljs-name\">iter</span> a (<span class=\"hljs-name\"><span class=\"hljs-built_in\">-</span></span> b <span class=\"hljs-number\">1</span>) (<span class=\"hljs-name\"><span class=\"hljs-built_in\">+</span></span> p a)))\n       ) \n    )\n    (<span class=\"hljs-name\">iter</span> a b <span class=\"hljs-number\">0</span>)\n)</code></pre>\n<h2 id=\"exercise-119-fast-fibonacci\">Exercise 1.19: Fast Fibonacci</h2>\n<p>With this exercise first, you discover that there is Fibonacci sequence inside Fibonacci formulas, and then, you figure out from where there appears exponential rise. Magical:</p>\n<pre><code class=\"hljs language-scheme\">(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">fib</span> n)\n  (<span class=\"hljs-name\">fib-iter</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">1</span> n))\n(<span class=\"hljs-name\"><span class=\"hljs-built_in\">define</span></span> (<span class=\"hljs-name\">fib-iter</span> a b p q count)\n  (<span class=\"hljs-name\"><span class=\"hljs-built_in\">cond</span></span> ((<span class=\"hljs-name\"><span class=\"hljs-built_in\">=</span></span> count <span class=\"hljs-number\">0</span>) b)\n        ((<span class=\"hljs-name\"><span class=\"hljs-built_in\">even?</span></span> count)\n         (<span class=\"hljs-name\">fib-iter</span> a\n                   b\n                   (<span class=\"hljs-name\"><span class=\"hljs-built_in\">+</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">*</span></span> p p) (<span class=\"hljs-name\"><span class=\"hljs-built_in\">*</span></span> q q))   <span class=\"hljs-comment\">; compute p'</span>\n                   (<span class=\"hljs-name\"><span class=\"hljs-built_in\">+</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">*</span></span> q q) (<span class=\"hljs-name\"><span class=\"hljs-built_in\">*</span></span> <span class=\"hljs-number\">2</span> p q)) <span class=\"hljs-comment\">; compute q'</span>\n                   (<span class=\"hljs-name\"><span class=\"hljs-built_in\">/</span></span> count <span class=\"hljs-number\">2</span>)))\n        (<span class=\"hljs-name\"><span class=\"hljs-built_in\">else</span></span> (<span class=\"hljs-name\">fib-iter</span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">+</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">*</span></span> b q) (<span class=\"hljs-name\"><span class=\"hljs-built_in\">*</span></span> a q) (<span class=\"hljs-name\"><span class=\"hljs-built_in\">*</span></span> a p))\n                        (<span class=\"hljs-name\"><span class=\"hljs-built_in\">+</span></span> (<span class=\"hljs-name\"><span class=\"hljs-built_in\">*</span></span> b p) (<span class=\"hljs-name\"><span class=\"hljs-built_in\">*</span></span> a q))\n                        p\n                        q\n                        (<span class=\"hljs-name\"><span class=\"hljs-built_in\">-</span></span> count <span class=\"hljs-number\">1</span>)))))</code></pre>\n<p>I not dediced yet on how to get latex in Hugo, so I'll not add here my calculations for <code>p'</code> and <code>q'</code>.</p>"},"__N_SSG":true}