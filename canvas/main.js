// Generated by CoffeeScript 1.6.1
(function() {
  var $, Character, HEIGHT, LoadingSprite, LoadingSpriteSet, MovingSprite, Tile, WIDTH, get_random_sprite, load_characters, load_tiles, wesnoth_image,
    _this = this,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $ = jQuery;

  WIDTH = 800;

  HEIGHT = 600;

  wesnoth_image = function(path) {
    return 'https://raw.github.com/wesnoth/wesnoth-old/master/data/core/images/' + path;
  };

  LoadingSpriteSet = (function() {

    function LoadingSpriteSet(path, animations, onLoad) {
      this.path = path;
      this.animations = animations;
      this.onLoad = onLoad;
      this.load();
    }

    LoadingSpriteSet.prototype.load = function() {
      var allready, data, img, name, path, x, _ref, _results;
      allready = new AllReady(_.bind(this.onLoad, this));
      _ref = this.animations;
      _results = [];
      for (name in _ref) {
        data = _ref[name];
        console.log("loading " + name);
        data.frames = [];
        _results.push((function() {
          var _i, _ref1, _results1;
          _results1 = [];
          for (x = _i = 0, _ref1 = data.count - 1; 0 <= _ref1 ? _i <= _ref1 : _i >= _ref1; x = 0 <= _ref1 ? ++_i : --_i) {
            img = new Image();
            img.onload = allready.wait();
            path = "" + this.path + (data.pattern(x + data.first_index));
            img.src = path;
            _results1.push(data.frames[x] = img);
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    return LoadingSpriteSet;

  })();

  LoadingSprite = (function() {

    function LoadingSprite(path, afterLoad) {
      var _this = this;
      this.path = path;
      this.afterLoad = afterLoad;
      this.onLoad = function() {
        return LoadingSprite.prototype.onLoad.apply(_this, arguments);
      };
      this.load();
    }

    LoadingSprite.prototype.onLoad = function() {
      this.width = this.img.naturalWidth;
      this.height = this.img.naturalHeight;
      return this.afterLoad();
    };

    LoadingSprite.prototype.load = function() {
      this.img = new Image();
      this.img.onload = this.onLoad;
      return this.img.src = this.path;
    };

    return LoadingSprite;

  })();

  MovingSprite = (function() {

    function MovingSprite(spriteSet) {
      this.spriteSet = spriteSet;
      this.setAnimation(_.keys(this.spriteSet.animations)[0]);
    }

    MovingSprite.prototype.setAnimation = function(name) {
      this.frame = 0;
      this.animation_name = name;
      return this.animation = this.spriteSet.animations[name];
    };

    MovingSprite.prototype.animate = function(ctx) {
      var img;
      this.frame = (this.frame + 1) % this.animation.count;
      img = this.animation.frames[this.frame];
      if (img) {
        return ctx.drawImage(img, this.x, this.y);
      }
    };

    return MovingSprite;

  })();

  Tile = (function(_super) {

    __extends(Tile, _super);

    function Tile() {
      return Tile.__super__.constructor.apply(this, arguments);
    }

    Tile.prototype.render = function(ctx, i, j) {
      var x, y;
      x = i * this.width * 0.75;
      y = j * this.height;
      if (i % 2) {
        y += this.height / 2.0;
      }
      return ctx.drawImage(this.img, x, y);
    };

    return Tile;

  })(LoadingSprite);

  Character = (function(_super) {

    __extends(Character, _super);

    function Character() {
      return Character.__super__.constructor.apply(this, arguments);
    }

    Character.prototype.render = function(ctx, x, y, dir, frame) {
      var sH, sW, sX, sY;
      sW = this.width / 4.0;
      sH = this.height / 4.0;
      sX = sW * ((frame % 8) / 2 | 0);
      sY = sH * dir;
      return ctx.drawImage(this.img, sX, sY, sW, sH, x, y, sW, sH);
    };

    Character.prototype.setAnimation = function(direction) {
      this.frame = 0;
      this.speed = 1;
      return this.direction = direction;
    };

    Character.prototype.move = function() {
      var sH, sW;
      switch (direction) {
        case 0:
          sH = this.height / 4.0;
          if (this.y < HEIGHT - sH) {
            this.frame = this.frame + 1;
            return this.y += this.speed;
          }
          break;
        case 1:
          if (this.x > 0) {
            this.frame = this.frame + 1;
            return this.x -= this.speed;
          }
          break;
        case 2:
          sW = this.width / 4.0;
          if (this.x < WIDTH - sW) {
            this.frame = this.frame + 1;
            return this.x += this.speed;
          }
          break;
        case 3:
          if (this.y > 0) {
            this.frame = this.frame + 1;
            return this.y -= this.speed;
          }
      }
    };

    Character.prototype.animate = function(ctx) {
      this.move();
      return this.render(ctx, this.x, this.y, this.direction, this.frame);
    };

    return Character;

  })(LoadingSprite);

  get_random_sprite = function(type) {
    var sprite;
    sprite = new MovingSprite(type);
    sprite.x = _.random(750);
    sprite.y = _.random(550);
    sprite.current_animation = 'idle';
    sprite.frame = 0;
    return sprite;
  };

  load_tiles = function(list, done) {
    var allready, fn, _i, _len, _results;
    allready = new AllReady(done);
    _results = [];
    for (_i = 0, _len = list.length; _i < _len; _i++) {
      fn = list[_i];
      _results.push(new Tile(wesnoth_image('terrain/' + fn), allready.wait()));
    }
    return _results;
  };

  load_characters = function(list, done) {
    var allready, fn, _i, _len, _results;
    allready = new AllReady(done);
    _results = [];
    for (_i = 0, _len = list.length; _i < _len; _i++) {
      fn = list[_i];
      _results.push(new Character('images/characters/' + fn, allready.wait()));
    }
    return _results;
  };

  $(function() {
    var allready, canvas, characters, ctx, fire, start, terrain, windmill;
    canvas = $('<canvas style="border: solid black 1px;"></canvas>').appendTo('#content');
    canvas = canvas[0];
    canvas.width = WIDTH;
    canvas.height = HEIGHT;
    ctx = canvas.getContext('2d');
    start = function() {
      var animate, character, fires, i, mills;
      console.log('Loaded!');
      mills = (function() {
        var _i, _results;
        _results = [];
        for (i = _i = 0; _i <= 10; i = ++_i) {
          _results.push(get_random_sprite(windmill));
        }
        return _results;
      })();
      fires = (function() {
        var _i, _results;
        _results = [];
        for (i = _i = 0; _i <= 20; i = ++_i) {
          _results.push(get_random_sprite(fire));
        }
        return _results;
      })();
      character = characters[3];
      character.x = 100;
      character.y = 100;
      character.setAnimation(0);
      animate = function() {
        var fire, j, mill, _i, _j, _k, _l, _len, _len1, _results;
        requestAnimationFrame(animate);
        for (i = _i = 0; _i <= 13; i = ++_i) {
          for (j = _j = 0; _j <= 8; j = ++_j) {
            terrain[1].render(ctx, i, j);
          }
        }
        character.animate(ctx);
        for (_k = 0, _len = mills.length; _k < _len; _k++) {
          mill = mills[_k];
          mill.animate(ctx);
        }
        _results = [];
        for (_l = 0, _len1 = fires.length; _l < _len1; _l++) {
          fire = fires[_l];
          _results.push(fire.animate(ctx));
        }
        return _results;
      };
      return animate();
    };
    allready = new AllReady(start);
    windmill = new LoadingSpriteSet(wesnoth_image('scenery/'), {
      'idle': {
        pattern: function(n) {
          return "windmill-" + (_.zfill(n, 2)) + ".png";
        },
        first_index: 1,
        count: 18
      }
    }, allready.wait());
    fire = new LoadingSpriteSet(wesnoth_image('scenery/'), {
      'idle': {
        pattern: function(n) {
          return "fire" + n + ".png";
        },
        first_index: 1,
        count: 8
      }
    }, allready.wait());
    terrain = load_tiles(['darken.png', 'sand/desert.png', 'grass/green.png', 'water/coast-tile.png'], allready.wait());
    return characters = load_characters(['astromechdroid.png', 'cat.png', 'chewie.png', 'hulk.png', 'indianajones.png', 'indianajones_whip.png', 'luggage.png', 'nazi.png', 'princessleia.png', 'rincewind.png', 'scottish_m1.png', 'stormtrooper.png', 'yoda.png'], allready.wait());
  });

}).call(this);
