// Generated by CoffeeScript 1.6.1
(function() {
  var $, add_check_button, c;

  $ = jQuery;

  c = console.log.bind(console);

  $.fn.editable = function() {
    var $this, editable;
    $this = $(this);
    editable = function(e) {
      return $this.attr('contentEditable', e);
    };
    $this.click(function() {
      return editable(true);
    }).blur(function() {
      return editable(false);
    }).keypress(function(e) {
      var code;
      code = e.keyCode ? e.keyCode : e.which;
      if (code === 13) {
        return $this.blur();
      }
    });
    return this;
  };

  $.fn.checkContent = function(visual, html) {
    var $this, content, correct;
    if (html == null) {
      html = false;
    }
    $this = $(this);
    content = html ? $this.html().trim() : $this.data('content');
    c("Checking if " + content + " is corrrect");
    correct = content === $this.data('correct');
    if (visual) {
      if (correct) {
        $this.css('background-color', '#CFC');
      } else {
        $this.css('background-color', '#FAA');
      }
    }
    return correct;
  };

  $.fn.fillExcercise = function(check_instantly) {
    var $editables;
    c('fillExcercise plugin started for', this);
    /* inside this, elements with class "editable"
        become editable and data-correct attribute should be set.
    */

    $editables = $('.editable', this).editable();
    return add_check_button($(this), $editables, true);
  };

  $.fn.dragExcercise = function(check_instantly) {
    var $droppables;
    c('dragExcercise plugin started for', this);
    /*
    Inside exercise element elements with class "draggable" should be 
    dragged into elements with class "droppable".
    When the html content of draggable equals data stored in 
    data-correct attribute of droppable element, then draggable and
    droppable become green. Else red.
    */

    $('.draggable', this).draggable();
    $droppables = $('.droppable', this).droppable({
      tolerance: 'pointer',
      drop: function(evt, elem) {
        var $elem, $this;
        $this = $(this);
        $elem = $(elem.draggable);
        c($elem.html(), '- data put into container');
        c($this.data('correct'), '- data which should be put into container');
        if ($this.data('content')) {
          c('element already occupied');
          return false;
        }
        $this.data('content', $elem.html());
        c('content put into element');
        if (check_instantly) {
          return $this.checkContent(true);
        }
      },
      out: function(evt, elem) {
        var $elem, $this;
        $this = $(this);
        $elem = $(elem.draggable);
        if ($this.data('content') !== $elem.html()) {
          c('leaves some other element');
          return false;
        }
        $this.css('background-color', 'white');
        $this.data('content', '');
        return $elem.css('color', 'black');
      }
    });
    return add_check_button($(this), $droppables);
  };

  add_check_button = function($this, $elements, check_html) {
    var $check, check_all;
    if (check_html == null) {
      check_html = false;
    }
    check_all = function() {
      var correct, total;
      total = 0;
      correct = 0;
      $elements.each(function() {
        if ($(this).checkContent(true, check_html)) {
          correct++;
        }
        return total++;
      });
      return correct / total;
    };
    $check = $('<button>Check</button>').click(function() {
      var points;
      points = Math.round(check_all() * 12);
      return $this.append("<p>Points = " + points + " of 12</p>");
    });
    c('Adding check button');
    return $this.append($check);
  };

}).call(this);
