<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bunyk Taras</title>
    <link>http://example.org/</link>
    <description>Recent content on Bunyk Taras</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 08 Jul 2020 23:44:14 +0200</lastBuildDate>
    
	<atom:link href="http://example.org/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>SICP 2.1.2 Abstraction barriers</title>
      <link>http://example.org/posts/sicp2.1.2/</link>
      <pubDate>Wed, 08 Jul 2020 23:44:14 +0200</pubDate>
      
      <guid>http://example.org/posts/sicp2.1.2/</guid>
      <description>In this section I&amp;rsquo;m starting to have strong need for types.
Code in exercises becomes more verbose. Exercise 2.2 (define make-segment cons) (define start-segment car) (define end-segment cdr) (define make-point cons) (define x-point car) (define y-point cdr) (define (mid-segment segment) (let ( (s (start-segment segment)) (e (end-segment segment)) ) (make-point (/ (+ (x-point s) (x-point e)) 2) (/ (+ (y-point s) (y-point e)) 2) )) ) (define (print-point p) (newline) (display &amp;#34;(&amp;#34;) (display (x-point p)) (display &amp;#34;,&amp;#34;) (display (y-point p)) (display &amp;#34;)&amp;#34;)) (define a (make-point 1.</description>
    </item>
    
    <item>
      <title>SISP 2.1.1: Rational numbers</title>
      <link>http://example.org/posts/sicp2.1.1/</link>
      <pubDate>Wed, 08 Jul 2020 23:41:33 +0200</pubDate>
      
      <guid>http://example.org/posts/sicp2.1.1/</guid>
      <description>Exercise 2.1 Here is how you construct rational number:
(define (make-rat n d) (let ((g (gcd n d)) (sign (if (&amp;lt; d 0) -1 1))) (cons (/ n g sign) (/ d g sign)))) (define numer car) (define denom cdr) (define (print-rat x) (newline) (display (numer x)) (display &amp;#34;/&amp;#34;) (display (denom x))) That&amp;rsquo;s it, change sign of both parts when denominator is negative, you could do that by multiplying or dividing by -1.</description>
    </item>
    
    <item>
      <title>SICP 1.3.4 Procedures as returned values</title>
      <link>http://example.org/posts/sicp1.3.4/</link>
      <pubDate>Thu, 02 Jul 2020 23:43:40 +0200</pubDate>
      
      <guid>http://example.org/posts/sicp1.3.4/</guid>
      <description>Today I have learned that John Carmack was also challenged by SICP:
 100 pages into Structure and Interpretation of Computer Programs. I&amp;rsquo;m proud of myself for not skipping the Church Numerals exercise. Twitter
 I still need to get so far.
Exercise 1.40 (define (cubic a b c) (lambda (x) (+ (* x x x) (* a x x) (* b x) c )) ) Exercise 1.41 (define (inc x) (+ x 1)) (define (double f) (lambda (x) (f (f x))) ) Exercise 1.</description>
    </item>
    
    <item>
      <title>SICP 1.3.3 Procedures as general methods</title>
      <link>http://example.org/posts/sicp1.3.3/</link>
      <pubDate>Mon, 29 Jun 2020 23:32:06 +0200</pubDate>
      
      <guid>http://example.org/posts/sicp1.3.3/</guid>
      <description>I&amp;rsquo;ll attach solution from previous section to this post as it was the only exercise there.
Exercise 1.34 Runtime error with types (define (f g) (g 2)) (f f) -&amp;gt; (f 2) -&amp;gt; (2 2) 2 is obviously not a function, so scheme gives error when you try to apply it as function.
Exercise 1.35 Use fixed point procedure for finding golden ratio So, let&amp;rsquo;s divide both sides of equation Φ2 = Φ + 1.</description>
    </item>
    
    <item>
      <title>SICP 1.3.1 Procedures as arguments</title>
      <link>http://example.org/posts/sicp1.3.1/</link>
      <pubDate>Sat, 27 Jun 2020 19:32:06 +0200</pubDate>
      
      <guid>http://example.org/posts/sicp1.3.1/</guid>
      <description>Solving more exercises, trying not to skip to be able to learn next chapters better. Exercise 1.29 Simpson rule integration (define (cube x) (* x x x)) (define (integral f a b dx) (define (add-dx x) (+ x dx)) (* (sum f (+ a (/ dx 2.0)) add-dx b) dx)) (define (sum term a next b) (if (&amp;gt; a b) 0 (+ (term a) (sum term (next a) next b)))) (integral cube 0 1 0.</description>
    </item>
    
    <item>
      <title>SICP 1.2.6 Primes</title>
      <link>http://example.org/posts/sicp1.2.6/</link>
      <pubDate>Sun, 21 Jun 2020 18:22:37 +0200</pubDate>
      
      <guid>http://example.org/posts/sicp1.2.6/</guid>
      <description>Exercise 1.21: Smallest divisors This is so trivial, so I&amp;rsquo;ll try to rewrite example, because it&amp;rsquo;s just copypaste otherwise:
(define (divisor? d n) (= (remainder n d) 0)) (define (smallest-divisor n) (define (find-divisor n d) (cond ((&amp;gt; (sqr d) n) n) ((divisor? d n) d) (else (find-divisor n (+ d 1))) ) ) (find-divisor n 2) ) 1 ]=&amp;gt; (smallest-divisor 199) ;Value: 199 1 ]=&amp;gt; (smallest-divisor 1999) ;Value: 1999 1 ]=&amp;gt; (smallest-divisor 19999) ;Value: 7 Well, that was unexpected.</description>
    </item>
    
    <item>
      <title>SICP 1.2.4 Exponentiation</title>
      <link>http://example.org/posts/sicp1.2.4/</link>
      <pubDate>Sat, 20 Jun 2020 19:04:58 +0200</pubDate>
      
      <guid>http://example.org/posts/sicp1.2.4/</guid>
      <description>Today I learned that ancient mit-scheme REPL could be improved with history &amp;amp; tab completion. Thanks to this StackOverflow answer. sudo apt-get install rlwrap, and then run scheme as rlwrap scheme That answer is not very recent too, but here we are trying to learn really ancient magic.
And this section really starts to feel like magic. In the end, I learned that there is a way to compute n-th Fibonacci number with time complexity O(log(n)).</description>
    </item>
    
    <item>
      <title>SICP 1.2.2 Tree recursion</title>
      <link>http://example.org/posts/sicp1.2.2/</link>
      <pubDate>Sun, 14 Jun 2020 21:06:09 +0200</pubDate>
      
      <guid>http://example.org/posts/sicp1.2.2/</guid>
      <description>I like how they did not shown yet how to work with any data structures, but wrote function that behaves like a immutable array:
(define (first-denomination kinds-of-coins) (cond ((= kinds-of-coins 1) 1) ((= kinds-of-coins 2) 5) ((= kinds-of-coins 3) 10) ((= kinds-of-coins 4) 25) ((= kinds-of-coins 5) 50))) Exercise 1.11 Functions should produce following sequence: 1, 2, 4, 11, 25, 59, 142 (Sequence A100550 in the On-Line Encyclopedia of Integer Sequences)</description>
    </item>
    
    <item>
      <title>SICP1.2.1 Recursion &amp; Iteration</title>
      <link>http://example.org/posts/sicp1.2.1/</link>
      <pubDate>Sun, 14 Jun 2020 20:28:16 +0200</pubDate>
      
      <guid>http://example.org/posts/sicp1.2.1/</guid>
      <description>&lt;p&gt;Ok, second subchapter is more challenging, so I&amp;rsquo;ll go by subsections.&lt;/p&gt;

&lt;p&gt;Here is &lt;a href=&#34;https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book-Z-H-11.html#%_sec_1.2.1&#34;&gt;link to the chapter of the book I would solve today&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SICP 1.1 The Elements of Programming</title>
      <link>http://example.org/posts/sicp1.1/</link>
      <pubDate>Sat, 13 Jun 2020 23:22:32 +0200</pubDate>
      
      <guid>http://example.org/posts/sicp1.1/</guid>
      <description>&lt;p&gt;Decided to finally try and go through this book. Will try to keep journal with notes here.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>HTTP2 vs WebSockets: a study of dashboard performance</title>
      <link>http://example.org/posts/http2-vs-websockets/</link>
      <pubDate>Thu, 20 Dec 2018 15:48:50 +0200</pubDate>
      
      <guid>http://example.org/posts/http2-vs-websockets/</guid>
      <description>&lt;p&gt;In this post, we will compare the performance of different approaches to load data for analytics dashboards, or any page where we have lots of different requests to the same server.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>http://example.org/posts/hello-world/</link>
      <pubDate>Mon, 27 Aug 2018 23:12:23 +0300</pubDate>
      
      <guid>http://example.org/posts/hello-world/</guid>
      <description>This is hello world in posts directory</description>
    </item>
    
  </channel>
</rss>