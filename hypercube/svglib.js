// Generated by CoffeeScript 1.6.1
(function() {
  var Line, Point, SVG;

  Point = (function() {

    function Point(x, y) {
      this._x = x;
      this._y = y;
      Object.defineProperty(this, 'x', {
        configurable: true,
        get: function() {
          return this._x;
        },
        set: function(value) {
          this._x = value;
          return radio('move_x').broadcast(this);
        }
      });
      Object.defineProperty(this, 'y', {
        configurable: true,
        get: function() {
          return this._y;
        },
        set: function(value) {
          this._y = value;
          return radio('move_y').broadcast(this);
        }
      });
    }

    Point.prototype.onMoveX = function(cb) {
      var that;
      that = this;
      return radio('move_x').subscribe(function(point) {
        if (point === that) {
          return cb();
        }
      });
    };

    Point.prototype.onMoveY = function(cb) {
      var that;
      that = this;
      return radio('move_y').subscribe(function(point) {
        if (point === that) {
          return cb();
        }
      });
    };

    return Point;

  })();

  Line = (function() {

    function Line(svg, a, b) {
      var that;
      this.a = a;
      this.b = b;
      this.element = document.createElementNS('http://www.w3.org/2000/svg', 'line');
      this.element.setAttribute('style', svg.line_style);
      this.element.setAttribute('x1', svg.x(this.a.x));
      this.element.setAttribute('y1', svg.y(this.a.y));
      this.element.setAttribute('x2', svg.x(this.b.x));
      this.element.setAttribute('y2', svg.y(this.b.y));
      that = this;
      this.a.onMoveX(function() {
        return that.element.setAttribute('x1', svg.x(that.a.x));
      });
      this.a.onMoveY(function() {
        return that.element.setAttribute('y1', svg.y(that.a.y));
      });
      this.b.onMoveX(function() {
        return that.element.setAttribute('x2', svg.x(that.b.x));
      });
      this.b.onMoveY(function() {
        return that.element.setAttribute('y2', svg.y(that.b.y));
      });
      svg.$element.append(this.element);
    }

    return Line;

  })();

  SVG = (function() {

    function SVG(selector, width, height, a) {
      this.width = width;
      this.height = height;
      this.a = a != null ? a : 2.0;
      this.$element = $("<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" height=\"" + height + "\" width=\"" + width + "\"></svg>");
      $(selector).append(this.$element);
    }

    SVG.prototype.clear = function() {
      return this.$element.html('');
    };

    SVG.prototype.line4 = function(ax, ay, bx, _by) {
      return this.line2(new Point(ax, ay), new Point(bx, _by));
    };

    SVG.prototype.line2 = function(a, b) {
      return new Line(this, a, b);
    };

    SVG.prototype.line = function() {
      if (arguments.length === 2) {
        this.line2.apply(this, arguments);
      }
      if (arguments.length === 4) {
        return this.line4.apply(this, arguments);
      }
    };

    SVG.prototype.x = function(val) {
      return (val / this.a + 0.5) * this.width;
    };

    SVG.prototype.y = function(val) {
      return (val / this.a + 0.5) * this.height;
    };

    return SVG;

  })();

  window.svglib = {
    'SVG': SVG,
    'Point': Point
  };

}).call(this);
