// Generated by CoffeeScript 1.6.1
(function() {
  var Matrix, fmt_cell, identity;

  fmt_cell = function(x) {
    return (x > 0 ? '&nbsp;' : '') + x.toFixed(2);
  };

  identity = function(x, y) {
    if (x === y) {
      return 1;
    } else {
      return 0;
    }
  };

  Matrix = (function() {

    function Matrix(width, height, data, sparse) {
      var i, j, _i, _j;
      this.width = width;
      this.height = height;
      if (data == null) {
        data = (function() {
          return 0;
        });
      }
      if (sparse == null) {
        sparse = false;
      }
      if (sparse) {
        this.indicator = data;
      } else {
        if (typeof data === 'function') {
          this.data = [];
          for (i = _i = 0; 0 <= height ? _i < height : _i > height; i = 0 <= height ? ++_i : --_i) {
            this.data[i] = [];
            for (j = _j = 0; 0 <= width ? _j < width : _j > width; j = 0 <= width ? ++_j : --_j) {
              this.data[i][j] = data(j, i);
            }
          }
        } else {
          this.data = data;
        }
      }
    }

    Matrix.prototype.indicator = function(x, y) {
      return this.data[y][x];
    };

    Matrix.prototype.set = function(x, y, value) {
      return this.data[y][x] = value;
    };

    Matrix.prototype.html = function() {
      var html, i, j, _i, _j, _ref, _ref1;
      html = ['<table class="matrix">'];
      for (i = _i = 0, _ref = this.height; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        html.push('<tr>');
        for (j = _j = 0, _ref1 = this.width; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
          html.push("<td>" + (fmt_cell(this.data[i][j])) + "</td>");
        }
        html.push('</tr>');
      }
      html.push('</table>');
      return html.join('');
    };

    Matrix.prototype.mult = function(other) {
      var i, j, k, result, sum, _i, _j, _k, _ref, _ref1, _ref2;
      if (this.width !== other.height) {
        console.log(this, other);
        throw "error: incompatible matrix sizes for multiplication";
      }
      result = [];
      for (i = _i = 0, _ref = this.height; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        result[i] = [];
        for (j = _j = 0, _ref1 = other.width; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
          sum = 0;
          for (k = _k = 0, _ref2 = this.width; 0 <= _ref2 ? _k < _ref2 : _k > _ref2; k = 0 <= _ref2 ? ++_k : --_k) {
            sum += this.indicator(k, i) * other.indicator(j, k);
          }
          result[i][j] = sum;
        }
      }
      return new Matrix(other.width, this.height, result);
    };

    return Matrix;

  })();

  window.matrix = {
    'Matrix': Matrix,
    'identity': identity
  };

}).call(this);
